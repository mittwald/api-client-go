package orderv1

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

//This data type was generated from the following JSON schema:
// oneOf:
//    - {"$ref": "#/components/schemas/de.mittwald.v1.order.MachineTypeSpec"}
//    - {"$ref": "#/components/schemas/de.mittwald.v1.order.HardwareSpec"}

type ProjectHostingOrderSpec struct {
	AlternativeMachineTypeSpec *MachineTypeSpec
	AlternativeHardwareSpec    *HardwareSpec
}

func (a *ProjectHostingOrderSpec) MarshalJSON() ([]byte, error) {
	if a.AlternativeMachineTypeSpec != nil {
		return json.Marshal(a.AlternativeMachineTypeSpec)
	}
	if a.AlternativeHardwareSpec != nil {
		return json.Marshal(a.AlternativeHardwareSpec)
	}
	return []byte("null"), nil
}

func (a *ProjectHostingOrderSpec) UnmarshalJSON(input []byte) error {
	reader := bytes.NewReader(input)
	decodedAtLeastOnce := false
	dec := json.NewDecoder(reader)
	dec.DisallowUnknownFields()

	reader.Reset(input)
	var alternativeMachineTypeSpec MachineTypeSpec
	if err := dec.Decode(&alternativeMachineTypeSpec); err == nil {
		//subtype: *generator.ReferenceType
		if vErr := alternativeMachineTypeSpec.Validate(); vErr == nil {
			a.AlternativeMachineTypeSpec = &alternativeMachineTypeSpec
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeHardwareSpec HardwareSpec
	if err := dec.Decode(&alternativeHardwareSpec); err == nil {
		//subtype: *generator.ReferenceType
		if vErr := alternativeHardwareSpec.Validate(); vErr == nil {
			a.AlternativeHardwareSpec = &alternativeHardwareSpec
			decodedAtLeastOnce = true
		}
	}

	if !decodedAtLeastOnce {
		return fmt.Errorf("could not unmarshal into any alternative for type %T", a)
	}
	return nil
}

func (a *ProjectHostingOrderSpec) Validate() error {
	if a.AlternativeMachineTypeSpec != nil {
		return a.AlternativeMachineTypeSpec.Validate()
	}
	if a.AlternativeHardwareSpec != nil {
		return a.AlternativeHardwareSpec.Validate()
	}
	return errors.New("no alternative set")
}
