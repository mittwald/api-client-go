package aihostingv2

import (
	"errors"
	"fmt"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// This data type was generated from the following JSON schema:
// type: "object"
// properties:
//    "containerMeta": {"$ref": "#/components/schemas/de.mittwald.v1.aihosting.ContainerMeta"}
//    "customerId":
//        type: "string"
//    "isBlocked":
//        type: "boolean"
//        description: "Indicates whether the licence is blocked."
//        default: false
//    "licenceId":
//        type: "string"
//        description: "Auto generated uuid to identify licences in requests."
//    "licenceKey":
//        type: "string"
//        description: "The secret API key which is required for authentication with the LLM hosting."
//    "limit":
//        type: "object"
//        properties:
//            "allowedRequestsPerUnit":
//                type: "number"
//            "unit":
//                type: "string"
//                enum:
//                    - "minute"
//                    - "hour"
//        required:
//            - "allowedRequestsPerUnit"
//            - "unit"
//        description: "The number of allowed requests per unit. Limits are shared across all licences within the same project."
//    "models":
//        type: "array"
//        items:
//            type: "string"
//        description: "An array of LLM model identifiers enabled for this licence."
//    "name":
//        type: "string"
//    "projectId":
//        type: "string"
//    "rateLimit":
//        type: "number"
//        description: "Deprecated, please us limit.allowedRequestsPerUnit"
//        deprecated: true
// required:
//    - "licenceId"
//    - "licenceKey"
//    - "models"
//    - "name"
//    - "rateLimit"
//    - "isBlocked"
//    - "limit"

type Licence struct {
	ContainerMeta *ContainerMeta `json:"containerMeta,omitempty"`
	CustomerId    *string        `json:"customerId,omitempty"`
	IsBlocked     bool           `json:"isBlocked"`
	LicenceId     string         `json:"licenceId"`
	LicenceKey    string         `json:"licenceKey"`
	Limit         LicenceLimit   `json:"limit"`
	Models        []string       `json:"models"`
	Name          string         `json:"name"`
	ProjectId     *string        `json:"projectId,omitempty"`
	RateLimit     float64        `json:"rateLimit"`
}

func (o *Licence) Validate() error {
	if err := func() error {
		if o.ContainerMeta == nil {
			return nil
		}
		return o.ContainerMeta.Validate()
	}(); err != nil {
		return fmt.Errorf("invalid property containerMeta: %w", err)
	}
	if err := o.Limit.Validate(); err != nil {
		return fmt.Errorf("invalid property limit: %w", err)
	}
	if o.Models == nil {
		return errors.New("property models is required, but not set")
	}
	return nil
}
