package sslv2

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// This data type was generated from the following JSON schema:
// oneOf:
//    - type: "string"
//      enum:
//        - "certificate_read_failed"
//      description: "Failed to read the certificate."
//    - type: "string"
//      enum:
//        - "certificate_decode_failed"
//      description: "Failed to decode the certificate."
//    - type: "string"
//      enum:
//        - "certificate_parsing_failed"
//      description: "An error occurred while parsing the certificate."
//    - type: "string"
//      enum:
//        - "certificate_self_signed"
//      description: "The certificate is self-signed."
//    - type: "string"
//      enum:
//        - "certificate_not_authorized_to_sign"
//      description: "The certificate is not authorized to sign."
//    - type: "string"
//      enum:
//        - "certificate_expired"
//      description: "The certificate has expired."
//    - type: "string"
//      enum:
//        - "ca_not_authorized_for_this_name"
//      description: "The Certificate Authority (CA) is not authorized for this name."
//    - type: "string"
//      enum:
//        - "too_many_intermediates"
//      description: "There are too many intermediate certificates."
//    - type: "string"
//      enum:
//        - "incompatible_usage"
//      description: "The certificate's usage is incompatible."
//    - type: "string"
//      enum:
//        - "unknown_authority"
//      description: "The certificate is signed by an unknown authority."
//    - type: "string"
//      enum:
//        - "private_key_read_failed"
//      description: "Failed to read the private key."
//    - type: "string"
//      enum:
//        - "private_key_decode_failed"
//      description: "Failed to decode the private key."
//    - type: "string"
//      enum:
//        - "private_key_parse_failed"
//      description: "An error occurred while parsing the private key."
//    - type: "string"
//      enum:
//        - "private_key_encrypted"
//      description: "The private key is encrypted."
//    - type: "string"
//      enum:
//        - "private_key_not_rsa"
//      description: "The private key is not RSA."
//    - type: "string"
//      enum:
//        - "private_key_mismatch"
//      description: "The private key does not match the certificate."
//    - type: "string"
//      enum:
//        - "unknown_cloudflare_error"
//      description: "An unknown error occurred related to Cloudflare."
//    - type: "string"
//      enum:
//        - "unknown"
//      description: "An unknown error occurred."

type CertificateErrorMessage struct {
	AlternativeCertificateErrorMessageAlternative1  *CertificateErrorMessageAlternative1
	AlternativeCertificateErrorMessageAlternative2  *CertificateErrorMessageAlternative2
	AlternativeCertificateErrorMessageAlternative3  *CertificateErrorMessageAlternative3
	AlternativeCertificateErrorMessageAlternative4  *CertificateErrorMessageAlternative4
	AlternativeCertificateErrorMessageAlternative5  *CertificateErrorMessageAlternative5
	AlternativeCertificateErrorMessageAlternative6  *CertificateErrorMessageAlternative6
	AlternativeCertificateErrorMessageAlternative7  *CertificateErrorMessageAlternative7
	AlternativeCertificateErrorMessageAlternative8  *CertificateErrorMessageAlternative8
	AlternativeCertificateErrorMessageAlternative9  *CertificateErrorMessageAlternative9
	AlternativeCertificateErrorMessageAlternative10 *CertificateErrorMessageAlternative10
	AlternativeCertificateErrorMessageAlternative11 *CertificateErrorMessageAlternative11
	AlternativeCertificateErrorMessageAlternative12 *CertificateErrorMessageAlternative12
	AlternativeCertificateErrorMessageAlternative13 *CertificateErrorMessageAlternative13
	AlternativeCertificateErrorMessageAlternative14 *CertificateErrorMessageAlternative14
	AlternativeCertificateErrorMessageAlternative15 *CertificateErrorMessageAlternative15
	AlternativeCertificateErrorMessageAlternative16 *CertificateErrorMessageAlternative16
	AlternativeCertificateErrorMessageAlternative17 *CertificateErrorMessageAlternative17
	AlternativeCertificateErrorMessageAlternative18 *CertificateErrorMessageAlternative18
}

func (a *CertificateErrorMessage) MarshalJSON() ([]byte, error) {
	if a.AlternativeCertificateErrorMessageAlternative1 != nil {
		return json.Marshal(a.AlternativeCertificateErrorMessageAlternative1)
	}
	if a.AlternativeCertificateErrorMessageAlternative2 != nil {
		return json.Marshal(a.AlternativeCertificateErrorMessageAlternative2)
	}
	if a.AlternativeCertificateErrorMessageAlternative3 != nil {
		return json.Marshal(a.AlternativeCertificateErrorMessageAlternative3)
	}
	if a.AlternativeCertificateErrorMessageAlternative4 != nil {
		return json.Marshal(a.AlternativeCertificateErrorMessageAlternative4)
	}
	if a.AlternativeCertificateErrorMessageAlternative5 != nil {
		return json.Marshal(a.AlternativeCertificateErrorMessageAlternative5)
	}
	if a.AlternativeCertificateErrorMessageAlternative6 != nil {
		return json.Marshal(a.AlternativeCertificateErrorMessageAlternative6)
	}
	if a.AlternativeCertificateErrorMessageAlternative7 != nil {
		return json.Marshal(a.AlternativeCertificateErrorMessageAlternative7)
	}
	if a.AlternativeCertificateErrorMessageAlternative8 != nil {
		return json.Marshal(a.AlternativeCertificateErrorMessageAlternative8)
	}
	if a.AlternativeCertificateErrorMessageAlternative9 != nil {
		return json.Marshal(a.AlternativeCertificateErrorMessageAlternative9)
	}
	if a.AlternativeCertificateErrorMessageAlternative10 != nil {
		return json.Marshal(a.AlternativeCertificateErrorMessageAlternative10)
	}
	if a.AlternativeCertificateErrorMessageAlternative11 != nil {
		return json.Marshal(a.AlternativeCertificateErrorMessageAlternative11)
	}
	if a.AlternativeCertificateErrorMessageAlternative12 != nil {
		return json.Marshal(a.AlternativeCertificateErrorMessageAlternative12)
	}
	if a.AlternativeCertificateErrorMessageAlternative13 != nil {
		return json.Marshal(a.AlternativeCertificateErrorMessageAlternative13)
	}
	if a.AlternativeCertificateErrorMessageAlternative14 != nil {
		return json.Marshal(a.AlternativeCertificateErrorMessageAlternative14)
	}
	if a.AlternativeCertificateErrorMessageAlternative15 != nil {
		return json.Marshal(a.AlternativeCertificateErrorMessageAlternative15)
	}
	if a.AlternativeCertificateErrorMessageAlternative16 != nil {
		return json.Marshal(a.AlternativeCertificateErrorMessageAlternative16)
	}
	if a.AlternativeCertificateErrorMessageAlternative17 != nil {
		return json.Marshal(a.AlternativeCertificateErrorMessageAlternative17)
	}
	if a.AlternativeCertificateErrorMessageAlternative18 != nil {
		return json.Marshal(a.AlternativeCertificateErrorMessageAlternative18)
	}
	return []byte("null"), nil
}

func (a *CertificateErrorMessage) UnmarshalJSON(input []byte) error {
	reader := bytes.NewReader(input)
	decodedAtLeastOnce := false
	dec := json.NewDecoder(reader)
	dec.DisallowUnknownFields()

	reader.Reset(input)
	var alternativeCertificateErrorMessageAlternative1 CertificateErrorMessageAlternative1
	if err := dec.Decode(&alternativeCertificateErrorMessageAlternative1); err == nil {
		//subtype: *generator.StringEnumType
		if vErr := alternativeCertificateErrorMessageAlternative1.Validate(); vErr == nil {
			a.AlternativeCertificateErrorMessageAlternative1 = &alternativeCertificateErrorMessageAlternative1
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeCertificateErrorMessageAlternative2 CertificateErrorMessageAlternative2
	if err := dec.Decode(&alternativeCertificateErrorMessageAlternative2); err == nil {
		//subtype: *generator.StringEnumType
		if vErr := alternativeCertificateErrorMessageAlternative2.Validate(); vErr == nil {
			a.AlternativeCertificateErrorMessageAlternative2 = &alternativeCertificateErrorMessageAlternative2
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeCertificateErrorMessageAlternative3 CertificateErrorMessageAlternative3
	if err := dec.Decode(&alternativeCertificateErrorMessageAlternative3); err == nil {
		//subtype: *generator.StringEnumType
		if vErr := alternativeCertificateErrorMessageAlternative3.Validate(); vErr == nil {
			a.AlternativeCertificateErrorMessageAlternative3 = &alternativeCertificateErrorMessageAlternative3
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeCertificateErrorMessageAlternative4 CertificateErrorMessageAlternative4
	if err := dec.Decode(&alternativeCertificateErrorMessageAlternative4); err == nil {
		//subtype: *generator.StringEnumType
		if vErr := alternativeCertificateErrorMessageAlternative4.Validate(); vErr == nil {
			a.AlternativeCertificateErrorMessageAlternative4 = &alternativeCertificateErrorMessageAlternative4
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeCertificateErrorMessageAlternative5 CertificateErrorMessageAlternative5
	if err := dec.Decode(&alternativeCertificateErrorMessageAlternative5); err == nil {
		//subtype: *generator.StringEnumType
		if vErr := alternativeCertificateErrorMessageAlternative5.Validate(); vErr == nil {
			a.AlternativeCertificateErrorMessageAlternative5 = &alternativeCertificateErrorMessageAlternative5
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeCertificateErrorMessageAlternative6 CertificateErrorMessageAlternative6
	if err := dec.Decode(&alternativeCertificateErrorMessageAlternative6); err == nil {
		//subtype: *generator.StringEnumType
		if vErr := alternativeCertificateErrorMessageAlternative6.Validate(); vErr == nil {
			a.AlternativeCertificateErrorMessageAlternative6 = &alternativeCertificateErrorMessageAlternative6
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeCertificateErrorMessageAlternative7 CertificateErrorMessageAlternative7
	if err := dec.Decode(&alternativeCertificateErrorMessageAlternative7); err == nil {
		//subtype: *generator.StringEnumType
		if vErr := alternativeCertificateErrorMessageAlternative7.Validate(); vErr == nil {
			a.AlternativeCertificateErrorMessageAlternative7 = &alternativeCertificateErrorMessageAlternative7
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeCertificateErrorMessageAlternative8 CertificateErrorMessageAlternative8
	if err := dec.Decode(&alternativeCertificateErrorMessageAlternative8); err == nil {
		//subtype: *generator.StringEnumType
		if vErr := alternativeCertificateErrorMessageAlternative8.Validate(); vErr == nil {
			a.AlternativeCertificateErrorMessageAlternative8 = &alternativeCertificateErrorMessageAlternative8
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeCertificateErrorMessageAlternative9 CertificateErrorMessageAlternative9
	if err := dec.Decode(&alternativeCertificateErrorMessageAlternative9); err == nil {
		//subtype: *generator.StringEnumType
		if vErr := alternativeCertificateErrorMessageAlternative9.Validate(); vErr == nil {
			a.AlternativeCertificateErrorMessageAlternative9 = &alternativeCertificateErrorMessageAlternative9
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeCertificateErrorMessageAlternative10 CertificateErrorMessageAlternative10
	if err := dec.Decode(&alternativeCertificateErrorMessageAlternative10); err == nil {
		//subtype: *generator.StringEnumType
		if vErr := alternativeCertificateErrorMessageAlternative10.Validate(); vErr == nil {
			a.AlternativeCertificateErrorMessageAlternative10 = &alternativeCertificateErrorMessageAlternative10
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeCertificateErrorMessageAlternative11 CertificateErrorMessageAlternative11
	if err := dec.Decode(&alternativeCertificateErrorMessageAlternative11); err == nil {
		//subtype: *generator.StringEnumType
		if vErr := alternativeCertificateErrorMessageAlternative11.Validate(); vErr == nil {
			a.AlternativeCertificateErrorMessageAlternative11 = &alternativeCertificateErrorMessageAlternative11
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeCertificateErrorMessageAlternative12 CertificateErrorMessageAlternative12
	if err := dec.Decode(&alternativeCertificateErrorMessageAlternative12); err == nil {
		//subtype: *generator.StringEnumType
		if vErr := alternativeCertificateErrorMessageAlternative12.Validate(); vErr == nil {
			a.AlternativeCertificateErrorMessageAlternative12 = &alternativeCertificateErrorMessageAlternative12
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeCertificateErrorMessageAlternative13 CertificateErrorMessageAlternative13
	if err := dec.Decode(&alternativeCertificateErrorMessageAlternative13); err == nil {
		//subtype: *generator.StringEnumType
		if vErr := alternativeCertificateErrorMessageAlternative13.Validate(); vErr == nil {
			a.AlternativeCertificateErrorMessageAlternative13 = &alternativeCertificateErrorMessageAlternative13
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeCertificateErrorMessageAlternative14 CertificateErrorMessageAlternative14
	if err := dec.Decode(&alternativeCertificateErrorMessageAlternative14); err == nil {
		//subtype: *generator.StringEnumType
		if vErr := alternativeCertificateErrorMessageAlternative14.Validate(); vErr == nil {
			a.AlternativeCertificateErrorMessageAlternative14 = &alternativeCertificateErrorMessageAlternative14
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeCertificateErrorMessageAlternative15 CertificateErrorMessageAlternative15
	if err := dec.Decode(&alternativeCertificateErrorMessageAlternative15); err == nil {
		//subtype: *generator.StringEnumType
		if vErr := alternativeCertificateErrorMessageAlternative15.Validate(); vErr == nil {
			a.AlternativeCertificateErrorMessageAlternative15 = &alternativeCertificateErrorMessageAlternative15
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeCertificateErrorMessageAlternative16 CertificateErrorMessageAlternative16
	if err := dec.Decode(&alternativeCertificateErrorMessageAlternative16); err == nil {
		//subtype: *generator.StringEnumType
		if vErr := alternativeCertificateErrorMessageAlternative16.Validate(); vErr == nil {
			a.AlternativeCertificateErrorMessageAlternative16 = &alternativeCertificateErrorMessageAlternative16
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeCertificateErrorMessageAlternative17 CertificateErrorMessageAlternative17
	if err := dec.Decode(&alternativeCertificateErrorMessageAlternative17); err == nil {
		//subtype: *generator.StringEnumType
		if vErr := alternativeCertificateErrorMessageAlternative17.Validate(); vErr == nil {
			a.AlternativeCertificateErrorMessageAlternative17 = &alternativeCertificateErrorMessageAlternative17
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeCertificateErrorMessageAlternative18 CertificateErrorMessageAlternative18
	if err := dec.Decode(&alternativeCertificateErrorMessageAlternative18); err == nil {
		//subtype: *generator.StringEnumType
		if vErr := alternativeCertificateErrorMessageAlternative18.Validate(); vErr == nil {
			a.AlternativeCertificateErrorMessageAlternative18 = &alternativeCertificateErrorMessageAlternative18
			decodedAtLeastOnce = true
		}
	}

	if !decodedAtLeastOnce {
		return fmt.Errorf("could not unmarshal into any alternative for type %T", a)
	}
	return nil
}

func (a *CertificateErrorMessage) Validate() error {
	if a.AlternativeCertificateErrorMessageAlternative1 != nil {
		return a.AlternativeCertificateErrorMessageAlternative1.Validate()
	}
	if a.AlternativeCertificateErrorMessageAlternative2 != nil {
		return a.AlternativeCertificateErrorMessageAlternative2.Validate()
	}
	if a.AlternativeCertificateErrorMessageAlternative3 != nil {
		return a.AlternativeCertificateErrorMessageAlternative3.Validate()
	}
	if a.AlternativeCertificateErrorMessageAlternative4 != nil {
		return a.AlternativeCertificateErrorMessageAlternative4.Validate()
	}
	if a.AlternativeCertificateErrorMessageAlternative5 != nil {
		return a.AlternativeCertificateErrorMessageAlternative5.Validate()
	}
	if a.AlternativeCertificateErrorMessageAlternative6 != nil {
		return a.AlternativeCertificateErrorMessageAlternative6.Validate()
	}
	if a.AlternativeCertificateErrorMessageAlternative7 != nil {
		return a.AlternativeCertificateErrorMessageAlternative7.Validate()
	}
	if a.AlternativeCertificateErrorMessageAlternative8 != nil {
		return a.AlternativeCertificateErrorMessageAlternative8.Validate()
	}
	if a.AlternativeCertificateErrorMessageAlternative9 != nil {
		return a.AlternativeCertificateErrorMessageAlternative9.Validate()
	}
	if a.AlternativeCertificateErrorMessageAlternative10 != nil {
		return a.AlternativeCertificateErrorMessageAlternative10.Validate()
	}
	if a.AlternativeCertificateErrorMessageAlternative11 != nil {
		return a.AlternativeCertificateErrorMessageAlternative11.Validate()
	}
	if a.AlternativeCertificateErrorMessageAlternative12 != nil {
		return a.AlternativeCertificateErrorMessageAlternative12.Validate()
	}
	if a.AlternativeCertificateErrorMessageAlternative13 != nil {
		return a.AlternativeCertificateErrorMessageAlternative13.Validate()
	}
	if a.AlternativeCertificateErrorMessageAlternative14 != nil {
		return a.AlternativeCertificateErrorMessageAlternative14.Validate()
	}
	if a.AlternativeCertificateErrorMessageAlternative15 != nil {
		return a.AlternativeCertificateErrorMessageAlternative15.Validate()
	}
	if a.AlternativeCertificateErrorMessageAlternative16 != nil {
		return a.AlternativeCertificateErrorMessageAlternative16.Validate()
	}
	if a.AlternativeCertificateErrorMessageAlternative17 != nil {
		return a.AlternativeCertificateErrorMessageAlternative17.Validate()
	}
	if a.AlternativeCertificateErrorMessageAlternative18 != nil {
		return a.AlternativeCertificateErrorMessageAlternative18.Validate()
	}
	return errors.New("no alternative set")
}
