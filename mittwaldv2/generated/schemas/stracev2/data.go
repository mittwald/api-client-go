package stracev2

import (
	"errors"
	"fmt"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// This data type was generated from the following JSON schema:
// type: "object"
// properties:
//    "actualUrl":
//        type: "string"
//        example: "https://www.mittwald.de/~b"
//    "dbQueries":
//        type: "array"
//        items:
//            type: "object"
//            properties:
//                "query":
//                    type: "string"
//                    description: "The whole DB query."
//                    example: "SELECT * FROM my_table;"
//                "stats": {"$ref": "#/components/schemas/de.mittwald.v1.strace.Statistics"}
//                "warnLevel":
//                    type: "string"
//                    enum:
//                        - "NO"
//                        - "WARN"
//                        - "SEVERE"
//                    description: "Alerts when the time, syscall count or occurrence count of this group are abnormal."
//            required:
//                - "query"
//                - "stats"
//                - "warnLevel"
//    "dbStats": {"$ref": "#/components/schemas/de.mittwald.v1.strace.Statistics"}
//    "fileOps":
//        type: "array"
//        items:
//            type: "object"
//            properties:
//                "filename":
//                    type: "string"
//                    example: "my_file.php"
//                "filepath":
//                    type: "string"
//                    example: "/html/my-project"
//                "stats": {"$ref": "#/components/schemas/de.mittwald.v1.strace.Statistics"}
//                "warnLevel":
//                    type: "string"
//                    enum:
//                        - "NO"
//                        - "WARN"
//                        - "SEVERE"
//                    description: "Alerts when the time, syscall count or occurrence count of this group are abnormal."
//            required:
//                - "stats"
//                - "warnLevel"
//    "fileOpsStats": {"$ref": "#/components/schemas/de.mittwald.v1.strace.Statistics"}
//    "miscStats": {"$ref": "#/components/schemas/de.mittwald.v1.strace.Statistics"}
//    "networkingOps":
//        type: "array"
//        items:
//            type: "object"
//            properties:
//                "connectionType":
//                    type: "string"
//                    enum:
//                        - "UNKNOWN"
//                        - "PRIVATE"
//                        - "EXTERNAL"
//                "description":
//                    type: "string"
//                    description: "A short description of the network connection to provide additional context."
//                "ip":
//                    type: "string"
//                    description: "IP address to which a connection was established."
//                "port":
//                    type: "integer"
//                    description: "Port to which a connection was established."
//                "stats": {"$ref": "#/components/schemas/de.mittwald.v1.strace.Statistics"}
//                "warnLevel":
//                    type: "string"
//                    enum:
//                        - "NO"
//                        - "WARN"
//                        - "SEVERE"
//                    description: "Alerts when the time, syscall count or occurrence count of this group are abnormal."
//            required:
//                - "ip"
//                - "port"
//                - "description"
//                - "connectionType"
//                - "stats"
//                - "warnLevel"
//    "networkingStats": {"$ref": "#/components/schemas/de.mittwald.v1.strace.Statistics"}
//    "slowdownFactor":
//        type: "number"
//        description: "Shows how much slower the websites TTFB was when it got traced (1.0 = 100% = same TTFB)."
//        example: 1.5
//    "ttfbMs":
//        type: "integer"
//        description: "Time to first byte in milliseconds while tracing the website."
//        example: 1532
// required:
//    - "actualUrl"
//    - "ttfbMs"
//    - "slowdownFactor"
//    - "fileOpsStats"
//    - "networkingStats"
//    - "dbStats"
//    - "miscStats"
//    - "fileOps"
//    - "networkingOps"
//    - "dbQueries"

type Data struct {
	ActualUrl       string                  `json:"actualUrl"`
	DbQueries       []DataDbQueriesItem     `json:"dbQueries"`
	DbStats         Statistics              `json:"dbStats"`
	FileOps         []DataFileOpsItem       `json:"fileOps"`
	FileOpsStats    Statistics              `json:"fileOpsStats"`
	MiscStats       Statistics              `json:"miscStats"`
	NetworkingOps   []DataNetworkingOpsItem `json:"networkingOps"`
	NetworkingStats Statistics              `json:"networkingStats"`
	SlowdownFactor  float64                 `json:"slowdownFactor"`
	TtfbMs          int64                   `json:"ttfbMs"`
}

func (o *Data) Validate() error {
	if o.DbQueries == nil {
		return errors.New("property dbQueries is required, but not set")
	}
	if err := func() error {
		for i := range o.DbQueries {
			if err := o.DbQueries[i].Validate(); err != nil {
				return fmt.Errorf("item %d is invalid %w", i, err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("invalid property dbQueries: %w", err)
	}
	if err := o.DbStats.Validate(); err != nil {
		return fmt.Errorf("invalid property dbStats: %w", err)
	}
	if o.FileOps == nil {
		return errors.New("property fileOps is required, but not set")
	}
	if err := func() error {
		for i := range o.FileOps {
			if err := o.FileOps[i].Validate(); err != nil {
				return fmt.Errorf("item %d is invalid %w", i, err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("invalid property fileOps: %w", err)
	}
	if err := o.FileOpsStats.Validate(); err != nil {
		return fmt.Errorf("invalid property fileOpsStats: %w", err)
	}
	if err := o.MiscStats.Validate(); err != nil {
		return fmt.Errorf("invalid property miscStats: %w", err)
	}
	if o.NetworkingOps == nil {
		return errors.New("property networkingOps is required, but not set")
	}
	if err := func() error {
		for i := range o.NetworkingOps {
			if err := o.NetworkingOps[i].Validate(); err != nil {
				return fmt.Errorf("item %d is invalid %w", i, err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("invalid property networkingOps: %w", err)
	}
	if err := o.NetworkingStats.Validate(); err != nil {
		return fmt.Errorf("invalid property networkingStats: %w", err)
	}
	return nil
}
