package mailmigrationv2

import (
	"errors"
	"fmt"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// This data type was generated from the following JSON schema:
// type: "object"
// properties:
//    "aborted":
//        type: "boolean"
//    "addresses":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.mailmigration.MigrationMailAddress"}
//    "finalizers": {"$ref": "#/components/schemas/de.mittwald.v1.mailmigration.MigrationFinalizeJob"}
//    "finished":
//        type: "boolean"
//    "id":
//        type: "string"
//        format: "uuid"
//    "mailboxes":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.mailmigration.MigrationMailbox"}
//    "sourceCoabProjectId":
//        type: "string"
//    "targetNexusProjectId":
//        type: "string"
// required:
//    - "id"
//    - "targetNexusProjectId"
//    - "sourceCoabProjectId"
//    - "addresses"
//    - "mailboxes"
//    - "finalizers"
//    - "finished"
//    - "aborted"

type Migration struct {
	Aborted              bool                   `json:"aborted"`
	Addresses            []MigrationMailAddress `json:"addresses"`
	Finalizers           MigrationFinalizeJob   `json:"finalizers"`
	Finished             bool                   `json:"finished"`
	Id                   string                 `json:"id"`
	Mailboxes            []MigrationMailbox     `json:"mailboxes"`
	SourceCoabProjectId  string                 `json:"sourceCoabProjectId"`
	TargetNexusProjectId string                 `json:"targetNexusProjectId"`
}

func (o *Migration) Validate() error {
	if o.Addresses == nil {
		return errors.New("property addresses is required, but not set")
	}
	if err := func() error {
		for i := range o.Addresses {
			if err := o.Addresses[i].Validate(); err != nil {
				return fmt.Errorf("item %d is invalid %w", i, err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("invalid property addresses: %w", err)
	}
	if err := o.Finalizers.Validate(); err != nil {
		return fmt.Errorf("invalid property finalizers: %w", err)
	}
	if o.Mailboxes == nil {
		return errors.New("property mailboxes is required, but not set")
	}
	if err := func() error {
		for i := range o.Mailboxes {
			if err := o.Mailboxes[i].Validate(); err != nil {
				return fmt.Errorf("item %d is invalid %w", i, err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("invalid property mailboxes: %w", err)
	}
	return nil
}
