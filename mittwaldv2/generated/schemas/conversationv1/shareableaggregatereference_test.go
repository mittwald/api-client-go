package conversationv1_test

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

import (
	"encoding/json"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/conversationv1"
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

var _ = Describe("ShareableAggregateReference", func() {
	When("unmarshaling from JSON", func() {
		It("should unmarshal into AlternativeShareableAggregateReferenceAlternative1", func() {
			exampleJSON := []byte("{\"aggregate\":\"user\",\"domain\":\"user\",\"id\":\"string\"}")

			sut := conversationv1.ShareableAggregateReference{}
			Expect(json.Unmarshal(exampleJSON, &sut)).To(Succeed())
			Expect(sut.Validate()).To(Succeed())
			Expect(sut.AlternativeShareableAggregateReferenceAlternative1).NotTo(BeNil())
		})
		It("should unmarshal into AlternativeShareableAggregateReferenceAlternative2", func() {
			exampleJSON := []byte("{\"aggregate\":\"customer\",\"domain\":\"customer\",\"id\":\"string\"}")

			sut := conversationv1.ShareableAggregateReference{}
			Expect(json.Unmarshal(exampleJSON, &sut)).To(Succeed())
			Expect(sut.Validate()).To(Succeed())
			Expect(sut.AlternativeShareableAggregateReferenceAlternative2).NotTo(BeNil())
		})
		It("should unmarshal into AlternativeShareableAggregateReferenceAlternative3", func() {
			exampleJSON := []byte("{\"aggregate\":\"project\",\"domain\":\"project\",\"id\":\"string\"}")

			sut := conversationv1.ShareableAggregateReference{}
			Expect(json.Unmarshal(exampleJSON, &sut)).To(Succeed())
			Expect(sut.Validate()).To(Succeed())
			Expect(sut.AlternativeShareableAggregateReferenceAlternative3).NotTo(BeNil())
		})
		It("should unmarshal into AlternativeShareableAggregateReferenceAlternative4", func() {
			exampleJSON := []byte("{\"aggregate\":\"placementgroup\",\"domain\":\"project\",\"id\":\"string\"}")

			sut := conversationv1.ShareableAggregateReference{}
			Expect(json.Unmarshal(exampleJSON, &sut)).To(Succeed())
			Expect(sut.Validate()).To(Succeed())
			Expect(sut.AlternativeShareableAggregateReferenceAlternative4).NotTo(BeNil())
		})
	})
})
