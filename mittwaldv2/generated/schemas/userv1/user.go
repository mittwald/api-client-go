package userv1

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

import (
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/commonsv1"
)

//This data type was generated from the following JSON schema:
//type: "object"
//properties:
//    "avatarRef":
//        type: "string"
//        format: "uuid"
//    "customerMemberships":
//        type: "object"
//        additionalProperties: {"$ref": "#/components/schemas/de.mittwald.v1.user.CustomerMembership"}
//    "email":
//        type: "string"
//        format: "email"
//    "employeeInformation":
//        type: "object"
//        properties:
//            "department":
//                type: "string"
//                example: "Kundenservice"
//        required:
//            - "department"
//        description: "Additional information about mittwald employees."
//    "isEmployee":
//        type: "boolean"
//        description: "Truth value, whether the user is a mittwald employee"
//    "mfa":
//        type: "object"
//        properties:
//            "active":
//                type: "boolean"
//                default: false
//            "setup":
//                type: "boolean"
//                default: false
//        required:
//            - "active"
//            - "setup"
//    "passwordUpdatedAt":
//        type: "string"
//        format: "date-time"
//    "person": {"$ref": "#/components/schemas/de.mittwald.v1.commons.Person"}
//    "phoneNumber":
//        type: "string"
//        example: "+491701234567"
//    "projectMemberships":
//        type: "object"
//        additionalProperties: {"$ref": "#/components/schemas/de.mittwald.v1.user.ProjectMembership"}
//    "registeredAt":
//        type: "string"
//        format: "date-time"
//    "userId":
//        type: "string"
//        format: "uuid"
//required:
//    - "userId"
//    - "person"

type User struct {
	AvatarRef           *uuid.UUID                    `json:"avatarRef,omitempty"`
	CustomerMemberships map[string]CustomerMembership `json:"customerMemberships,omitempty"`
	Email               *string                       `json:"email,omitempty"`
	EmployeeInformation *UserEmployeeInformation      `json:"employeeInformation,omitempty"`
	IsEmployee          *bool                         `json:"isEmployee,omitempty"`
	Mfa                 *UserMFA                      `json:"mfa,omitempty"`
	PasswordUpdatedAt   *time.Time                    `json:"passwordUpdatedAt,omitempty"`
	Person              commonsv1.Person              `json:"person"`
	PhoneNumber         *string                       `json:"phoneNumber,omitempty"`
	ProjectMemberships  map[string]ProjectMembership  `json:"projectMemberships,omitempty"`
	RegisteredAt        *time.Time                    `json:"registeredAt,omitempty"`
	UserId              uuid.UUID                     `json:"userId"`
}

func (o *User) Validate() error {
	if err := func() error {
		if o.EmployeeInformation == nil {
			return nil
		}
		return o.EmployeeInformation.Validate()
	}(); err != nil {
		return fmt.Errorf("invalid property employeeInformation: %w", err)
	}
	if err := func() error {
		if o.Mfa == nil {
			return nil
		}
		return o.Mfa.Validate()
	}(); err != nil {
		return fmt.Errorf("invalid property mfa: %w", err)
	}
	if err := o.Person.Validate(); err != nil {
		return fmt.Errorf("invalid property person: %w", err)
	}
	return nil
}
