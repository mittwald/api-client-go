package sslv1_test

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

import (
	"encoding/json"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/sslv1"
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

var _ = Describe("CertificateRequest", func() {
	When("unmarshaling from JSON", func() {
		It("should unmarshal", func() {
			exampleJSON := []byte("{\"certificateData\":{\"caBundle\":\"string\",\"certificate\":\"string\",\"signingRequest\":\"string\"},\"certificateType\":42,\"commonName\":\"string\",\"contact\":{\"city\":\"string\",\"company\":\"string\",\"country\":\"DE\",\"organizationalUnit\":\"string\",\"state\":\"string\"},\"createdAt\":\"string\",\"dnsNames\":[\"string\"],\"id\":\"7a9d8971-09b0-4c39-8c64-546b6e1875ce\",\"isCompleted\":true,\"issuer\":\"string\",\"projectId\":\"7a9d8971-09b0-4c39-8c64-546b6e1875ce\",\"validFrom\":\"string\",\"validTo\":\"string\"}")

			sut := sslv1.CertificateRequest{}
			Expect(json.Unmarshal(exampleJSON, &sut)).To(Succeed())
			Expect(sut.Validate()).To(Succeed())
		})
	})
})
