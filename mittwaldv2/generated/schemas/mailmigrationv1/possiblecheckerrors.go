package mailmigrationv1

import (
	"errors"
	"fmt"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

//This data type was generated from the following JSON schema:
// type: "object"
// properties:
//    "alreadyExistingMailAddress":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.mailmigration.CheckMigrationIsPossibleErrorAlreadyExistingMailAddress"}
//    "ambiguousMailAddressDelivery":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.mailmigration.CheckMigrationIsPossibleErrorAmbiguousMailAddressDelivery"}
//    "ambiguousMailboxDelivery":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.mailmigration.CheckMigrationIsPossibleErrorAmbiguousMailboxDelivery"}
//    "catchAllMissingAddress":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.mailmigration.CheckMigrationIsPossibleErrorCatchAllMissingAddress"}
//    "catchAllTargetWithoutAlias":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.mailmigration.CheckMigrationIsPossibleErrorCatchAllTargetWithoutAlias"}
//    "missingVerifiedIngress":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.mailmigration.CheckMigrationIsPossibleErrorMissingVerifiedIngress"}
// required:
//    - "ambiguousMailAddressDelivery"
//    - "ambiguousMailboxDelivery"
//    - "catchAllMissingAddress"
//    - "catchAllTargetWithoutAlias"
//    - "missingVerifiedIngress"
//    - "alreadyExistingMailAddress"

type PossibleCheckErrors struct {
	AlreadyExistingMailAddress   []CheckMigrationIsPossibleErrorAlreadyExistingMailAddress   `json:"alreadyExistingMailAddress"`
	AmbiguousMailAddressDelivery []CheckMigrationIsPossibleErrorAmbiguousMailAddressDelivery `json:"ambiguousMailAddressDelivery"`
	AmbiguousMailboxDelivery     []CheckMigrationIsPossibleErrorAmbiguousMailboxDelivery     `json:"ambiguousMailboxDelivery"`
	CatchAllMissingAddress       []CheckMigrationIsPossibleErrorCatchAllMissingAddress       `json:"catchAllMissingAddress"`
	CatchAllTargetWithoutAlias   []CheckMigrationIsPossibleErrorCatchAllTargetWithoutAlias   `json:"catchAllTargetWithoutAlias"`
	MissingVerifiedIngress       []CheckMigrationIsPossibleErrorMissingVerifiedIngress       `json:"missingVerifiedIngress"`
}

func (o *PossibleCheckErrors) Validate() error {
	if o.AlreadyExistingMailAddress == nil {
		return errors.New("property alreadyExistingMailAddress is required, but not set")
	}
	if err := func() error {
		for i := range o.AlreadyExistingMailAddress {
			if err := o.AlreadyExistingMailAddress[i].Validate(); err != nil {
				return fmt.Errorf("item %d is invalid %w", i, err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("invalid property alreadyExistingMailAddress: %w", err)
	}
	if o.AmbiguousMailAddressDelivery == nil {
		return errors.New("property ambiguousMailAddressDelivery is required, but not set")
	}
	if err := func() error {
		for i := range o.AmbiguousMailAddressDelivery {
			if err := o.AmbiguousMailAddressDelivery[i].Validate(); err != nil {
				return fmt.Errorf("item %d is invalid %w", i, err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("invalid property ambiguousMailAddressDelivery: %w", err)
	}
	if o.AmbiguousMailboxDelivery == nil {
		return errors.New("property ambiguousMailboxDelivery is required, but not set")
	}
	if err := func() error {
		for i := range o.AmbiguousMailboxDelivery {
			if err := o.AmbiguousMailboxDelivery[i].Validate(); err != nil {
				return fmt.Errorf("item %d is invalid %w", i, err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("invalid property ambiguousMailboxDelivery: %w", err)
	}
	if o.CatchAllMissingAddress == nil {
		return errors.New("property catchAllMissingAddress is required, but not set")
	}
	if err := func() error {
		for i := range o.CatchAllMissingAddress {
			if err := o.CatchAllMissingAddress[i].Validate(); err != nil {
				return fmt.Errorf("item %d is invalid %w", i, err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("invalid property catchAllMissingAddress: %w", err)
	}
	if o.CatchAllTargetWithoutAlias == nil {
		return errors.New("property catchAllTargetWithoutAlias is required, but not set")
	}
	if err := func() error {
		for i := range o.CatchAllTargetWithoutAlias {
			if err := o.CatchAllTargetWithoutAlias[i].Validate(); err != nil {
				return fmt.Errorf("item %d is invalid %w", i, err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("invalid property catchAllTargetWithoutAlias: %w", err)
	}
	if o.MissingVerifiedIngress == nil {
		return errors.New("property missingVerifiedIngress is required, but not set")
	}
	if err := func() error {
		for i := range o.MissingVerifiedIngress {
			if err := o.MissingVerifiedIngress[i].Validate(); err != nil {
				return fmt.Errorf("item %d is invalid %w", i, err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("invalid property missingVerifiedIngress: %w", err)
	}
	return nil
}
