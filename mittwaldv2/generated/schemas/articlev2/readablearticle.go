package articlev2

import "fmt"

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

//This data type was generated from the following JSON schema:
// type: "object"
// properties:
//    "addons":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.article.ArticleAddons"}
//    "articleId":
//        type: "string"
//        minLength: 3
//        example: "PS23-BASIC-0001"
//    "attributes":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.article.ArticleAttributes"}
//    "balanceAddonKey":
//        type: "string"
//        example: "inclusive_domains"
//    "contractDurationInMonth":
//        type: "number"
//        maximum: 42
//        minimum: 0
//        example: 0
//    "description":
//        type: "string"
//        example: "proSpace without dedicated resources"
//    "forcedInvoicingPeriodInMonth":
//        type: "number"
//        minimum: 0
//        example: 0
//    "hasIndependentContractPeriod":
//        type: "boolean"
//    "hideOnInvoice":
//        type: "boolean"
//    "machineType":
//        type: "object"
//        properties:
//            "cpu":
//                type: "string"
//                example: 1
//            "memory":
//                type: "string"
//                example: 10
//            "name":
//                type: "string"
//                example: "psplus-shared"
//        required:
//            - "name"
//            - "cpu"
//            - "memory"
//    "modifierArticles":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.article.ReadableModifierArticleOptions"}
//    "name":
//        type: "string"
//        minLength: 3
//        example: "proSpace lite"
//    "orderable":
//        type: "string"
//        enum:
//            - "forbidden"
//            - "internal"
//            - "beta_testing"
//            - "full"
//            - "deprecated"
//    "possibleArticleChanges":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.article.ReadableChangeArticleOptions"}
//    "price":
//        type: "number"
//        example: 1000
//    "tags":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.article.ArticleTag"}
//    "template": {"$ref": "#/components/schemas/de.mittwald.v1.article.ArticleTemplate"}
// required:
//    - "articleId"
//    - "name"
//    - "contractDurationInMonth"
//    - "orderable"
//    - "template"

type ReadableArticle struct {
	Addons                       []ArticleAddons                  `json:"addons,omitempty"`
	ArticleId                    string                           `json:"articleId"`
	Attributes                   []ArticleAttributes              `json:"attributes,omitempty"`
	BalanceAddonKey              *string                          `json:"balanceAddonKey,omitempty"`
	ContractDurationInMonth      float64                          `json:"contractDurationInMonth"`
	Description                  *string                          `json:"description,omitempty"`
	ForcedInvoicingPeriodInMonth *float64                         `json:"forcedInvoicingPeriodInMonth,omitempty"`
	HasIndependentContractPeriod *bool                            `json:"hasIndependentContractPeriod,omitempty"`
	HideOnInvoice                *bool                            `json:"hideOnInvoice,omitempty"`
	MachineType                  *ReadableArticleMachineType      `json:"machineType,omitempty"`
	ModifierArticles             []ReadableModifierArticleOptions `json:"modifierArticles,omitempty"`
	Name                         string                           `json:"name"`
	Orderable                    ReadableArticleOrderable         `json:"orderable"`
	PossibleArticleChanges       []ReadableChangeArticleOptions   `json:"possibleArticleChanges,omitempty"`
	Price                        *float64                         `json:"price,omitempty"`
	Tags                         []ArticleTag                     `json:"tags,omitempty"`
	Template                     ArticleTemplate                  `json:"template"`
}

func (o *ReadableArticle) Validate() error {
	if err := func() error {
		if o.Addons == nil {
			return nil
		}
		return func() error {
			for i := range o.Addons {
				if err := o.Addons[i].Validate(); err != nil {
					return fmt.Errorf("item %d is invalid %w", i, err)
				}
			}
			return nil
		}()
	}(); err != nil {
		return fmt.Errorf("invalid property addons: %w", err)
	}
	if err := func() error {
		if o.Attributes == nil {
			return nil
		}
		return func() error {
			for i := range o.Attributes {
				if err := o.Attributes[i].Validate(); err != nil {
					return fmt.Errorf("item %d is invalid %w", i, err)
				}
			}
			return nil
		}()
	}(); err != nil {
		return fmt.Errorf("invalid property attributes: %w", err)
	}
	if err := func() error {
		if o.MachineType == nil {
			return nil
		}
		return o.MachineType.Validate()
	}(); err != nil {
		return fmt.Errorf("invalid property machineType: %w", err)
	}
	if err := func() error {
		if o.ModifierArticles == nil {
			return nil
		}
		return func() error {
			for i := range o.ModifierArticles {
				if err := o.ModifierArticles[i].Validate(); err != nil {
					return fmt.Errorf("item %d is invalid %w", i, err)
				}
			}
			return nil
		}()
	}(); err != nil {
		return fmt.Errorf("invalid property modifierArticles: %w", err)
	}
	if err := o.Orderable.Validate(); err != nil {
		return fmt.Errorf("invalid property orderable: %w", err)
	}
	if err := func() error {
		if o.PossibleArticleChanges == nil {
			return nil
		}
		return func() error {
			for i := range o.PossibleArticleChanges {
				if err := o.PossibleArticleChanges[i].Validate(); err != nil {
					return fmt.Errorf("item %d is invalid %w", i, err)
				}
			}
			return nil
		}()
	}(); err != nil {
		return fmt.Errorf("invalid property possibleArticleChanges: %w", err)
	}
	if err := func() error {
		if o.Tags == nil {
			return nil
		}
		return func() error {
			for i := range o.Tags {
				if err := o.Tags[i].Validate(); err != nil {
					return fmt.Errorf("item %d is invalid %w", i, err)
				}
			}
			return nil
		}()
	}(); err != nil {
		return fmt.Errorf("invalid property tags: %w", err)
	}
	if err := o.Template.Validate(); err != nil {
		return fmt.Errorf("invalid property template: %w", err)
	}
	return nil
}
