package marketplacev2

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// This data type was generated from the following JSON schema:
// oneOf:
//    - type: "object"
//      properties:
//        "text":
//            type: "string"
//            minLength: 1
//      required:
//        - "text"
//    - type: "object"
//      properties:
//        "url":
//            type: "string"
//            minLength: 1
//            format: "uri"
//      required:
//        - "url"

type ContributorImprint struct {
	AlternativeContributorImprintAlternative1 *ContributorImprintAlternative1
	AlternativeContributorImprintAlternative2 *ContributorImprintAlternative2
}

func (a *ContributorImprint) MarshalJSON() ([]byte, error) {
	if a.AlternativeContributorImprintAlternative1 != nil {
		return json.Marshal(a.AlternativeContributorImprintAlternative1)
	}
	if a.AlternativeContributorImprintAlternative2 != nil {
		return json.Marshal(a.AlternativeContributorImprintAlternative2)
	}
	return []byte("null"), nil
}

func (a *ContributorImprint) UnmarshalJSON(input []byte) error {
	reader := bytes.NewReader(input)
	decodedAtLeastOnce := false
	dec := json.NewDecoder(reader)
	dec.DisallowUnknownFields()

	reader.Reset(input)
	var alternativeContributorImprintAlternative1 ContributorImprintAlternative1
	if err := dec.Decode(&alternativeContributorImprintAlternative1); err == nil {
		//subtype: *generator.ObjectType
		if vErr := alternativeContributorImprintAlternative1.Validate(); vErr == nil {
			a.AlternativeContributorImprintAlternative1 = &alternativeContributorImprintAlternative1
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeContributorImprintAlternative2 ContributorImprintAlternative2
	if err := dec.Decode(&alternativeContributorImprintAlternative2); err == nil {
		//subtype: *generator.ObjectType
		if vErr := alternativeContributorImprintAlternative2.Validate(); vErr == nil {
			a.AlternativeContributorImprintAlternative2 = &alternativeContributorImprintAlternative2
			decodedAtLeastOnce = true
		}
	}

	if !decodedAtLeastOnce {
		return fmt.Errorf("could not unmarshal into any alternative for type %T", a)
	}
	return nil
}

func (a *ContributorImprint) Validate() error {
	if a.AlternativeContributorImprintAlternative1 != nil {
		return a.AlternativeContributorImprintAlternative1.Validate()
	}
	if a.AlternativeContributorImprintAlternative2 != nil {
		return a.AlternativeContributorImprintAlternative2.Validate()
	}
	return errors.New("no alternative set")
}
