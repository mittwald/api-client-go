package marketplacev2

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// This data type was generated from the following JSON schema:
// oneOf:
//    - {"$ref": "#/components/schemas/de.mittwald.v1.marketplace.MonthlyPricePlanStrategy"}

type ExtensionPricing struct {
	AlternativeMonthlyPricePlanStrategy MonthlyPricePlanStrategy
}

func (a *ExtensionPricing) MarshalJSON() ([]byte, error) {
	if a.AlternativeMonthlyPricePlanStrategy != nil {
		return json.Marshal(a.AlternativeMonthlyPricePlanStrategy)
	}
	return []byte("null"), nil
}

func (a *ExtensionPricing) UnmarshalJSON(input []byte) error {
	reader := bytes.NewReader(input)
	decodedAtLeastOnce := false
	dec := json.NewDecoder(reader)
	dec.DisallowUnknownFields()

	reader.Reset(input)
	var alternativeMonthlyPricePlanStrategy MonthlyPricePlanStrategy
	if err := dec.Decode(&alternativeMonthlyPricePlanStrategy); err == nil {
		//subtype: *generator.ReferenceType
		if vErr := func() error {
			for i := range alternativeMonthlyPricePlanStrategy {
				if err := alternativeMonthlyPricePlanStrategy[i].Validate(); err != nil {
					return fmt.Errorf("item %d is invalid %w", i, err)
				}
			}
			return nil
		}(); vErr == nil {
			a.AlternativeMonthlyPricePlanStrategy = alternativeMonthlyPricePlanStrategy
			decodedAtLeastOnce = true
		}
	}

	if !decodedAtLeastOnce {
		return fmt.Errorf("could not unmarshal into any alternative for type %T", a)
	}
	return nil
}

func (a *ExtensionPricing) Validate() error {
	if a.AlternativeMonthlyPricePlanStrategy != nil {
		return func() error {
			for i := range a.AlternativeMonthlyPricePlanStrategy {
				if err := a.AlternativeMonthlyPricePlanStrategy[i].Validate(); err != nil {
					return fmt.Errorf("item %d is invalid %w", i, err)
				}
			}
			return nil
		}()
	}
	return errors.New("no alternative set")
}
