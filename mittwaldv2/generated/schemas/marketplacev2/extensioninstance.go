package marketplacev2

import (
	"errors"
	"fmt"
	"time"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// This data type was generated from the following JSON schema:
// type: "object"
// properties:
//    "aggregateReference":
//        type: "object"
//        properties:
//            "aggregate":
//                type: "string"
//            "domain":
//                type: "string"
//            "id":
//                type: "string"
//                format: "uuid"
//        required:
//            - "id"
//            - "domain"
//            - "aggregate"
//    "chargeability": {"$ref": "#/components/schemas/de.mittwald.v1.marketplace.ExtensionInstanceChargeability"}
//    "consentedScopes":
//        type: "array"
//        items:
//            type: "string"
//    "contributorId":
//        type: "string"
//    "contributorName":
//        type: "string"
//    "createdAt":
//        type: "string"
//        format: "date-time"
//    "disabled":
//        type: "boolean"
//        default: false
//    "extensionId":
//        type: "string"
//        format: "uuid"
//    "extensionName":
//        type: "string"
//    "extensionSubTitle": {"$ref": "#/components/schemas/de.mittwald.v1.marketplace.SubTitle"}
//    "frontendFragments":
//        type: "object"
//        additionalProperties: {"$ref": "#/components/schemas/de.mittwald.v1.marketplace.FrontendFragment"}
//    "id":
//        type: "string"
//        format: "uuid"
//    "pendingInstallation":
//        type: "boolean"
//        default: false
//    "pendingRemoval":
//        type: "boolean"
//        default: false
// required:
//    - "id"
//    - "extensionId"
//    - "contributorId"
//    - "disabled"
//    - "pendingInstallation"
//    - "pendingRemoval"
//    - "consentedScopes"
//    - "aggregateReference"
//    - "extensionName"
//    - "contributorName"

type ExtensionInstance struct {
	AggregateReference  ExtensionInstanceAggregateReference `json:"aggregateReference"`
	Chargeability       *ExtensionInstanceChargeability     `json:"chargeability,omitempty"`
	ConsentedScopes     []string                            `json:"consentedScopes"`
	ContributorId       string                              `json:"contributorId"`
	ContributorName     string                              `json:"contributorName"`
	CreatedAt           *time.Time                          `json:"createdAt,omitempty"`
	Disabled            bool                                `json:"disabled"`
	ExtensionId         string                              `json:"extensionId"`
	ExtensionName       string                              `json:"extensionName"`
	ExtensionSubTitle   *SubTitle                           `json:"extensionSubTitle,omitempty"`
	FrontendFragments   map[string]any                      `json:"frontendFragments,omitempty"`
	Id                  string                              `json:"id"`
	PendingInstallation bool                                `json:"pendingInstallation"`
	PendingRemoval      bool                                `json:"pendingRemoval"`
}

func (o *ExtensionInstance) Validate() error {
	if err := o.AggregateReference.Validate(); err != nil {
		return fmt.Errorf("invalid property aggregateReference: %w", err)
	}
	if err := func() error {
		if o.Chargeability == nil {
			return nil
		}
		return o.Chargeability.Validate()
	}(); err != nil {
		return fmt.Errorf("invalid property chargeability: %w", err)
	}
	if o.ConsentedScopes == nil {
		return errors.New("property consentedScopes is required, but not set")
	}
	if err := func() error {
		if o.ExtensionSubTitle == nil {
			return nil
		}
		return o.ExtensionSubTitle.Validate()
	}(); err != nil {
		return fmt.Errorf("invalid property extensionSubTitle: %w", err)
	}
	return nil
}
