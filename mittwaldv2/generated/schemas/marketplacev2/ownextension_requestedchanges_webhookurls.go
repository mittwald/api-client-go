package marketplacev2

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// This data type was generated from the following JSON schema:
// oneOf:
//    - {"$ref": "#/components/schemas/de.mittwald.v1.marketplace.WebhookUrls"}
//    - type: "object"
//      additionalProperties: false

type OwnExtensionRequestedChangesWebhookURLs struct {
	AlternativeWebhookUrls                                         *WebhookUrls
	AlternativeOwnExtensionRequestedChangesWebhookURLsAlternative2 *OwnExtensionRequestedChangesWebhookURLsAlternative2
}

func (a *OwnExtensionRequestedChangesWebhookURLs) MarshalJSON() ([]byte, error) {
	if a.AlternativeWebhookUrls != nil {
		return json.Marshal(a.AlternativeWebhookUrls)
	}
	if a.AlternativeOwnExtensionRequestedChangesWebhookURLsAlternative2 != nil {
		return json.Marshal(a.AlternativeOwnExtensionRequestedChangesWebhookURLsAlternative2)
	}
	return []byte("null"), nil
}

func (a *OwnExtensionRequestedChangesWebhookURLs) UnmarshalJSON(input []byte) error {
	reader := bytes.NewReader(input)
	decodedAtLeastOnce := false
	dec := json.NewDecoder(reader)
	dec.DisallowUnknownFields()

	reader.Reset(input)
	var alternativeWebhookUrls WebhookUrls
	if err := dec.Decode(&alternativeWebhookUrls); err == nil {
		//subtype: *generator.ReferenceType
		if vErr := alternativeWebhookUrls.Validate(); vErr == nil {
			a.AlternativeWebhookUrls = &alternativeWebhookUrls
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeOwnExtensionRequestedChangesWebhookURLsAlternative2 OwnExtensionRequestedChangesWebhookURLsAlternative2
	if err := dec.Decode(&alternativeOwnExtensionRequestedChangesWebhookURLsAlternative2); err == nil {
		//subtype: *generator.ObjectType
		if vErr := alternativeOwnExtensionRequestedChangesWebhookURLsAlternative2.Validate(); vErr == nil {
			a.AlternativeOwnExtensionRequestedChangesWebhookURLsAlternative2 = &alternativeOwnExtensionRequestedChangesWebhookURLsAlternative2
			decodedAtLeastOnce = true
		}
	}

	if !decodedAtLeastOnce {
		return fmt.Errorf("could not unmarshal into any alternative for type %T", a)
	}
	return nil
}

func (a *OwnExtensionRequestedChangesWebhookURLs) Validate() error {
	if a.AlternativeWebhookUrls != nil {
		return a.AlternativeWebhookUrls.Validate()
	}
	if a.AlternativeOwnExtensionRequestedChangesWebhookURLsAlternative2 != nil {
		return a.AlternativeOwnExtensionRequestedChangesWebhookURLsAlternative2.Validate()
	}
	return errors.New("no alternative set")
}
