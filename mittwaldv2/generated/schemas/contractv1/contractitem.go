package contractv1

import (
	"errors"
	"fmt"
	"time"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

//This data type was generated from the following JSON schema:
// type: "object"
// properties:
//    "activationDate":
//        type: "string"
//        format: "date-time"
//    "aggregateReference": {"$ref": "#/components/schemas/de.mittwald.v1.contract.AggregateReference"}
//    "articles":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.contract.Article"}
//    "contractPeriod":
//        type: "number"
//        minimum: 0
//        example: 1
//    "description":
//        type: "string"
//        example: "Space-Server: \"Mein Space-Server\""
//    "freeTrialDays":
//        type: "number"
//        example: 10
//    "groupByProjectId":
//        type: "string"
//        format: "uuid"
//    "invoiceStop":
//        type: "string"
//        format: "date-time"
//        description: "If this attribute is set, the contract item will currently only be invoiced until this date."
//    "invoicingPeriod":
//        type: "number"
//        example: 1
//    "isActivated":
//        type: "boolean"
//    "isBaseItem":
//        type: "boolean"
//    "isInFreeTrial":
//        type: "boolean"
//    "isInclusive":
//        type: "boolean"
//    "itemId":
//        type: "string"
//        format: "uuid"
//    "nextPossibleDowngradeDate":
//        type: "string"
//        format: "date-time"
//        description: "If this attribute is not set, termination is not allowed."
//    "nextPossibleTerminationDate":
//        type: "string"
//        format: "date-time"
//        description: "If this attribute is not set, a tariff change is not allowed."
//    "nextPossibleUpgradeDate":
//        type: "string"
//        format: "date-time"
//        description: "If this attribute is not set, a tariff change is not allowed."
//    "orderDate":
//        type: "string"
//        format: "date-time"
//    "orderId":
//        type: "string"
//        format: "uuid"
//    "replacedByItem":
//        type: "string"
//        format: "uuid"
//    "tariffChange": {"$ref": "#/components/schemas/de.mittwald.v1.contract.TariffChange"}
//    "termination": {"$ref": "#/components/schemas/de.mittwald.v1.contract.Termination"}
//    "totalPrice": {"$ref": "#/components/schemas/de.mittwald.v1.contract.Price"}
// required:
//    - "itemId"
//    - "isActivated"
//    - "contractPeriod"
//    - "articles"
//    - "totalPrice"
//    - "description"
//    - "isBaseItem"

type ContractItem struct {
	ActivationDate              *time.Time          `json:"activationDate,omitempty"`
	AggregateReference          *AggregateReference `json:"aggregateReference,omitempty"`
	Articles                    []Article           `json:"articles"`
	ContractPeriod              float64             `json:"contractPeriod"`
	Description                 string              `json:"description"`
	FreeTrialDays               *float64            `json:"freeTrialDays,omitempty"`
	GroupByProjectId            *string             `json:"groupByProjectId,omitempty"`
	InvoiceStop                 *time.Time          `json:"invoiceStop,omitempty"`
	InvoicingPeriod             *float64            `json:"invoicingPeriod,omitempty"`
	IsActivated                 bool                `json:"isActivated"`
	IsBaseItem                  bool                `json:"isBaseItem"`
	IsInFreeTrial               *bool               `json:"isInFreeTrial,omitempty"`
	IsInclusive                 *bool               `json:"isInclusive,omitempty"`
	ItemId                      string              `json:"itemId"`
	NextPossibleDowngradeDate   *time.Time          `json:"nextPossibleDowngradeDate,omitempty"`
	NextPossibleTerminationDate *time.Time          `json:"nextPossibleTerminationDate,omitempty"`
	NextPossibleUpgradeDate     *time.Time          `json:"nextPossibleUpgradeDate,omitempty"`
	OrderDate                   *time.Time          `json:"orderDate,omitempty"`
	OrderId                     *string             `json:"orderId,omitempty"`
	ReplacedByItem              *string             `json:"replacedByItem,omitempty"`
	TariffChange                *TariffChange       `json:"tariffChange,omitempty"`
	Termination                 *Termination        `json:"termination,omitempty"`
	TotalPrice                  Price               `json:"totalPrice"`
}

func (o *ContractItem) Validate() error {
	if err := func() error {
		if o.AggregateReference == nil {
			return nil
		}
		return o.AggregateReference.Validate()
	}(); err != nil {
		return fmt.Errorf("invalid property aggregateReference: %w", err)
	}
	if o.Articles == nil {
		return errors.New("property articles is required, but not set")
	}
	if err := func() error {
		for i := range o.Articles {
			if err := o.Articles[i].Validate(); err != nil {
				return fmt.Errorf("item %d is invalid %w", i, err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("invalid property articles: %w", err)
	}
	if err := func() error {
		if o.TariffChange == nil {
			return nil
		}
		return o.TariffChange.Validate()
	}(); err != nil {
		return fmt.Errorf("invalid property tariffChange: %w", err)
	}
	if err := func() error {
		if o.Termination == nil {
			return nil
		}
		return o.Termination.Validate()
	}(); err != nil {
		return fmt.Errorf("invalid property termination: %w", err)
	}
	if err := o.TotalPrice.Validate(); err != nil {
		return fmt.Errorf("invalid property totalPrice: %w", err)
	}
	return nil
}
