package ingressv2

import (
	"errors"
	"fmt"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

//This data type was generated from the following JSON schema:
// type: "object"
// properties:
//    "dnsValidationErrors":
//        type: "array"
//        items:
//            type: "string"
//            enum:
//                - "ERROR_UNSPECIFIED"
//                - "ERROR_QUAD_A"
//                - "ERROR_NO_A_RECORD"
//                - "ERROR_ACME_CERTIFICATE_REQUEST_DEADLINE_EXCEEDED"
//        description: "A list of errors that occurred while validating the ingress's dns before requesting a certificate."
//    "hostname":
//        type: "string"
//        format: "idn-hostname"
//    "id":
//        type: "string"
//        format: "uuid"
//    "ips":
//        type: "object"
//        properties:
//            "v4":
//                type: "array"
//                items:
//                    type: "string"
//                    format: "ipv4"
//        required:
//            - "v4"
//    "isDefault":
//        type: "boolean"
//        description: "Whether this ingress is the default ingress or not. A default ingress is automatically created, it cannot be deleted. There can be only one default ingress per project."
//    "isDomain":
//        type: "boolean"
//    "isEnabled":
//        type: "boolean"
//    "ownership": {"$ref": "#/components/schemas/de.mittwald.v1.ingress.Ownership"}
//    "paths":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.ingress.Path"}
//        description: "A list of paths. The default path `/` is always present and cannot be removed."
//    "projectId":
//        type: "string"
//        format: "uuid"
//    "tls":
//        oneOf:
//            - {"$ref": "#/components/schemas/de.mittwald.v1.ingress.TlsAcmeDeprecated"}
//            - {"$ref": "#/components/schemas/de.mittwald.v1.ingress.TlsCertificate"}
// required:
//    - "id"
//    - "hostname"
//    - "projectId"
//    - "isDefault"
//    - "tls"
//    - "paths"
//    - "isEnabled"
//    - "ips"
//    - "dnsValidationErrors"
//    - "ownership"

type IngressDeprecated struct {
	DnsValidationErrors []IngressDeprecatedDNSValidationErrorsItem `json:"dnsValidationErrors"`
	Hostname            string                                     `json:"hostname"`
	Id                  string                                     `json:"id"`
	Ips                 IngressDeprecatedIps                       `json:"ips"`
	IsDefault           bool                                       `json:"isDefault"`
	IsDomain            *bool                                      `json:"isDomain,omitempty"`
	IsEnabled           bool                                       `json:"isEnabled"`
	Ownership           Ownership                                  `json:"ownership"`
	Paths               []Path                                     `json:"paths"`
	ProjectId           string                                     `json:"projectId"`
	Tls                 IngressDeprecatedTLS                       `json:"tls"`
}

func (o *IngressDeprecated) Validate() error {
	if o.DnsValidationErrors == nil {
		return errors.New("property dnsValidationErrors is required, but not set")
	}
	if err := func() error {
		for i := range o.DnsValidationErrors {
			if err := o.DnsValidationErrors[i].Validate(); err != nil {
				return fmt.Errorf("item %d is invalid %w", i, err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("invalid property dnsValidationErrors: %w", err)
	}
	if err := o.Ips.Validate(); err != nil {
		return fmt.Errorf("invalid property ips: %w", err)
	}
	if err := o.Ownership.Validate(); err != nil {
		return fmt.Errorf("invalid property ownership: %w", err)
	}
	if o.Paths == nil {
		return errors.New("property paths is required, but not set")
	}
	if err := func() error {
		for i := range o.Paths {
			if err := o.Paths[i].Validate(); err != nil {
				return fmt.Errorf("item %d is invalid %w", i, err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("invalid property paths: %w", err)
	}
	if err := o.Tls.Validate(); err != nil {
		return fmt.Errorf("invalid property tls: %w", err)
	}
	return nil
}
