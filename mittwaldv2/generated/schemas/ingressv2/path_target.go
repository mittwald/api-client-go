package ingressv2

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

//This data type was generated from the following JSON schema:
// oneOf:
//    - {"$ref": "#/components/schemas/de.mittwald.v1.ingress.TargetDirectory"}
//    - {"$ref": "#/components/schemas/de.mittwald.v1.ingress.TargetUrl"}
//    - {"$ref": "#/components/schemas/de.mittwald.v1.ingress.TargetInstallation"}
//    - {"$ref": "#/components/schemas/de.mittwald.v1.ingress.TargetUseDefaultPage"}
//    - {"$ref": "#/components/schemas/de.mittwald.v1.ingress.TargetContainer"}

type PathTarget struct {
	AlternativeTargetDirectory      *TargetDirectory
	AlternativeTargetUrl            *TargetUrl
	AlternativeTargetInstallation   *TargetInstallation
	AlternativeTargetUseDefaultPage *TargetUseDefaultPage
	AlternativeTargetContainer      *TargetContainer
}

func (a *PathTarget) MarshalJSON() ([]byte, error) {
	if a.AlternativeTargetDirectory != nil {
		return json.Marshal(a.AlternativeTargetDirectory)
	}
	if a.AlternativeTargetUrl != nil {
		return json.Marshal(a.AlternativeTargetUrl)
	}
	if a.AlternativeTargetInstallation != nil {
		return json.Marshal(a.AlternativeTargetInstallation)
	}
	if a.AlternativeTargetUseDefaultPage != nil {
		return json.Marshal(a.AlternativeTargetUseDefaultPage)
	}
	if a.AlternativeTargetContainer != nil {
		return json.Marshal(a.AlternativeTargetContainer)
	}
	return []byte("null"), nil
}

func (a *PathTarget) UnmarshalJSON(input []byte) error {
	reader := bytes.NewReader(input)
	decodedAtLeastOnce := false
	dec := json.NewDecoder(reader)
	dec.DisallowUnknownFields()

	reader.Reset(input)
	var alternativeTargetDirectory TargetDirectory
	if err := dec.Decode(&alternativeTargetDirectory); err == nil {
		//subtype: *generator.ReferenceType
		if vErr := alternativeTargetDirectory.Validate(); vErr == nil {
			a.AlternativeTargetDirectory = &alternativeTargetDirectory
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeTargetUrl TargetUrl
	if err := dec.Decode(&alternativeTargetUrl); err == nil {
		//subtype: *generator.ReferenceType
		if vErr := alternativeTargetUrl.Validate(); vErr == nil {
			a.AlternativeTargetUrl = &alternativeTargetUrl
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeTargetInstallation TargetInstallation
	if err := dec.Decode(&alternativeTargetInstallation); err == nil {
		//subtype: *generator.ReferenceType
		if vErr := alternativeTargetInstallation.Validate(); vErr == nil {
			a.AlternativeTargetInstallation = &alternativeTargetInstallation
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeTargetUseDefaultPage TargetUseDefaultPage
	if err := dec.Decode(&alternativeTargetUseDefaultPage); err == nil {
		//subtype: *generator.ReferenceType
		if vErr := alternativeTargetUseDefaultPage.Validate(); vErr == nil {
			a.AlternativeTargetUseDefaultPage = &alternativeTargetUseDefaultPage
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeTargetContainer TargetContainer
	if err := dec.Decode(&alternativeTargetContainer); err == nil {
		//subtype: *generator.ReferenceType
		if vErr := alternativeTargetContainer.Validate(); vErr == nil {
			a.AlternativeTargetContainer = &alternativeTargetContainer
			decodedAtLeastOnce = true
		}
	}

	if !decodedAtLeastOnce {
		return fmt.Errorf("could not unmarshal into any alternative for type %T", a)
	}
	return nil
}

func (a *PathTarget) Validate() error {
	if a.AlternativeTargetDirectory != nil {
		return a.AlternativeTargetDirectory.Validate()
	}
	if a.AlternativeTargetUrl != nil {
		return a.AlternativeTargetUrl.Validate()
	}
	if a.AlternativeTargetInstallation != nil {
		return a.AlternativeTargetInstallation.Validate()
	}
	if a.AlternativeTargetUseDefaultPage != nil {
		return a.AlternativeTargetUseDefaultPage.Validate()
	}
	if a.AlternativeTargetContainer != nil {
		return a.AlternativeTargetContainer.Validate()
	}
	return errors.New("no alternative set")
}
