package invoicev2

import (
	"errors"
	"fmt"
	"time"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// This data type was generated from the following JSON schema:
// type: "object"
// properties:
//    "amountPaid":
//        type: "number"
//        example: 500
//    "cancellation": {"$ref": "#/components/schemas/de.mittwald.v1.invoice.Cancellation"}
//    "cancellationOf":
//        type: "string"
//        format: "uuid"
//        description: "The ID of the Invoice that this invoice cancels."
//    "currency":
//        type: "string"
//        example: "EUR"
//    "customerId":
//        type: "string"
//        example: "e0a3b0e0-0e0e-0e0e-0e0e-0e0e0e0e0e0e"
//    "date":
//        type: "string"
//        format: "date-time"
//    "groups":
//        type: "array"
//        items:
//            type: "object"
//            properties:
//                "contractId":
//                    type: "string"
//                    format: "uuid"
//                "description":
//                    type: "string"
//                    example: "Space-Server: \"Mein Space-Server\""
//                "items":
//                    type: "array"
//                    items: {"$ref": "#/components/schemas/de.mittwald.v1.invoice.InvoiceItem"}
//            required:
//                - "items"
//    "id":
//        type: "string"
//        format: "uuid"
//    "invoiceNumber":
//        type: "string"
//        example: "RG1234567"
//    "invoiceType":
//        type: "string"
//        enum:
//            - "REGULAR"
//            - "REISSUE"
//            - "CORRECTION"
//            - "CANCELLATION"
//    "paymentSettings": {"$ref": "#/components/schemas/de.mittwald.v1.invoice.PaymentSettings"}
//    "pdfId":
//        type: "string"
//        format: "uuid"
//    "recipient": {"$ref": "#/components/schemas/de.mittwald.v1.invoice.Recipient"}
//    "reissuedBy":
//        type: "string"
//        format: "uuid"
//        description: "The ID of the Invoice that is a Reissue of this one."
//    "status":
//        type: "string"
//        enum:
//            - "NEW"
//            - "CONFIRMED"
//            - "DENIED"
//            - "PAID"
//            - "PARTIALLY_PAID"
//            - "OVERPAID"
//    "totalGross":
//        type: "number"
//        example: 595
//    "totalNet":
//        type: "number"
//        example: 500
//    "vatId":
//        type: "string"
//        example: "DE123456789"
// required:
//    - "id"
//    - "customerId"
//    - "invoiceNumber"
//    - "date"
//    - "pdfId"
//    - "groups"
//    - "status"
//    - "amountPaid"
//    - "recipient"
//    - "totalNet"
//    - "totalGross"
//    - "currency"
//    - "invoiceType"

type Invoice struct {
	AmountPaid      float64             `json:"amountPaid"`
	Cancellation    *Cancellation       `json:"cancellation,omitempty"`
	CancellationOf  *string             `json:"cancellationOf,omitempty"`
	Currency        string              `json:"currency"`
	CustomerId      string              `json:"customerId"`
	Date            time.Time           `json:"date"`
	Groups          []InvoiceGroupsItem `json:"groups"`
	Id              string              `json:"id"`
	InvoiceNumber   string              `json:"invoiceNumber"`
	InvoiceType     InvoiceInvoiceType  `json:"invoiceType"`
	PaymentSettings *PaymentSettings    `json:"paymentSettings,omitempty"`
	PdfId           string              `json:"pdfId"`
	Recipient       Recipient           `json:"recipient"`
	ReissuedBy      *string             `json:"reissuedBy,omitempty"`
	Status          InvoiceStatus       `json:"status"`
	TotalGross      float64             `json:"totalGross"`
	TotalNet        float64             `json:"totalNet"`
	VatId           *string             `json:"vatId,omitempty"`
}

func (o *Invoice) Validate() error {
	if err := func() error {
		if o.Cancellation == nil {
			return nil
		}
		return o.Cancellation.Validate()
	}(); err != nil {
		return fmt.Errorf("invalid property cancellation: %w", err)
	}
	if o.Groups == nil {
		return errors.New("property groups is required, but not set")
	}
	if err := func() error {
		for i := range o.Groups {
			if err := o.Groups[i].Validate(); err != nil {
				return fmt.Errorf("item %d is invalid %w", i, err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("invalid property groups: %w", err)
	}
	if err := o.InvoiceType.Validate(); err != nil {
		return fmt.Errorf("invalid property invoiceType: %w", err)
	}
	if err := func() error {
		if o.PaymentSettings == nil {
			return nil
		}
		return o.PaymentSettings.Validate()
	}(); err != nil {
		return fmt.Errorf("invalid property paymentSettings: %w", err)
	}
	if err := o.Recipient.Validate(); err != nil {
		return fmt.Errorf("invalid property recipient: %w", err)
	}
	if err := o.Status.Validate(); err != nil {
		return fmt.Errorf("invalid property status: %w", err)
	}
	return nil
}
