package dnsv1_test

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

import (
	"encoding/json"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/dnsv1"
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

var _ = Describe("RecordCombinedA", func() {
	When("unmarshaling from JSON", func() {
		It("should unmarshal into AlternativeRecordUnset", func() {
			exampleJSON := []byte("{}")

			sut := dnsv1.RecordCombinedA{}
			Expect(json.Unmarshal(exampleJSON, &sut)).To(Succeed())
			Expect(sut.Validate()).To(Succeed())
			Expect(sut.AlternativeRecordUnset).NotTo(BeNil())
		})
		It("should unmarshal into AlternativeCombinedACustom", func() {
			exampleJSON := []byte("{\"a\":[\"string\"],\"aaaa\":[\"string\"],\"settings\":{\"ttl\":{\"seconds\":42}}}")

			sut := dnsv1.RecordCombinedA{}
			Expect(json.Unmarshal(exampleJSON, &sut)).To(Succeed())
			Expect(sut.Validate()).To(Succeed())
			Expect(sut.AlternativeCombinedACustom).NotTo(BeNil())
		})
		It("should unmarshal into AlternativeCombinedAManaged", func() {
			exampleJSON := []byte("{\"managedBy\":{\"ingressId\":\"7a9d8971-09b0-4c39-8c64-546b6e1875ce\"}}")

			sut := dnsv1.RecordCombinedA{}
			Expect(json.Unmarshal(exampleJSON, &sut)).To(Succeed())
			Expect(sut.Validate()).To(Succeed())
			Expect(sut.AlternativeCombinedAManaged).NotTo(BeNil())
		})
	})
})
