package dnsv1

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

//This data type was generated from the following JSON schema:
//oneOf:
//    - type: "object"
//      properties:
//        "ingressId":
//            type: "string"
//            format: "uuid"
//      required:
//        - "ingressId"

type CombinedAManagedManagedBy struct {
	AlternativeCombinedAManagedManagedByAlternative1 *CombinedAManagedManagedByAlternative1
}

func (a *CombinedAManagedManagedBy) MarshalJSON() ([]byte, error) {
	if a.AlternativeCombinedAManagedManagedByAlternative1 != nil {
		return json.Marshal(a.AlternativeCombinedAManagedManagedByAlternative1)
	}
	return []byte("null"), nil
}

func (a *CombinedAManagedManagedBy) UnmarshalJSON(input []byte) error {
	reader := bytes.NewReader(input)
	decodedAtLeastOnce := false
	dec := json.NewDecoder(reader)
	dec.DisallowUnknownFields()

	reader.Reset(input)
	var alternativeCombinedAManagedManagedByAlternative1 CombinedAManagedManagedByAlternative1
	if err := dec.Decode(&alternativeCombinedAManagedManagedByAlternative1); err == nil {
		//subtype: *generator.ObjectType
		if vErr := alternativeCombinedAManagedManagedByAlternative1.Validate(); vErr == nil {
			a.AlternativeCombinedAManagedManagedByAlternative1 = &alternativeCombinedAManagedManagedByAlternative1
			decodedAtLeastOnce = true
		}
	}

	if !decodedAtLeastOnce {
		return fmt.Errorf("could not unmarshal into any alternative for type %T", a)
	}
	return nil
}

func (a *CombinedAManagedManagedBy) Validate() error {
	if a.AlternativeCombinedAManagedManagedByAlternative1 != nil {
		return a.AlternativeCombinedAManagedManagedByAlternative1.Validate()
	}
	return errors.New("no alternative set")
}
