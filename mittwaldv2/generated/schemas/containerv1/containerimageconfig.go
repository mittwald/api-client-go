package containerv1

import "fmt"

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

//This data type was generated from the following JSON schema:
//type: "object"
//properties:
//    "command":
//        type: "array"
//        items:
//            type: "string"
//            example: "mysqld"
//        description: "Command of the container image."
//    "entrypoint":
//        type: "array"
//        items:
//            type: "string"
//            example: "docker-entrypoint.sh"
//        description: "Entrypoint of the container image."
//    "env":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.container.ContainerImageConfigEnv"}
//        description: "List of environment variables the container image has."
//    "exposedPorts":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.container.ContainerImageConfigExposedPort"}
//        description: "List of exposed ports the container image has."
//    "hasAiGeneratedData":
//        type: "boolean"
//        description: "Whether the image config has ai generated data."
//        example: true
//    "isUserRoot":
//        type: "boolean"
//        description: "Whether the container user is root."
//        example: false
//    "overwritingUser":
//        type: "integer"
//        description: "If set, this user will be used to run the container."
//        example: 1000
//    "user":
//        type: "string"
//        description: "The user the container image is running with."
//        example: "mysql"
//    "volumes":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.container.ContainerImageConfigVolume"}
//        description: "List of volumes the container image has."
//required:
//    - "user"
//    - "isUserRoot"
//    - "hasAiGeneratedData"

type ContainerImageConfig struct {
	Command            []string                          `json:"command,omitempty"`
	Entrypoint         []string                          `json:"entrypoint,omitempty"`
	Env                []ContainerImageConfigEnv         `json:"env,omitempty"`
	ExposedPorts       []ContainerImageConfigExposedPort `json:"exposedPorts,omitempty"`
	HasAiGeneratedData bool                              `json:"hasAiGeneratedData"`
	IsUserRoot         bool                              `json:"isUserRoot"`
	OverwritingUser    *int64                            `json:"overwritingUser,omitempty"`
	User               string                            `json:"user"`
	Volumes            []ContainerImageConfigVolume      `json:"volumes,omitempty"`
}

func (o *ContainerImageConfig) Validate() error {
	if err := func() error {
		if o.Command == nil {
			return nil
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("invalid property command: %w", err)
	}
	if err := func() error {
		if o.Entrypoint == nil {
			return nil
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("invalid property entrypoint: %w", err)
	}
	if err := func() error {
		if o.Env == nil {
			return nil
		}
		return func() error {
			for i := range o.Env {
				if err := o.Env[i].Validate(); err != nil {
					return fmt.Errorf("item %d is invalid %w", i, err)
				}
			}
			return nil
		}()
	}(); err != nil {
		return fmt.Errorf("invalid property env: %w", err)
	}
	if err := func() error {
		if o.ExposedPorts == nil {
			return nil
		}
		return func() error {
			for i := range o.ExposedPorts {
				if err := o.ExposedPorts[i].Validate(); err != nil {
					return fmt.Errorf("item %d is invalid %w", i, err)
				}
			}
			return nil
		}()
	}(); err != nil {
		return fmt.Errorf("invalid property exposedPorts: %w", err)
	}
	if err := func() error {
		if o.Volumes == nil {
			return nil
		}
		return func() error {
			for i := range o.Volumes {
				if err := o.Volumes[i].Validate(); err != nil {
					return fmt.Errorf("item %d is invalid %w", i, err)
				}
			}
			return nil
		}()
	}(); err != nil {
		return fmt.Errorf("invalid property volumes: %w", err)
	}
	return nil
}
