package feev2

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// This data type was generated from the following JSON schema:
// oneOf:
//    - {"$ref": "#/components/schemas/de.mittwald.v1.fee.OneTimePaymentFeeStrategy"}
//    - {"$ref": "#/components/schemas/de.mittwald.v1.fee.PeriodBasedFeeStrategy"}
// description: "A strategy for fees of resources."

type FeeStrategy struct {
	AlternativeOneTimePaymentFeeStrategy *OneTimePaymentFeeStrategy
	AlternativePeriodBasedFeeStrategy    *PeriodBasedFeeStrategy
}

func (a *FeeStrategy) MarshalJSON() ([]byte, error) {
	if a.AlternativeOneTimePaymentFeeStrategy != nil {
		return json.Marshal(a.AlternativeOneTimePaymentFeeStrategy)
	}
	if a.AlternativePeriodBasedFeeStrategy != nil {
		return json.Marshal(a.AlternativePeriodBasedFeeStrategy)
	}
	return []byte("null"), nil
}

func (a *FeeStrategy) UnmarshalJSON(input []byte) error {
	reader := bytes.NewReader(input)
	decodedAtLeastOnce := false
	dec := json.NewDecoder(reader)
	dec.DisallowUnknownFields()

	reader.Reset(input)
	var alternativeOneTimePaymentFeeStrategy OneTimePaymentFeeStrategy
	if err := dec.Decode(&alternativeOneTimePaymentFeeStrategy); err == nil {
		//subtype: *generator.ReferenceType
		if vErr := alternativeOneTimePaymentFeeStrategy.Validate(); vErr == nil {
			a.AlternativeOneTimePaymentFeeStrategy = &alternativeOneTimePaymentFeeStrategy
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativePeriodBasedFeeStrategy PeriodBasedFeeStrategy
	if err := dec.Decode(&alternativePeriodBasedFeeStrategy); err == nil {
		//subtype: *generator.ReferenceType
		if vErr := alternativePeriodBasedFeeStrategy.Validate(); vErr == nil {
			a.AlternativePeriodBasedFeeStrategy = &alternativePeriodBasedFeeStrategy
			decodedAtLeastOnce = true
		}
	}

	if !decodedAtLeastOnce {
		return fmt.Errorf("could not unmarshal into any alternative for type %T", a)
	}
	return nil
}

func (a *FeeStrategy) Validate() error {
	if a.AlternativeOneTimePaymentFeeStrategy != nil {
		return a.AlternativeOneTimePaymentFeeStrategy.Validate()
	}
	if a.AlternativePeriodBasedFeeStrategy != nil {
		return a.AlternativePeriodBasedFeeStrategy.Validate()
	}
	return errors.New("no alternative set")
}
