package appv2

import (
	"fmt"
	"time"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// This data type was generated from the following JSON schema:
// type: "object"
// properties:
//    "appId":
//        type: "string"
//        format: "uuid"
//    "appVersion": {"$ref": "#/components/schemas/de.mittwald.v1.app.VersionStatus"}
//    "createdAt":
//        type: "string"
//        format: "date-time"
//        example: "2024-09-20T22:57:32.000Z"
//    "customDocumentRoot":
//        type: "string"
//    "description":
//        type: "string"
//    "disabled":
//        type: "boolean"
//        default: false
//    "id":
//        type: "string"
//        format: "uuid"
//    "installationPath":
//        type: "string"
//    "linkedDatabases":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.app.LinkedDatabase"}
//    "processes":
//        type: "array"
//        items:
//            type: "string"
//            format: "uuid"
//    "projectId":
//        type: "string"
//        format: "uuid"
//    "screenshotId":
//        type: "string"
//        format: "uuid"
//    "screenshotRef":
//        type: "string"
//    "shortId":
//        type: "string"
//        example: "a-XXXXXX"
//    "systemSoftware":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.app.InstalledSystemSoftware"}
//    "updatePolicy": {"$ref": "#/components/schemas/de.mittwald.v1.app.AppUpdatePolicy"}
//    "userInputs":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.app.SavedUserInput"}
// required:
//    - "id"
//    - "appId"
//    - "shortId"
//    - "appVersion"
//    - "description"
//    - "installationPath"
//    - "disabled"
//    - "createdAt"
// description: "An AppInstallation is a concrete manifestation of an App in a specific AppVersion."

// An AppInstallation is a concrete manifestation of an App in a specific AppVersion.
type AppInstallation struct {
	AppId              string                    `json:"appId"`
	AppVersion         VersionStatus             `json:"appVersion"`
	CreatedAt          time.Time                 `json:"createdAt"`
	CustomDocumentRoot *string                   `json:"customDocumentRoot,omitempty"`
	Description        string                    `json:"description"`
	Disabled           bool                      `json:"disabled"`
	Id                 string                    `json:"id"`
	InstallationPath   string                    `json:"installationPath"`
	LinkedDatabases    []LinkedDatabase          `json:"linkedDatabases,omitempty"`
	Processes          []string                  `json:"processes,omitempty"`
	ProjectId          *string                   `json:"projectId,omitempty"`
	ScreenshotId       *string                   `json:"screenshotId,omitempty"`
	ScreenshotRef      *string                   `json:"screenshotRef,omitempty"`
	ShortId            string                    `json:"shortId"`
	SystemSoftware     []InstalledSystemSoftware `json:"systemSoftware,omitempty"`
	UpdatePolicy       *AppUpdatePolicy          `json:"updatePolicy,omitempty"`
	UserInputs         []SavedUserInput          `json:"userInputs,omitempty"`
}

func (o *AppInstallation) Validate() error {
	if err := o.AppVersion.Validate(); err != nil {
		return fmt.Errorf("invalid property appVersion: %w", err)
	}
	if err := func() error {
		if o.LinkedDatabases == nil {
			return nil
		}
		return func() error {
			for i := range o.LinkedDatabases {
				if err := o.LinkedDatabases[i].Validate(); err != nil {
					return fmt.Errorf("item %d is invalid %w", i, err)
				}
			}
			return nil
		}()
	}(); err != nil {
		return fmt.Errorf("invalid property linkedDatabases: %w", err)
	}
	if err := func() error {
		if o.Processes == nil {
			return nil
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("invalid property processes: %w", err)
	}
	if err := func() error {
		if o.SystemSoftware == nil {
			return nil
		}
		return func() error {
			for i := range o.SystemSoftware {
				if err := o.SystemSoftware[i].Validate(); err != nil {
					return fmt.Errorf("item %d is invalid %w", i, err)
				}
			}
			return nil
		}()
	}(); err != nil {
		return fmt.Errorf("invalid property systemSoftware: %w", err)
	}
	if err := func() error {
		if o.UpdatePolicy == nil {
			return nil
		}
		return o.UpdatePolicy.Validate()
	}(); err != nil {
		return fmt.Errorf("invalid property updatePolicy: %w", err)
	}
	if err := func() error {
		if o.UserInputs == nil {
			return nil
		}
		return func() error {
			for i := range o.UserInputs {
				if err := o.UserInputs[i].Validate(); err != nil {
					return fmt.Errorf("item %d is invalid %w", i, err)
				}
			}
			return nil
		}()
	}(); err != nil {
		return fmt.Errorf("invalid property userInputs: %w", err)
	}
	return nil
}
