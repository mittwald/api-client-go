package conversationv2

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// This data type was generated from the following JSON schema:
// oneOf:
//    - type: "object"
//      properties:
//        "aggregate":
//            type: "string"
//            enum:
//                - "user"
//        "domain":
//            type: "string"
//            enum:
//                - "user"
//        "id":
//            type: "string"
//      required:
//        - "id"
//        - "aggregate"
//        - "domain"
//    - type: "object"
//      properties:
//        "aggregate":
//            type: "string"
//            enum:
//                - "customer"
//        "domain":
//            type: "string"
//            enum:
//                - "customer"
//        "id":
//            type: "string"
//      required:
//        - "id"
//        - "aggregate"
//        - "domain"
//    - type: "object"
//      properties:
//        "aggregate":
//            type: "string"
//            enum:
//                - "project"
//        "domain":
//            type: "string"
//            enum:
//                - "project"
//        "id":
//            type: "string"
//      required:
//        - "id"
//        - "aggregate"
//        - "domain"
//    - type: "object"
//      properties:
//        "aggregate":
//            type: "string"
//            enum:
//                - "appinstallation"
//        "domain":
//            type: "string"
//            enum:
//                - "app"
//        "id":
//            type: "string"
//      required:
//        - "id"
//        - "aggregate"
//        - "domain"
//    - type: "object"
//      properties:
//        "aggregate":
//            type: "string"
//            enum:
//                - "placementgroup"
//        "domain":
//            type: "string"
//            enum:
//                - "project"
//        "id":
//            type: "string"
//      required:
//        - "id"
//        - "aggregate"
//        - "domain"
//    - type: "object"
//      properties:
//        "aggregate":
//            type: "string"
//            enum:
//                - "extensionInstance"
//        "domain":
//            type: "string"
//            enum:
//                - "extension"
//        "id":
//            type: "string"
//      required:
//        - "id"
//        - "aggregate"
//        - "domain"

type RelatedAggregateReference struct {
	AlternativeRelatedAggregateReferenceAlternative1 *RelatedAggregateReferenceAlternative1
	AlternativeRelatedAggregateReferenceAlternative2 *RelatedAggregateReferenceAlternative2
	AlternativeRelatedAggregateReferenceAlternative3 *RelatedAggregateReferenceAlternative3
	AlternativeRelatedAggregateReferenceAlternative4 *RelatedAggregateReferenceAlternative4
	AlternativeRelatedAggregateReferenceAlternative5 *RelatedAggregateReferenceAlternative5
	AlternativeRelatedAggregateReferenceAlternative6 *RelatedAggregateReferenceAlternative6
}

func (a *RelatedAggregateReference) MarshalJSON() ([]byte, error) {
	if a.AlternativeRelatedAggregateReferenceAlternative1 != nil {
		return json.Marshal(a.AlternativeRelatedAggregateReferenceAlternative1)
	}
	if a.AlternativeRelatedAggregateReferenceAlternative2 != nil {
		return json.Marshal(a.AlternativeRelatedAggregateReferenceAlternative2)
	}
	if a.AlternativeRelatedAggregateReferenceAlternative3 != nil {
		return json.Marshal(a.AlternativeRelatedAggregateReferenceAlternative3)
	}
	if a.AlternativeRelatedAggregateReferenceAlternative4 != nil {
		return json.Marshal(a.AlternativeRelatedAggregateReferenceAlternative4)
	}
	if a.AlternativeRelatedAggregateReferenceAlternative5 != nil {
		return json.Marshal(a.AlternativeRelatedAggregateReferenceAlternative5)
	}
	if a.AlternativeRelatedAggregateReferenceAlternative6 != nil {
		return json.Marshal(a.AlternativeRelatedAggregateReferenceAlternative6)
	}
	return []byte("null"), nil
}

func (a *RelatedAggregateReference) UnmarshalJSON(input []byte) error {
	reader := bytes.NewReader(input)
	decodedAtLeastOnce := false
	dec := json.NewDecoder(reader)
	dec.DisallowUnknownFields()

	reader.Reset(input)
	var alternativeRelatedAggregateReferenceAlternative1 RelatedAggregateReferenceAlternative1
	if err := dec.Decode(&alternativeRelatedAggregateReferenceAlternative1); err == nil {
		//subtype: *generator.ObjectType
		if vErr := alternativeRelatedAggregateReferenceAlternative1.Validate(); vErr == nil {
			a.AlternativeRelatedAggregateReferenceAlternative1 = &alternativeRelatedAggregateReferenceAlternative1
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeRelatedAggregateReferenceAlternative2 RelatedAggregateReferenceAlternative2
	if err := dec.Decode(&alternativeRelatedAggregateReferenceAlternative2); err == nil {
		//subtype: *generator.ObjectType
		if vErr := alternativeRelatedAggregateReferenceAlternative2.Validate(); vErr == nil {
			a.AlternativeRelatedAggregateReferenceAlternative2 = &alternativeRelatedAggregateReferenceAlternative2
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeRelatedAggregateReferenceAlternative3 RelatedAggregateReferenceAlternative3
	if err := dec.Decode(&alternativeRelatedAggregateReferenceAlternative3); err == nil {
		//subtype: *generator.ObjectType
		if vErr := alternativeRelatedAggregateReferenceAlternative3.Validate(); vErr == nil {
			a.AlternativeRelatedAggregateReferenceAlternative3 = &alternativeRelatedAggregateReferenceAlternative3
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeRelatedAggregateReferenceAlternative4 RelatedAggregateReferenceAlternative4
	if err := dec.Decode(&alternativeRelatedAggregateReferenceAlternative4); err == nil {
		//subtype: *generator.ObjectType
		if vErr := alternativeRelatedAggregateReferenceAlternative4.Validate(); vErr == nil {
			a.AlternativeRelatedAggregateReferenceAlternative4 = &alternativeRelatedAggregateReferenceAlternative4
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeRelatedAggregateReferenceAlternative5 RelatedAggregateReferenceAlternative5
	if err := dec.Decode(&alternativeRelatedAggregateReferenceAlternative5); err == nil {
		//subtype: *generator.ObjectType
		if vErr := alternativeRelatedAggregateReferenceAlternative5.Validate(); vErr == nil {
			a.AlternativeRelatedAggregateReferenceAlternative5 = &alternativeRelatedAggregateReferenceAlternative5
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeRelatedAggregateReferenceAlternative6 RelatedAggregateReferenceAlternative6
	if err := dec.Decode(&alternativeRelatedAggregateReferenceAlternative6); err == nil {
		//subtype: *generator.ObjectType
		if vErr := alternativeRelatedAggregateReferenceAlternative6.Validate(); vErr == nil {
			a.AlternativeRelatedAggregateReferenceAlternative6 = &alternativeRelatedAggregateReferenceAlternative6
			decodedAtLeastOnce = true
		}
	}

	if !decodedAtLeastOnce {
		return fmt.Errorf("could not unmarshal into any alternative for type %T", a)
	}
	return nil
}

func (a *RelatedAggregateReference) Validate() error {
	if a.AlternativeRelatedAggregateReferenceAlternative1 != nil {
		return a.AlternativeRelatedAggregateReferenceAlternative1.Validate()
	}
	if a.AlternativeRelatedAggregateReferenceAlternative2 != nil {
		return a.AlternativeRelatedAggregateReferenceAlternative2.Validate()
	}
	if a.AlternativeRelatedAggregateReferenceAlternative3 != nil {
		return a.AlternativeRelatedAggregateReferenceAlternative3.Validate()
	}
	if a.AlternativeRelatedAggregateReferenceAlternative4 != nil {
		return a.AlternativeRelatedAggregateReferenceAlternative4.Validate()
	}
	if a.AlternativeRelatedAggregateReferenceAlternative5 != nil {
		return a.AlternativeRelatedAggregateReferenceAlternative5.Validate()
	}
	if a.AlternativeRelatedAggregateReferenceAlternative6 != nil {
		return a.AlternativeRelatedAggregateReferenceAlternative6.Validate()
	}
	return errors.New("no alternative set")
}
