package databaseclientv2

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/databasev2"
	"github.com/mittwald/api-client-go/pkg/httpclient"
	"github.com/mittwald/api-client-go/pkg/httperr"
)

type Client interface {
	ListMysqlDatabases(
		ctx context.Context,
		req ListMysqlDatabasesRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]databasev2.MySqlDatabase, *http.Response, error)
	CreateMysqlDatabase(
		ctx context.Context,
		req CreateMysqlDatabaseRequest,
		reqEditors ...func(req *http.Request) error,
	) (*CreateMysqlDatabaseResponse, *http.Response, error)
	ListMysqlUsers(
		ctx context.Context,
		req ListMysqlUsersRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]databasev2.MySqlUser, *http.Response, error)
	CreateMysqlUser(
		ctx context.Context,
		req CreateMysqlUserRequest,
		reqEditors ...func(req *http.Request) error,
	) (*CreateMysqlUserResponse, *http.Response, error)
	ListRedisDatabases(
		ctx context.Context,
		req ListRedisDatabasesRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]databasev2.RedisDatabase, *http.Response, error)
	CreateRedisDatabase(
		ctx context.Context,
		req CreateRedisDatabaseRequest,
		reqEditors ...func(req *http.Request) error,
	) (*CreateRedisDatabaseResponse, *http.Response, error)
	GetMysqlDatabase(
		ctx context.Context,
		req GetMysqlDatabaseRequest,
		reqEditors ...func(req *http.Request) error,
	) (*databasev2.MySqlDatabase, *http.Response, error)
	DeleteMysqlDatabase(
		ctx context.Context,
		req DeleteMysqlDatabaseRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	GetMysqlUser(
		ctx context.Context,
		req GetMysqlUserRequest,
		reqEditors ...func(req *http.Request) error,
	) (*databasev2.MySqlUser, *http.Response, error)
	UpdateMysqlUser(
		ctx context.Context,
		req UpdateMysqlUserRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	DeleteMysqlUser(
		ctx context.Context,
		req DeleteMysqlUserRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	GetRedisDatabase(
		ctx context.Context,
		req GetRedisDatabaseRequest,
		reqEditors ...func(req *http.Request) error,
	) (*databasev2.RedisDatabase, *http.Response, error)
	DeleteRedisDatabase(
		ctx context.Context,
		req DeleteRedisDatabaseRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	DisableMysqlUser(
		ctx context.Context,
		req DisableMysqlUserRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	EnableMysqlUser(
		ctx context.Context,
		req EnableMysqlUserRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	GetMysqlUserPhpMyAdminURL(
		ctx context.Context,
		req GetMysqlUserPhpMyAdminURLRequest,
		reqEditors ...func(req *http.Request) error,
	) (*databasev2.PhpMyAdminURL, *http.Response, error)
	ListMysqlCharsets(
		ctx context.Context,
		req ListMysqlCharsetsRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]databasev2.MySqlCharacterSettings, *http.Response, error)
	ListMysqlVersions(
		ctx context.Context,
		req ListMysqlVersionsRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]databasev2.MySqlVersion, *http.Response, error)
	ListRedisVersions(
		ctx context.Context,
		req ListRedisVersionsRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]databasev2.RedisVersion, *http.Response, error)
	UpdateMysqlDatabaseDefaultCharset(
		ctx context.Context,
		req UpdateMysqlDatabaseDefaultCharsetRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	UpdateMysqlDatabaseDescription(
		ctx context.Context,
		req UpdateMysqlDatabaseDescriptionRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	UpdateMysqlUserPassword(
		ctx context.Context,
		req UpdateMysqlUserPasswordRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	UpdateRedisDatabaseConfiguration(
		ctx context.Context,
		req UpdateRedisDatabaseConfigurationRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	UpdateRedisDatabaseDescription(
		ctx context.Context,
		req UpdateRedisDatabaseDescriptionRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	CopyMysqlDatabase(
		ctx context.Context,
		req CopyMysqlDatabaseRequest,
		reqEditors ...func(req *http.Request) error,
	) (*CopyMysqlDatabaseResponse, *http.Response, error)
}
type clientImpl struct {
	client httpclient.RequestRunner
}

func NewClient(client httpclient.RequestRunner) Client {
	return &clientImpl{client: client}
}

// List MySQLDatabases belonging to a Project.
func (c *clientImpl) ListMysqlDatabases(
	ctx context.Context,
	req ListMysqlDatabasesRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]databasev2.MySqlDatabase, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []databasev2.MySqlDatabase
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Create a MySQLDatabase with a MySQLUser.
func (c *clientImpl) CreateMysqlDatabase(
	ctx context.Context,
	req CreateMysqlDatabaseRequest,
	reqEditors ...func(req *http.Request) error,
) (*CreateMysqlDatabaseResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response CreateMysqlDatabaseResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// List MySQLUsers belonging to a Database.
func (c *clientImpl) ListMysqlUsers(
	ctx context.Context,
	req ListMysqlUsersRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]databasev2.MySqlUser, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []databasev2.MySqlUser
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Create a MySQLUser.
func (c *clientImpl) CreateMysqlUser(
	ctx context.Context,
	req CreateMysqlUserRequest,
	reqEditors ...func(req *http.Request) error,
) (*CreateMysqlUserResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response CreateMysqlUserResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// List RedisDatabases belonging to a Project.
func (c *clientImpl) ListRedisDatabases(
	ctx context.Context,
	req ListRedisDatabasesRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]databasev2.RedisDatabase, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []databasev2.RedisDatabase
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Create a RedisDatabase.
func (c *clientImpl) CreateRedisDatabase(
	ctx context.Context,
	req CreateRedisDatabaseRequest,
	reqEditors ...func(req *http.Request) error,
) (*CreateRedisDatabaseResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response CreateRedisDatabaseResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get a MySQLDatabase.
func (c *clientImpl) GetMysqlDatabase(
	ctx context.Context,
	req GetMysqlDatabaseRequest,
	reqEditors ...func(req *http.Request) error,
) (*databasev2.MySqlDatabase, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response databasev2.MySqlDatabase
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Delete a MySQLDatabase.
func (c *clientImpl) DeleteMysqlDatabase(
	ctx context.Context,
	req DeleteMysqlDatabaseRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Get a MySQLUser.
func (c *clientImpl) GetMysqlUser(
	ctx context.Context,
	req GetMysqlUserRequest,
	reqEditors ...func(req *http.Request) error,
) (*databasev2.MySqlUser, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response databasev2.MySqlUser
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Update a MySQLUser.
func (c *clientImpl) UpdateMysqlUser(
	ctx context.Context,
	req UpdateMysqlUserRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Delete a MySQLUser.
func (c *clientImpl) DeleteMysqlUser(
	ctx context.Context,
	req DeleteMysqlUserRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Get a RedisDatabase.
func (c *clientImpl) GetRedisDatabase(
	ctx context.Context,
	req GetRedisDatabaseRequest,
	reqEditors ...func(req *http.Request) error,
) (*databasev2.RedisDatabase, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response databasev2.RedisDatabase
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Delete a RedisDatabase.
func (c *clientImpl) DeleteRedisDatabase(
	ctx context.Context,
	req DeleteRedisDatabaseRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Disable a MySQLUser.
func (c *clientImpl) DisableMysqlUser(
	ctx context.Context,
	req DisableMysqlUserRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Enable a MySQLUser.
func (c *clientImpl) EnableMysqlUser(
	ctx context.Context,
	req EnableMysqlUserRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Get a MySQLUser's PhpMyAdmin-URL.
func (c *clientImpl) GetMysqlUserPhpMyAdminURL(
	ctx context.Context,
	req GetMysqlUserPhpMyAdminURLRequest,
	reqEditors ...func(req *http.Request) error,
) (*databasev2.PhpMyAdminURL, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response databasev2.PhpMyAdminURL
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// List available MySQL character sets and collations, optionally filtered by a MySQLVersion.
func (c *clientImpl) ListMysqlCharsets(
	ctx context.Context,
	req ListMysqlCharsetsRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]databasev2.MySqlCharacterSettings, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []databasev2.MySqlCharacterSettings
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// List MySQLVersions.
func (c *clientImpl) ListMysqlVersions(
	ctx context.Context,
	req ListMysqlVersionsRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]databasev2.MySqlVersion, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []databasev2.MySqlVersion
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// List RedisVersions.
func (c *clientImpl) ListRedisVersions(
	ctx context.Context,
	req ListRedisVersionsRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]databasev2.RedisVersion, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []databasev2.RedisVersion
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Update a MySQLDatabase's default character settings.
func (c *clientImpl) UpdateMysqlDatabaseDefaultCharset(
	ctx context.Context,
	req UpdateMysqlDatabaseDefaultCharsetRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Update a MySQLDatabase's description.
func (c *clientImpl) UpdateMysqlDatabaseDescription(
	ctx context.Context,
	req UpdateMysqlDatabaseDescriptionRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Update a MySQLUser's password.
func (c *clientImpl) UpdateMysqlUserPassword(
	ctx context.Context,
	req UpdateMysqlUserPasswordRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Update a RedisDatabase's configuration.
func (c *clientImpl) UpdateRedisDatabaseConfiguration(
	ctx context.Context,
	req UpdateRedisDatabaseConfigurationRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Update a RedisDatabase's description.
func (c *clientImpl) UpdateRedisDatabaseDescription(
	ctx context.Context,
	req UpdateRedisDatabaseDescriptionRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Copy a MySQLDatabase with a MySQLUser.
func (c *clientImpl) CopyMysqlDatabase(
	ctx context.Context,
	req CopyMysqlDatabaseRequest,
	reqEditors ...func(req *http.Request) error,
) (*CopyMysqlDatabaseResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response CopyMysqlDatabaseResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}
