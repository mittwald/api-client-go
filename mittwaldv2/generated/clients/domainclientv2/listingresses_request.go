package domainclientv2

import (
	"fmt"
	"io"
	"net/http"
	"net/url"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// ListIngressesRequest models a request for the 'ingress-list-ingresses'
// operation. See [1] for more information.
//
// List Ingresses.
//
// [1]:
// https://developer.mittwald.de/docs/v2/reference/domain/ingress-list-ingresses
type ListIngressesRequest struct {
	ProjectID         *string
	CertificateID     *string
	HostnameSubstring *string
	Limit             *int64
	Skip              *int64
	Page              *int64
}

// BuildRequest builds an *http.Request instance from this request that may be used
// with any regular *http.Client instance.
func (r *ListIngressesRequest) BuildRequest(reqEditors ...func(req *http.Request) error) (*http.Request, error) {
	body, contentType, err := r.body()
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodGet, r.url(), body)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", contentType)
	for _, editor := range reqEditors {
		if err := editor(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

func (r *ListIngressesRequest) body() (io.Reader, string, error) {
	return nil, "", nil
}

func (r *ListIngressesRequest) url() string {
	u := url.URL{
		Path:     "/v2/ingresses",
		RawQuery: r.query().Encode(),
	}
	return u.String()
}

func (r *ListIngressesRequest) query() url.Values {
	q := make(url.Values)
	if r.ProjectID != nil {
		q.Set("projectId", *r.ProjectID)
	}
	if r.CertificateID != nil {
		q.Set("certificateId", *r.CertificateID)
	}
	if r.HostnameSubstring != nil {
		q.Set("hostnameSubstring", *r.HostnameSubstring)
	}
	if r.Limit != nil {
		q.Set("limit", fmt.Sprintf("%d", *r.Limit))
	}
	if r.Skip != nil {
		q.Set("skip", fmt.Sprintf("%d", *r.Skip))
	}
	if r.Page != nil {
		q.Set("page", fmt.Sprintf("%d", *r.Page))
	}
	return q
}
