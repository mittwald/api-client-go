package domainclientv2

import (
	"fmt"
	"io"
	"net/http"
	"net/url"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// DeprecatedListDomainsRequest models a request for the
// 'deprecated-domain-list-domains' operation. See [1] for more information.
//
// List Domains belonging to a Project.
//
// This operation is deprecated. Use the GET /v2/domains endpoint instead.
//
// [1]:
// https://developer.mittwald.de/docs/v2/reference/domain/deprecated-domain-list-domains
type DeprecatedListDomainsRequest struct {
	ProjectID        string
	Page             *int64
	Limit            *int64
	DomainSearchName *string
}

// BuildRequest builds an *http.Request instance from this request that may be used
// with any regular *http.Client instance.
func (r *DeprecatedListDomainsRequest) BuildRequest() (*http.Request, error) {
	body, contentType, err := r.body()
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodGet, r.url(), body)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", contentType)
	return req, nil
}

func (r *DeprecatedListDomainsRequest) body() (io.Reader, string, error) {
	return nil, "", nil
}

func (r *DeprecatedListDomainsRequest) url() string {
	return fmt.Sprintf("/v2/projects/%s/domains", url.PathEscape(r.ProjectID))
}

func (r *DeprecatedListDomainsRequest) query() url.Values {
	q := make(url.Values)
	if r.Page != nil {
		q.Set("page", fmt.Sprintf("%d", *r.Page))
	}
	if r.Limit != nil {
		q.Set("limit", fmt.Sprintf("%d", *r.Limit))
	}
	if r.DomainSearchName != nil {
		q.Set("domainSearchName", *r.DomainSearchName)
	}
	return q
}
