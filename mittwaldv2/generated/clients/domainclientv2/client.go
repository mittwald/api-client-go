package domainclientv2

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/dnsv2"
	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/domainv2"
	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/ingressv2"
	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/sslv2"
	"github.com/mittwald/api-client-go/pkg/httpclient"
	"github.com/mittwald/api-client-go/pkg/httperr"
)

type Client interface {
	DeprecatedRecordASetCustom(
		ctx context.Context,
		req DeprecatedRecordASetCustomRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	DeprecatedRecordASetManagedByIngress(
		ctx context.Context,
		req DeprecatedRecordASetManagedByIngressRequest,
		reqEditors ...func(req *http.Request) error,
	) (*DeprecatedRecordASetManagedByIngressResponse, *http.Response, error)
	DeprecatedRecordCnameSet(
		ctx context.Context,
		req DeprecatedRecordCnameSetRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	DeprecatedRecordMxSetCustom(
		ctx context.Context,
		req DeprecatedRecordMxSetCustomRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	DeprecatedRecordMxSetManaged(
		ctx context.Context,
		req DeprecatedRecordMxSetManagedRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	DeprecatedRecordSrvSet(
		ctx context.Context,
		req DeprecatedRecordSrvSetRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	DeprecatedRecordTxtSet(
		ctx context.Context,
		req DeprecatedRecordTxtSetRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	DeprecatedChangeOwnercOfDomain(
		ctx context.Context,
		req DeprecatedChangeOwnercOfDomainRequest,
		reqEditors ...func(req *http.Request) error,
	) (*DeprecatedChangeOwnercOfDomainResponse, *http.Response, error)
	DeprecatedChangeProjectOfDomain(
		ctx context.Context,
		req DeprecatedChangeProjectOfDomainRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	ListDomains(
		ctx context.Context,
		req ListDomainsRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]domainv2.Domain, *http.Response, error)
	DeprecatedCheckDomainRegistrability(
		ctx context.Context,
		req DeprecatedCheckDomainRegistrabilityRequest,
		reqEditors ...func(req *http.Request) error,
	) (*DeprecatedCheckDomainRegistrabilityResponse, *http.Response, error)
	DeprecatedDeclareNameservers(
		ctx context.Context,
		req DeprecatedDeclareNameserversRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	UpdateDomainNameservers(
		ctx context.Context,
		req UpdateDomainNameserversRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	DeprecatedDeclareProcessChangeAuthcode(
		ctx context.Context,
		req DeprecatedDeclareProcessChangeAuthcodeRequest,
		reqEditors ...func(req *http.Request) error,
	) (*DeprecatedDeclareProcessChangeAuthcodeResponse, *http.Response, error)
	DeprecatedDeclareProcessChangeHandles(
		ctx context.Context,
		req DeprecatedDeclareProcessChangeHandlesRequest,
		reqEditors ...func(req *http.Request) error,
	) (*DeprecatedDeclareProcessChangeHandlesResponse, *http.Response, error)
	DeprecatedGetHandleFields(
		ctx context.Context,
		req DeprecatedGetHandleFieldsRequest,
		reqEditors ...func(req *http.Request) error,
	) (*DeprecatedGetHandleFieldsResponse, *http.Response, error)
	DeprecatedGetScreenshotForDomain(
		ctx context.Context,
		req DeprecatedGetScreenshotForDomainRequest,
		reqEditors ...func(req *http.Request) error,
	) (*DeprecatedGetScreenshotForDomainResponse, *http.Response, error)
	DeprecatedListDomains(
		ctx context.Context,
		req DeprecatedListDomainsRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]domainv2.Domain, *http.Response, error)
	DeprecatedListIngresses(
		ctx context.Context,
		req DeprecatedListIngressesRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]ingressv2.IngressDeprecated, *http.Response, error)
	DeprecatedPaths(
		ctx context.Context,
		req DeprecatedPathsRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	UpdateIngressPaths(
		ctx context.Context,
		req UpdateIngressPathsRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	DeprecatedTLS(
		ctx context.Context,
		req DeprecatedTLSRequest,
		reqEditors ...func(req *http.Request) error,
	) (*DeprecatedTLSResponse, *http.Response, error)
	UpdateIngressTLS(
		ctx context.Context,
		req UpdateIngressTLSRequest,
		reqEditors ...func(req *http.Request) error,
	) (*UpdateIngressTLSResponse, *http.Response, error)
	CreateDNSZone(
		ctx context.Context,
		req CreateDNSZoneRequest,
		reqEditors ...func(req *http.Request) error,
	) (*CreateDNSZoneResponse, *http.Response, error)
	GetDNSZone(
		ctx context.Context,
		req GetDNSZoneRequest,
		reqEditors ...func(req *http.Request) error,
	) (*dnsv2.Zone, *http.Response, error)
	DeleteDNSZone(
		ctx context.Context,
		req DeleteDNSZoneRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	GetZoneFile(
		ctx context.Context,
		req GetZoneFileRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	ListDNSZones(
		ctx context.Context,
		req ListDNSZonesRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]dnsv2.Zone, *http.Response, error)
	SetRecordSetManaged(
		ctx context.Context,
		req SetRecordSetManagedRequest,
		reqEditors ...func(req *http.Request) error,
	) (*SetRecordSetManagedResponse, *http.Response, error)
	UpdateRecordSet(
		ctx context.Context,
		req UpdateRecordSetRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	AbortDomainDeclaration(
		ctx context.Context,
		req AbortDomainDeclarationRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	CheckDomainRegistrability(
		ctx context.Context,
		req CheckDomainRegistrabilityRequest,
		reqEditors ...func(req *http.Request) error,
	) (*CheckDomainRegistrabilityResponse, *http.Response, error)
	CheckDomainTransferability(
		ctx context.Context,
		req CheckDomainTransferabilityRequest,
		reqEditors ...func(req *http.Request) error,
	) (*CheckDomainTransferabilityResponse, *http.Response, error)
	CreateDomainAuthCode(
		ctx context.Context,
		req CreateDomainAuthCodeRequest,
		reqEditors ...func(req *http.Request) error,
	) (*CreateDomainAuthCodeResponse, *http.Response, error)
	GetDomain(
		ctx context.Context,
		req GetDomainRequest,
		reqEditors ...func(req *http.Request) error,
	) (*domainv2.Domain, *http.Response, error)
	DeleteDomain(
		ctx context.Context,
		req DeleteDomainRequest,
		reqEditors ...func(req *http.Request) error,
	) (*DeleteDomainResponse, *http.Response, error)
	GetLatestScreenshot(
		ctx context.Context,
		req GetLatestScreenshotRequest,
		reqEditors ...func(req *http.Request) error,
	) (*GetLatestScreenshotResponse, *http.Response, error)
	ListTldContactSchemas(
		ctx context.Context,
		req ListTldContactSchemasRequest,
		reqEditors ...func(req *http.Request) error,
	) (*ListTldContactSchemasResponse, *http.Response, error)
	ListTlds(
		ctx context.Context,
		req ListTldsRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]domainv2.TopLevel, *http.Response, error)
	ResendDomainEmail(
		ctx context.Context,
		req ResendDomainEmailRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	Suggest(
		ctx context.Context,
		req SuggestRequest,
		reqEditors ...func(req *http.Request) error,
	) (*domainv2.SuggestedDomains, *http.Response, error)
	UpdateDomainAuthCode(
		ctx context.Context,
		req UpdateDomainAuthCodeRequest,
		reqEditors ...func(req *http.Request) error,
	) (*UpdateDomainAuthCodeResponse, *http.Response, error)
	UpdateDomainContact(
		ctx context.Context,
		req UpdateDomainContactRequest,
		reqEditors ...func(req *http.Request) error,
	) (*UpdateDomainContactResponse, *http.Response, error)
	UpdateDomainProjectID(
		ctx context.Context,
		req UpdateDomainProjectIDRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	ListIngresses(
		ctx context.Context,
		req ListIngressesRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]ingressv2.Ingress, *http.Response, error)
	CreateIngress(
		ctx context.Context,
		req CreateIngressRequest,
		reqEditors ...func(req *http.Request) error,
	) (*CreateIngressResponse, *http.Response, error)
	GetIngress(
		ctx context.Context,
		req GetIngressRequest,
		reqEditors ...func(req *http.Request) error,
	) (*ingressv2.Ingress, *http.Response, error)
	DeleteIngress(
		ctx context.Context,
		req DeleteIngressRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	IngressVerifyOwnership(
		ctx context.Context,
		req IngressVerifyOwnershipRequest,
		reqEditors ...func(req *http.Request) error,
	) (*IngressVerifyOwnershipResponse, *http.Response, error)
	ListIngressesCompatibleWithCertificate(
		ctx context.Context,
		req ListIngressesCompatibleWithCertificateRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]ingressv2.Ingress, *http.Response, error)
	RequestIngressAcmeCertificateIssuance(
		ctx context.Context,
		req RequestIngressAcmeCertificateIssuanceRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	CheckReplaceCertificate(
		ctx context.Context,
		req CheckReplaceCertificateRequest,
		reqEditors ...func(req *http.Request) error,
	) (*sslv2.CheckReplaceCertificateResponse, *http.Response, error)
	ListCertificateRequests(
		ctx context.Context,
		req ListCertificateRequestsRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]sslv2.CertificateRequest, *http.Response, error)
	CreateCertificateRequest(
		ctx context.Context,
		req CreateCertificateRequestRequest,
		reqEditors ...func(req *http.Request) error,
	) (*sslv2.CertificateRequestCreateResponse, *http.Response, error)
	DeleteCertificateRequest(
		ctx context.Context,
		req DeleteCertificateRequestRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	DeleteCertificate(
		ctx context.Context,
		req DeleteCertificateRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	GetCertificateRequest(
		ctx context.Context,
		req GetCertificateRequestRequest,
		reqEditors ...func(req *http.Request) error,
	) (*sslv2.CertificateRequest, *http.Response, error)
	GetCertificate(
		ctx context.Context,
		req GetCertificateRequest,
		reqEditors ...func(req *http.Request) error,
	) (*sslv2.Certificate, *http.Response, error)
	ReplaceCertificate(
		ctx context.Context,
		req ReplaceCertificateRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	ListCertificates(
		ctx context.Context,
		req ListCertificatesRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]sslv2.Certificate, *http.Response, error)
	SetCertificateRequestCertificate(
		ctx context.Context,
		req SetCertificateRequestCertificateRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	CreateScheduledDeletion(
		ctx context.Context,
		req CreateScheduledDeletionRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	CancelScheduledDeletion(
		ctx context.Context,
		req CancelScheduledDeletionRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
}
type clientImpl struct {
	client httpclient.RequestRunner
}

func NewClient(client httpclient.RequestRunner) Client {
	return &clientImpl{client: client}
}

// updates a-records for a specific zone
//
// This operation is deprecated. Use the PUT v2/dns-zones/{dnsZoneId}/record-sets/{recordSet} endpoint instead.
func (c *clientImpl) DeprecatedRecordASetCustom(
	ctx context.Context,
	req DeprecatedRecordASetCustomRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// set a-records managed by ingress for a specific zone
//
// This operation is deprecated. Use the POST v2/dns-zones/{dnsZoneId}/record-sets/{recordSet}/actions/set-managed endpoint instead.
func (c *clientImpl) DeprecatedRecordASetManagedByIngress(
	ctx context.Context,
	req DeprecatedRecordASetManagedByIngressRequest,
	reqEditors ...func(req *http.Request) error,
) (*DeprecatedRecordASetManagedByIngressResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response DeprecatedRecordASetManagedByIngressResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// updates cname-record for a specific zone
//
// This operation is deprecated. Use the PUT v2/dns-zones/{dnsZoneId}/record-sets/{recordSet} endpoint instead.
func (c *clientImpl) DeprecatedRecordCnameSet(
	ctx context.Context,
	req DeprecatedRecordCnameSetRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// updates mx-records for a specific zone
//
// This operation is deprecated. Use the PUT v2/dns-zones/{dnsZoneId}/record-sets/{recordSet} endpoint instead.
func (c *clientImpl) DeprecatedRecordMxSetCustom(
	ctx context.Context,
	req DeprecatedRecordMxSetCustomRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// sets mx-records to managed for a specific zone
//
// This operation is deprecated. Use the POST v2/dns-zones/{dnsZoneId}/record-sets/{recordSet}/actions/set-managed endpoint instead.
func (c *clientImpl) DeprecatedRecordMxSetManaged(
	ctx context.Context,
	req DeprecatedRecordMxSetManagedRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// updates srv-records for a specific zone
//
// This operation is deprecated. Use the PUT v2/dns-zones/{dnsZoneId}/record-sets/{recordSet} endpoint instead.
func (c *clientImpl) DeprecatedRecordSrvSet(
	ctx context.Context,
	req DeprecatedRecordSrvSetRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// updates txt-records for a specific zone
//
// This operation is deprecated. Use the PUT v2/dns-zones/{dnsZoneId}/record-sets/{recordSet} endpoint instead.
func (c *clientImpl) DeprecatedRecordTxtSet(
	ctx context.Context,
	req DeprecatedRecordTxtSetRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Change the owner contact of a domain.
//
// This operation is deprecated. Use the PATCH /v2/domains/{domainId}/contacts/{contact} endpoint instead.
func (c *clientImpl) DeprecatedChangeOwnercOfDomain(
	ctx context.Context,
	req DeprecatedChangeOwnercOfDomainRequest,
	reqEditors ...func(req *http.Request) error,
) (*DeprecatedChangeOwnercOfDomainResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response DeprecatedChangeOwnercOfDomainResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Change the Project relation of a Domain.
//
// This operation is deprecated. Use the PATCH /v2/domains/{domainId}/project-id endpoint instead.
func (c *clientImpl) DeprecatedChangeProjectOfDomain(
	ctx context.Context,
	req DeprecatedChangeProjectOfDomainRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// List Domains
func (c *clientImpl) ListDomains(
	ctx context.Context,
	req ListDomainsRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]domainv2.Domain, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []domainv2.Domain
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Check if a Domain is available to register.
//
// This operation is deprecated. Use the POST /v2/domain-registrable endpoint instead.
func (c *clientImpl) DeprecatedCheckDomainRegistrability(
	ctx context.Context,
	req DeprecatedCheckDomainRegistrabilityRequest,
	reqEditors ...func(req *http.Request) error,
) (*DeprecatedCheckDomainRegistrabilityResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response DeprecatedCheckDomainRegistrabilityResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Change all nameservers of a Domain.
//
// This operation is deprecated. Use the PATCH /v2/domains/{domainId}/nameservers endpoint instead.
func (c *clientImpl) DeprecatedDeclareNameservers(
	ctx context.Context,
	req DeprecatedDeclareNameserversRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Update the nameservers of a Domain.
func (c *clientImpl) UpdateDomainNameservers(
	ctx context.Context,
	req UpdateDomainNameserversRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Update an AuthCode.
//
// This operation is deprecated. Use the PATCH /v2/domains/{domainId}/auth-code endpoint instead.
func (c *clientImpl) DeprecatedDeclareProcessChangeAuthcode(
	ctx context.Context,
	req DeprecatedDeclareProcessChangeAuthcodeRequest,
	reqEditors ...func(req *http.Request) error,
) (*DeprecatedDeclareProcessChangeAuthcodeResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response DeprecatedDeclareProcessChangeAuthcodeResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Update a Domain's OwnerC handle.
//
// This operation is deprecated and does not have an alternative.
func (c *clientImpl) DeprecatedDeclareProcessChangeHandles(
	ctx context.Context,
	req DeprecatedDeclareProcessChangeHandlesRequest,
	reqEditors ...func(req *http.Request) error,
) (*DeprecatedDeclareProcessChangeHandlesResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response DeprecatedDeclareProcessChangeHandlesResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get a HandleSchema.
//
// This operation is deprecated. Use the GET /v2/domain-tlds/{tld}/contact-schemas endpoint instead.
func (c *clientImpl) DeprecatedGetHandleFields(
	ctx context.Context,
	req DeprecatedGetHandleFieldsRequest,
	reqEditors ...func(req *http.Request) error,
) (*DeprecatedGetHandleFieldsResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response DeprecatedGetHandleFieldsResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get File Service Reference for a Screenshot of a domain.
//
// Deprecated by `GET /v2/domains/{domainId}/latest-screenshot`.
func (c *clientImpl) DeprecatedGetScreenshotForDomain(
	ctx context.Context,
	req DeprecatedGetScreenshotForDomainRequest,
	reqEditors ...func(req *http.Request) error,
) (*DeprecatedGetScreenshotForDomainResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response DeprecatedGetScreenshotForDomainResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// List Domains belonging to a Project.
//
// This operation is deprecated. Use the GET /v2/domains endpoint instead.
func (c *clientImpl) DeprecatedListDomains(
	ctx context.Context,
	req DeprecatedListDomainsRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]domainv2.Domain, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []domainv2.Domain
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// List Ingresses belonging to a project.
//
// This operation is deprecated. Use the GET /v2/ingresses endpoint instead.
func (c *clientImpl) DeprecatedListIngresses(
	ctx context.Context,
	req DeprecatedListIngressesRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]ingressv2.IngressDeprecated, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []ingressv2.IngressDeprecated
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Update an Ingresses paths.
//
// This operation is deprecated. Use the PATCH /v2/ingresses/{ingressId}/paths endpoint instead.
func (c *clientImpl) DeprecatedPaths(
	ctx context.Context,
	req DeprecatedPathsRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Update the paths of an Ingress.
func (c *clientImpl) UpdateIngressPaths(
	ctx context.Context,
	req UpdateIngressPathsRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Update an Ingresses tls settings.
//
// This operation is deprecated. Use the PATCH /v2/ingresses/{ingressId}/tls endpoint instead.
func (c *clientImpl) DeprecatedTLS(
	ctx context.Context,
	req DeprecatedTLSRequest,
	reqEditors ...func(req *http.Request) error,
) (*DeprecatedTLSResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response DeprecatedTLSResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Update the tls settings of an Ingress.
func (c *clientImpl) UpdateIngressTLS(
	ctx context.Context,
	req UpdateIngressTLSRequest,
	reqEditors ...func(req *http.Request) error,
) (*UpdateIngressTLSResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response UpdateIngressTLSResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Create a DNSZone.
func (c *clientImpl) CreateDNSZone(
	ctx context.Context,
	req CreateDNSZoneRequest,
	reqEditors ...func(req *http.Request) error,
) (*CreateDNSZoneResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response CreateDNSZoneResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get a DNSZone.
func (c *clientImpl) GetDNSZone(
	ctx context.Context,
	req GetDNSZoneRequest,
	reqEditors ...func(req *http.Request) error,
) (*dnsv2.Zone, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response dnsv2.Zone
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Delete a DNSZone.
func (c *clientImpl) DeleteDNSZone(
	ctx context.Context,
	req DeleteDNSZoneRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Get a zone file for a DNSZone.
//
// Returns a BIND-compliant DNS zone file per RFC 1035 for the specified dnsZoneId, including all sub zone information. Entering the dnsZoneId of a sub zone will result in an error.
func (c *clientImpl) GetZoneFile(
	ctx context.Context,
	req GetZoneFileRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// List DNSZones belonging to a Project.
func (c *clientImpl) ListDNSZones(
	ctx context.Context,
	req ListDNSZonesRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]dnsv2.Zone, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []dnsv2.Zone
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Set a record set on a DNSZone to managed.
func (c *clientImpl) SetRecordSetManaged(
	ctx context.Context,
	req SetRecordSetManagedRequest,
	reqEditors ...func(req *http.Request) error,
) (*SetRecordSetManagedResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response SetRecordSetManagedResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Update a record set on a DNSZone.
func (c *clientImpl) UpdateRecordSet(
	ctx context.Context,
	req UpdateRecordSetRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Abort a Domain declaration.
//
// Abort an incomplete Domain registration/transfer.
func (c *clientImpl) AbortDomainDeclaration(
	ctx context.Context,
	req AbortDomainDeclarationRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Check if a Domain is available to register.
//
// If false, you have to start a transfer with an auth code instead.
func (c *clientImpl) CheckDomainRegistrability(
	ctx context.Context,
	req CheckDomainRegistrabilityRequest,
	reqEditors ...func(req *http.Request) error,
) (*CheckDomainRegistrabilityResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response CheckDomainRegistrabilityResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Check if a Domain is available to transfer.
//
// For some TLDs (e.g., .de), transferability cannot be evaluated. In these cases, transferable = true is returned.
func (c *clientImpl) CheckDomainTransferability(
	ctx context.Context,
	req CheckDomainTransferabilityRequest,
	reqEditors ...func(req *http.Request) error,
) (*CheckDomainTransferabilityResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response CheckDomainTransferabilityResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Create an auth code for a Domains transfer-out process.
func (c *clientImpl) CreateDomainAuthCode(
	ctx context.Context,
	req CreateDomainAuthCodeRequest,
	reqEditors ...func(req *http.Request) error,
) (*CreateDomainAuthCodeResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response CreateDomainAuthCodeResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get a Domain.
func (c *clientImpl) GetDomain(
	ctx context.Context,
	req GetDomainRequest,
	reqEditors ...func(req *http.Request) error,
) (*domainv2.Domain, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response domainv2.Domain
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Delete a Domain.
func (c *clientImpl) DeleteDomain(
	ctx context.Context,
	req DeleteDomainRequest,
	reqEditors ...func(req *http.Request) error,
) (*DeleteDomainResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response DeleteDomainResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get the latest screenshot's FileReference belonging to a Domain.
func (c *clientImpl) GetLatestScreenshot(
	ctx context.Context,
	req GetLatestScreenshotRequest,
	reqEditors ...func(req *http.Request) error,
) (*GetLatestScreenshotResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response GetLatestScreenshotResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// List the contact schemas for a TLD.
//
// List the contact schemas describing the fields required to register/transfer a Domain.
func (c *clientImpl) ListTldContactSchemas(
	ctx context.Context,
	req ListTldContactSchemasRequest,
	reqEditors ...func(req *http.Request) error,
) (*ListTldContactSchemasResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response ListTldContactSchemasResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// List TLDs.
//
// List the top level domains currently supported by our API.
func (c *clientImpl) ListTlds(
	ctx context.Context,
	req ListTldsRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]domainv2.TopLevel, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []domainv2.TopLevel
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Resend a Domain email.
//
// Trigger a resend of a confirmation or registrant verification email. Has no effect on .de Domains.
func (c *clientImpl) ResendDomainEmail(
	ctx context.Context,
	req ResendDomainEmailRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Suggest a list of domains based on a prompt using AI.
func (c *clientImpl) Suggest(
	ctx context.Context,
	req SuggestRequest,
	reqEditors ...func(req *http.Request) error,
) (*domainv2.SuggestedDomains, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response domainv2.SuggestedDomains
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Update the auth code of a Domain.
//
// Update an incorrect auth code of an ongoing/failed Domain transfer. This route will also restart the transfer itself.
func (c *clientImpl) UpdateDomainAuthCode(
	ctx context.Context,
	req UpdateDomainAuthCodeRequest,
	reqEditors ...func(req *http.Request) error,
) (*UpdateDomainAuthCodeResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response UpdateDomainAuthCodeResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Update a contact of a Domain.
func (c *clientImpl) UpdateDomainContact(
	ctx context.Context,
	req UpdateDomainContactRequest,
	reqEditors ...func(req *http.Request) error,
) (*UpdateDomainContactResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response UpdateDomainContactResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Update a Domain's project id.
func (c *clientImpl) UpdateDomainProjectID(
	ctx context.Context,
	req UpdateDomainProjectIDRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// List Ingresses.
func (c *clientImpl) ListIngresses(
	ctx context.Context,
	req ListIngressesRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]ingressv2.Ingress, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []ingressv2.Ingress
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Create an Ingress.
func (c *clientImpl) CreateIngress(
	ctx context.Context,
	req CreateIngressRequest,
	reqEditors ...func(req *http.Request) error,
) (*CreateIngressResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response CreateIngressResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get an Ingress.
func (c *clientImpl) GetIngress(
	ctx context.Context,
	req GetIngressRequest,
	reqEditors ...func(req *http.Request) error,
) (*ingressv2.Ingress, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response ingressv2.Ingress
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Delete an Ingress.
func (c *clientImpl) DeleteIngress(
	ctx context.Context,
	req DeleteIngressRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Verifiy the ownership of an Ingress.
func (c *clientImpl) IngressVerifyOwnership(
	ctx context.Context,
	req IngressVerifyOwnershipRequest,
	reqEditors ...func(req *http.Request) error,
) (*IngressVerifyOwnershipResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response IngressVerifyOwnershipResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// List Ingresses compatible with a certificate.
//
// List Ingresses in a Project compatible with a certificate.
func (c *clientImpl) ListIngressesCompatibleWithCertificate(
	ctx context.Context,
	req ListIngressesCompatibleWithCertificateRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]ingressv2.Ingress, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []ingressv2.Ingress
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Request the ACME certificate issuance of an Ingress.
func (c *clientImpl) RequestIngressAcmeCertificateIssuance(
	ctx context.Context,
	req RequestIngressAcmeCertificateIssuanceRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Check the replacement of a Certificate.
//
// Checks the replacement of a Certificate and shows differences between the current and the new Certificate.
func (c *clientImpl) CheckReplaceCertificate(
	ctx context.Context,
	req CheckReplaceCertificateRequest,
	reqEditors ...func(req *http.Request) error,
) (*sslv2.CheckReplaceCertificateResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response sslv2.CheckReplaceCertificateResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// List CertificateRequests belonging to a Project or an Ingress.
func (c *clientImpl) ListCertificateRequests(
	ctx context.Context,
	req ListCertificateRequestsRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]sslv2.CertificateRequest, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []sslv2.CertificateRequest
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Create a CertificateRequest.
func (c *clientImpl) CreateCertificateRequest(
	ctx context.Context,
	req CreateCertificateRequestRequest,
	reqEditors ...func(req *http.Request) error,
) (*sslv2.CertificateRequestCreateResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response sslv2.CertificateRequestCreateResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Delete a CertificateRequest.
func (c *clientImpl) DeleteCertificateRequest(
	ctx context.Context,
	req DeleteCertificateRequestRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Delete a Certificate.
func (c *clientImpl) DeleteCertificate(
	ctx context.Context,
	req DeleteCertificateRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Get a CertificateRequest.
func (c *clientImpl) GetCertificateRequest(
	ctx context.Context,
	req GetCertificateRequestRequest,
	reqEditors ...func(req *http.Request) error,
) (*sslv2.CertificateRequest, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response sslv2.CertificateRequest
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get a Certificate.
func (c *clientImpl) GetCertificate(
	ctx context.Context,
	req GetCertificateRequest,
	reqEditors ...func(req *http.Request) error,
) (*sslv2.Certificate, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response sslv2.Certificate
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Update a Certificate.
func (c *clientImpl) ReplaceCertificate(
	ctx context.Context,
	req ReplaceCertificateRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// List Certificates belonging to a Project or an Ingress.
func (c *clientImpl) ListCertificates(
	ctx context.Context,
	req ListCertificatesRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]sslv2.Certificate, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []sslv2.Certificate
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Update the certificate of a CertificateRequest.
func (c *clientImpl) SetCertificateRequestCertificate(
	ctx context.Context,
	req SetCertificateRequestCertificateRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Create a scheduled deletion of a Domain.
func (c *clientImpl) CreateScheduledDeletion(
	ctx context.Context,
	req CreateScheduledDeletionRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Cancel a scheduled deletion of a Domain.
func (c *clientImpl) CancelScheduledDeletion(
	ctx context.Context,
	req CancelScheduledDeletionRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}
