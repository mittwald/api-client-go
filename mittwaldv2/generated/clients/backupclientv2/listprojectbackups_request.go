package backupclientv2

import (
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/backupv2"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// ListProjectBackupsRequest models a request for the 'backup-list-project-backups'
// operation. See [1] for more information.
//
// List Backups belonging to a Project.
//
// [1]:
// https://developer.mittwald.de/docs/v2/reference/backup/backup-list-project-backups
type ListProjectBackupsRequest struct {
	ProjectID       string
	SearchTerm      *string
	WithExportsOnly *bool
	SortOrder       *backupv2.BackupSortOrder
	Limit           *int64
	Skip            *int64
	Page            *int64
}

// BuildRequest builds an *http.Request instance from this request that may be used
// with any regular *http.Client instance.
func (r *ListProjectBackupsRequest) BuildRequest() (*http.Request, error) {
	body, contentType, err := r.body()
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodGet, r.url(), body)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", contentType)
	return req, nil
}

func (r *ListProjectBackupsRequest) body() (io.Reader, string, error) {
	return nil, "", nil
}

func (r *ListProjectBackupsRequest) url() string {
	u := url.URL{
		Path:     fmt.Sprintf("/v2/projects/%s/backups", url.PathEscape(r.ProjectID)),
		RawQuery: r.query().Encode(),
	}
	return u.String()
}

func (r *ListProjectBackupsRequest) query() url.Values {
	q := make(url.Values)
	if r.SearchTerm != nil {
		q.Set("searchTerm", *r.SearchTerm)
	}
	if r.WithExportsOnly != nil {
		q.Set("withExportsOnly", strconv.FormatBool(*r.WithExportsOnly))
	}
	if r.SortOrder != nil {
		q.Set("sortOrder", string(*r.SortOrder))
	}
	if r.Limit != nil {
		q.Set("limit", fmt.Sprintf("%d", *r.Limit))
	}
	if r.Skip != nil {
		q.Set("skip", fmt.Sprintf("%d", *r.Skip))
	}
	if r.Page != nil {
		q.Set("page", fmt.Sprintf("%d", *r.Page))
	}
	return q
}
