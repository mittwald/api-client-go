package article

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/articlev1"
	"github.com/mittwald/api-client-go/mittwaldv2/httpclient"
	"github.com/mittwald/api-client-go/mittwaldv2/httperr"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

type Client interface {
	GetArticle(
		ctx context.Context,
		req GetArticleRequest,
	) (*articlev1.ReadableArticle, *http.Response, error)
	ListArticles(
		ctx context.Context,
		req ListArticlesRequest,
	) (*[]articlev1.ReadableArticle, *http.Response, error)
}
type clientImpl struct {
	client httpclient.RequestRunner
}

func NewClient(client httpclient.RequestRunner) Client {
	return &clientImpl{client: client}
}

//Get an Article.
func (c *clientImpl) GetArticle(
	ctx context.Context,
	req GetArticleRequest,
) (*articlev1.ReadableArticle, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response articlev1.ReadableArticle
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//List Articles.
func (c *clientImpl) ListArticles(
	ctx context.Context,
	req ListArticlesRequest,
) (*[]articlev1.ReadableArticle, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response []articlev1.ReadableArticle
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}
