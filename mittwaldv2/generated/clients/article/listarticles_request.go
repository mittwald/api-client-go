package article

import (
	"fmt"
	"io"
	"net/http"
	"net/url"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

type ListArticlesRequest struct {
	CustomerID    *string
	Tags          []string
	TemplateNames []string
	ArticleIDs    []string
	Orderable     []ListArticlesRequestQueryOrderableItem
	Name          *string
	Limit         *int64
	Skip          *int64
	Page          *int64
}

func (r *ListArticlesRequest) BuildRequest() (*http.Request, error) {
	body, err := r.body()
	if err != nil {
		return nil, err
	}

	return http.NewRequest(http.MethodGet, r.url(), body)
}

func (r *ListArticlesRequest) body() (io.Reader, error) {
	return nil, nil
}

func (r *ListArticlesRequest) url() string {
	return "/v2/articles"
}

func (r *ListArticlesRequest) query() url.Values {
	q := make(url.Values)
	if r.CustomerID != nil {
		q.Set("customerId", *r.CustomerID)
	}
	for _, val := range r.Tags {
		q.Add("tags", val)
	}
	for _, val := range r.TemplateNames {
		q.Add("templateNames", val)
	}
	for _, val := range r.ArticleIDs {
		q.Add("articleIds", val)
	}
	for _, val := range r.Orderable {
		q.Add("orderable", string(val))
	}
	if r.Name != nil {
		q.Set("name", *r.Name)
	}
	if r.Limit != nil {
		q.Set("limit", fmt.Sprintf("%d", *r.Limit))
	}
	if r.Skip != nil {
		q.Set("skip", fmt.Sprintf("%d", *r.Skip))
	}
	if r.Page != nil {
		q.Set("page", fmt.Sprintf("%d", *r.Page))
	}
	return q
}
