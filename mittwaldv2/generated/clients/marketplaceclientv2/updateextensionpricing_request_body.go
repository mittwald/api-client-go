package marketplaceclientv2

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// This data type was generated from the following JSON schema:
// oneOf:
//    - type: "object"
//      properties:
//        "dryRun":
//            type: "boolean"
//            description: "If set to true, the request will be validated but not executed."
//            default: false
//        "priceInCents":
//            type: "number"
//            description: "Price in cents."
//      required:
//        - "priceInCents"
//    - type: "object"
//      properties:
//        "dryRun":
//            type: "boolean"
//            description: "If set to true, the request will be validated but not executed."
//            default: false
//        "pricePlan": {"$ref": "#/components/schemas/de.mittwald.v1.extension.PricePlan"}
//      required:
//        - "pricePlan"
// description: UpdateExtensionPricingRequestBody models the JSON body of a 'extension-update-extension-pricing' request

type UpdateExtensionPricingRequestBody struct {
	AlternativeUpdateExtensionPricingRequestBodyAlternative1 *UpdateExtensionPricingRequestBodyAlternative1
	AlternativeUpdateExtensionPricingRequestBodyAlternative2 *UpdateExtensionPricingRequestBodyAlternative2
}

func (a *UpdateExtensionPricingRequestBody) MarshalJSON() ([]byte, error) {
	if a.AlternativeUpdateExtensionPricingRequestBodyAlternative1 != nil {
		return json.Marshal(a.AlternativeUpdateExtensionPricingRequestBodyAlternative1)
	}
	if a.AlternativeUpdateExtensionPricingRequestBodyAlternative2 != nil {
		return json.Marshal(a.AlternativeUpdateExtensionPricingRequestBodyAlternative2)
	}
	return []byte("null"), nil
}

func (a *UpdateExtensionPricingRequestBody) UnmarshalJSON(input []byte) error {
	reader := bytes.NewReader(input)
	decodedAtLeastOnce := false
	dec := json.NewDecoder(reader)
	dec.DisallowUnknownFields()

	reader.Reset(input)
	var alternativeUpdateExtensionPricingRequestBodyAlternative1 UpdateExtensionPricingRequestBodyAlternative1
	if err := dec.Decode(&alternativeUpdateExtensionPricingRequestBodyAlternative1); err == nil {
		//subtype: *generator.ObjectType
		if vErr := alternativeUpdateExtensionPricingRequestBodyAlternative1.Validate(); vErr == nil {
			a.AlternativeUpdateExtensionPricingRequestBodyAlternative1 = &alternativeUpdateExtensionPricingRequestBodyAlternative1
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeUpdateExtensionPricingRequestBodyAlternative2 UpdateExtensionPricingRequestBodyAlternative2
	if err := dec.Decode(&alternativeUpdateExtensionPricingRequestBodyAlternative2); err == nil {
		//subtype: *generator.ObjectType
		if vErr := alternativeUpdateExtensionPricingRequestBodyAlternative2.Validate(); vErr == nil {
			a.AlternativeUpdateExtensionPricingRequestBodyAlternative2 = &alternativeUpdateExtensionPricingRequestBodyAlternative2
			decodedAtLeastOnce = true
		}
	}

	if !decodedAtLeastOnce {
		return fmt.Errorf("could not unmarshal into any alternative for type %T", a)
	}
	return nil
}

func (a *UpdateExtensionPricingRequestBody) Validate() error {
	if a.AlternativeUpdateExtensionPricingRequestBodyAlternative1 != nil {
		return a.AlternativeUpdateExtensionPricingRequestBodyAlternative1.Validate()
	}
	if a.AlternativeUpdateExtensionPricingRequestBodyAlternative2 != nil {
		return a.AlternativeUpdateExtensionPricingRequestBodyAlternative2.Validate()
	}
	return errors.New("no alternative set")
}
