package notificationclientv2

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/messagingv2"
	"github.com/mittwald/api-client-go/pkg/httpclient"
	"github.com/mittwald/api-client-go/pkg/httperr"
)

type Client interface {
	NewsletterSubscribeUser(
		ctx context.Context,
		req NewsletterSubscribeUserRequest,
		reqEditors ...func(req *http.Request) error,
	) (*NewsletterSubscribeUserResponse, *http.Response, error)
	NewsletterGetInfo(
		ctx context.Context,
		req NewsletterGetInfoRequest,
		reqEditors ...func(req *http.Request) error,
	) (*NewsletterGetInfoResponse, *http.Response, error)
	NewsletterUnsubscribeUser(
		ctx context.Context,
		req NewsletterUnsubscribeUserRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	CountUnreadNotifications(
		ctx context.Context,
		req CountUnreadNotificationsRequest,
		reqEditors ...func(req *http.Request) error,
	) (*CountUnreadNotificationsResponse, *http.Response, error)
	ListNotifications(
		ctx context.Context,
		req ListNotificationsRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]messagingv2.Notification, *http.Response, error)
	ReadAllNotificationsDeprecated(
		ctx context.Context,
		req ReadAllNotificationsDeprecatedRequest,
		reqEditors ...func(req *http.Request) error,
	) (*ReadAllNotificationsDeprecatedResponse, *http.Response, error)
	ReadAllNotifications(
		ctx context.Context,
		req ReadAllNotificationsRequest,
		reqEditors ...func(req *http.Request) error,
	) (*ReadAllNotificationsResponse, *http.Response, error)
	ReadNotification(
		ctx context.Context,
		req ReadNotificationRequest,
		reqEditors ...func(req *http.Request) error,
	) (*ReadNotificationResponse, *http.Response, error)
}
type clientImpl struct {
	client httpclient.RequestRunner
}

func NewClient(client httpclient.RequestRunner) Client {
	return &clientImpl{client: client}
}

// Subscribe a user to the mStudio newsletter.
func (c *clientImpl) NewsletterSubscribeUser(
	ctx context.Context,
	req NewsletterSubscribeUserRequest,
	reqEditors ...func(req *http.Request) error,
) (*NewsletterSubscribeUserResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response NewsletterSubscribeUserResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Getting the subscription status of the subscription.
func (c *clientImpl) NewsletterGetInfo(
	ctx context.Context,
	req NewsletterGetInfoRequest,
	reqEditors ...func(req *http.Request) error,
) (*NewsletterGetInfoResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response NewsletterGetInfoResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Unsubscribe a user from the mStudio newsletter.
func (c *clientImpl) NewsletterUnsubscribeUser(
	ctx context.Context,
	req NewsletterUnsubscribeUserRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Get the counts for unread notifications of the user.
//
// The user is determined by the access token used.
// Lighter weight route instead of getting all unread notifications and count yourself.
func (c *clientImpl) CountUnreadNotifications(
	ctx context.Context,
	req CountUnreadNotificationsRequest,
	reqEditors ...func(req *http.Request) error,
) (*CountUnreadNotificationsResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response CountUnreadNotificationsResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// List all unread notifications.
func (c *clientImpl) ListNotifications(
	ctx context.Context,
	req ListNotificationsRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]messagingv2.Notification, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []messagingv2.Notification
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Mark all notifications as read (deprecated).
//
// Deprecated route. Please use /v2/notifications/actions/read-all instead.
func (c *clientImpl) ReadAllNotificationsDeprecated(
	ctx context.Context,
	req ReadAllNotificationsDeprecatedRequest,
	reqEditors ...func(req *http.Request) error,
) (*ReadAllNotificationsDeprecatedResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response ReadAllNotificationsDeprecatedResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Mark all notifications as read.
//
// Mark all notifications for the authenticated user as read.
func (c *clientImpl) ReadAllNotifications(
	ctx context.Context,
	req ReadAllNotificationsRequest,
	reqEditors ...func(req *http.Request) error,
) (*ReadAllNotificationsResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response ReadAllNotificationsResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Mark notification as read.
func (c *clientImpl) ReadNotification(
	ctx context.Context,
	req ReadNotificationRequest,
	reqEditors ...func(req *http.Request) error,
) (*ReadNotificationResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response ReadNotificationResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}
