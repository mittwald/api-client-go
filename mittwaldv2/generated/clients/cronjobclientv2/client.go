package cronjobclientv2

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/cronjobv2"
	"github.com/mittwald/api-client-go/pkg/httpclient"
	"github.com/mittwald/api-client-go/pkg/httperr"
)

type Client interface {
	AbortExecution(
		ctx context.Context,
		req AbortExecutionRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	ListCronjobs(
		ctx context.Context,
		req ListCronjobsRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]cronjobv2.Cronjob, *http.Response, error)
	CreateCronjob(
		ctx context.Context,
		req CreateCronjobRequest,
		reqEditors ...func(req *http.Request) error,
	) (*CreateCronjobResponse, *http.Response, error)
	ListExecutions(
		ctx context.Context,
		req ListExecutionsRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]cronjobv2.CronjobExecution, *http.Response, error)
	CreateExecution(
		ctx context.Context,
		req CreateExecutionRequest,
		reqEditors ...func(req *http.Request) error,
	) (*CreateExecutionResponse, *http.Response, error)
	GetCronjob(
		ctx context.Context,
		req GetCronjobRequest,
		reqEditors ...func(req *http.Request) error,
	) (*cronjobv2.Cronjob, *http.Response, error)
	DeleteCronjob(
		ctx context.Context,
		req DeleteCronjobRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	UpdateCronjob(
		ctx context.Context,
		req UpdateCronjobRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	GetExecution(
		ctx context.Context,
		req GetExecutionRequest,
		reqEditors ...func(req *http.Request) error,
	) (*cronjobv2.CronjobExecution, *http.Response, error)
	UpdateCronjobAppID(
		ctx context.Context,
		req UpdateCronjobAppIDRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
}
type clientImpl struct {
	client httpclient.RequestRunner
}

func NewClient(client httpclient.RequestRunner) Client {
	return &clientImpl{client: client}
}

// Abort a CronjobExecution.
func (c *clientImpl) AbortExecution(
	ctx context.Context,
	req AbortExecutionRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// List Cronjobs belonging to a Project.
func (c *clientImpl) ListCronjobs(
	ctx context.Context,
	req ListCronjobsRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]cronjobv2.Cronjob, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []cronjobv2.Cronjob
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Create a Cronjob.
func (c *clientImpl) CreateCronjob(
	ctx context.Context,
	req CreateCronjobRequest,
	reqEditors ...func(req *http.Request) error,
) (*CreateCronjobResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response CreateCronjobResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// List CronjobExecutions belonging to a Cronjob.
func (c *clientImpl) ListExecutions(
	ctx context.Context,
	req ListExecutionsRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]cronjobv2.CronjobExecution, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []cronjobv2.CronjobExecution
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Trigger a Cronjob.
func (c *clientImpl) CreateExecution(
	ctx context.Context,
	req CreateExecutionRequest,
	reqEditors ...func(req *http.Request) error,
) (*CreateExecutionResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response CreateExecutionResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get a Cronjob.
func (c *clientImpl) GetCronjob(
	ctx context.Context,
	req GetCronjobRequest,
	reqEditors ...func(req *http.Request) error,
) (*cronjobv2.Cronjob, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response cronjobv2.Cronjob
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Delete a Cronjob.
func (c *clientImpl) DeleteCronjob(
	ctx context.Context,
	req DeleteCronjobRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Update a Cronjob.
func (c *clientImpl) UpdateCronjob(
	ctx context.Context,
	req UpdateCronjobRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Get a CronjobExecution.
func (c *clientImpl) GetExecution(
	ctx context.Context,
	req GetExecutionRequest,
	reqEditors ...func(req *http.Request) error,
) (*cronjobv2.CronjobExecution, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response cronjobv2.CronjobExecution
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Update a Cronjob's app id.
func (c *clientImpl) UpdateCronjobAppID(
	ctx context.Context,
	req UpdateCronjobAppIDRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}
