package cronjobclientv2

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/cronjobv2"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

//This data type was generated from the following JSON schema:
// oneOf:
//    - {"$ref": "#/components/schemas/de.mittwald.v1.cronjob.CronjobUrl"}
//    - {"$ref": "#/components/schemas/de.mittwald.v1.cronjob.CronjobCommand"}

type UpdateCronjobRequestBodyDestination struct {
	AlternativeCronjobUrl     *cronjobv2.CronjobUrl
	AlternativeCronjobCommand *cronjobv2.CronjobCommand
}

func (a *UpdateCronjobRequestBodyDestination) MarshalJSON() ([]byte, error) {
	if a.AlternativeCronjobUrl != nil {
		return json.Marshal(a.AlternativeCronjobUrl)
	}
	if a.AlternativeCronjobCommand != nil {
		return json.Marshal(a.AlternativeCronjobCommand)
	}
	return []byte("null"), nil
}

func (a *UpdateCronjobRequestBodyDestination) UnmarshalJSON(input []byte) error {
	reader := bytes.NewReader(input)
	decodedAtLeastOnce := false
	dec := json.NewDecoder(reader)
	dec.DisallowUnknownFields()

	reader.Reset(input)
	var alternativeCronjobUrl cronjobv2.CronjobUrl
	if err := dec.Decode(&alternativeCronjobUrl); err == nil {
		//subtype: *generator.ReferenceType
		if vErr := alternativeCronjobUrl.Validate(); vErr == nil {
			a.AlternativeCronjobUrl = &alternativeCronjobUrl
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeCronjobCommand cronjobv2.CronjobCommand
	if err := dec.Decode(&alternativeCronjobCommand); err == nil {
		//subtype: *generator.ReferenceType
		if vErr := alternativeCronjobCommand.Validate(); vErr == nil {
			a.AlternativeCronjobCommand = &alternativeCronjobCommand
			decodedAtLeastOnce = true
		}
	}

	if !decodedAtLeastOnce {
		return fmt.Errorf("could not unmarshal into any alternative for type %T", a)
	}
	return nil
}

func (a *UpdateCronjobRequestBodyDestination) Validate() error {
	if a.AlternativeCronjobUrl != nil {
		return a.AlternativeCronjobUrl.Validate()
	}
	if a.AlternativeCronjobCommand != nil {
		return a.AlternativeCronjobCommand.Validate()
	}
	return errors.New("no alternative set")
}
