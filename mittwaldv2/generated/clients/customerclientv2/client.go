package customerclientv2

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/agencyprofilev2"
	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/customerv2"
	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/membershipv2"
	"github.com/mittwald/api-client-go/pkg/httpclient"
	"github.com/mittwald/api-client-go/pkg/httperr"
)

type Client interface {
	GetOpenAgencyVerification(
		ctx context.Context,
		req GetOpenAgencyVerificationRequest,
	) (*agencyprofilev2.VerificationRequest, *http.Response, error)
	CreateAgencyVerification(
		ctx context.Context,
		req CreateAgencyVerificationRequest,
	) (*CreateAgencyVerificationResponse, *http.Response, error)
	AbortAgencyVerification(
		ctx context.Context,
		req AbortAgencyVerificationRequest,
	) (*AbortAgencyVerificationResponse, *http.Response, error)
	AcceptCustomerInvite(
		ctx context.Context,
		req AcceptCustomerInviteRequest,
	) (*http.Response, error)
	ListInvitesForCustomer(
		ctx context.Context,
		req ListInvitesForCustomerRequest,
	) (*[]membershipv2.CustomerInvite, *http.Response, error)
	CreateCustomerInvite(
		ctx context.Context,
		req CreateCustomerInviteRequest,
	) (*membershipv2.CustomerInvite, *http.Response, error)
	ListCustomers(
		ctx context.Context,
		req ListCustomersRequest,
	) (*[]customerv2.Customer, *http.Response, error)
	CreateCustomer(
		ctx context.Context,
		req CreateCustomerRequest,
	) (*CreateCustomerResponse, *http.Response, error)
	CreateRecommendationSuggestion(
		ctx context.Context,
		req CreateRecommendationSuggestionRequest,
	) (*CreateRecommendationSuggestionResponse, *http.Response, error)
	GetWallet(
		ctx context.Context,
		req GetWalletRequest,
	) (*GetWalletResponse, *http.Response, error)
	CreateWallet(
		ctx context.Context,
		req CreateWalletRequest,
	) (*CreateWalletResponse, *http.Response, error)
	DeclineCustomerInvite(
		ctx context.Context,
		req DeclineCustomerInviteRequest,
	) (*http.Response, error)
	GetCustomerInvite(
		ctx context.Context,
		req GetCustomerInviteRequest,
	) (*membershipv2.CustomerInvite, *http.Response, error)
	DeleteCustomerInvite(
		ctx context.Context,
		req DeleteCustomerInviteRequest,
	) (*http.Response, error)
	GetCustomerMembership(
		ctx context.Context,
		req GetCustomerMembershipRequest,
	) (*membershipv2.CustomerMembership, *http.Response, error)
	DeleteCustomerMembership(
		ctx context.Context,
		req DeleteCustomerMembershipRequest,
	) (*http.Response, error)
	UpdateCustomerMembership(
		ctx context.Context,
		req UpdateCustomerMembershipRequest,
	) (*http.Response, error)
	GetCustomer(
		ctx context.Context,
		req GetCustomerRequest,
	) (*customerv2.Customer, *http.Response, error)
	UpdateCustomer(
		ctx context.Context,
		req UpdateCustomerRequest,
	) (*UpdateCustomerResponse, *http.Response, error)
	DeleteCustomer(
		ctx context.Context,
		req DeleteCustomerRequest,
	) (*DeleteCustomerResponse, *http.Response, error)
	GetCustomerTokenInvite(
		ctx context.Context,
		req GetCustomerTokenInviteRequest,
	) (*membershipv2.CustomerInvite, *http.Response, error)
	IsCustomerLegallyCompetent(
		ctx context.Context,
		req IsCustomerLegallyCompetentRequest,
	) (*IsCustomerLegallyCompetentResponse, *http.Response, error)
	ListCustomerInvites(
		ctx context.Context,
		req ListCustomerInvitesRequest,
	) (*[]membershipv2.CustomerInvite, *http.Response, error)
	ListCustomerMemberships(
		ctx context.Context,
		req ListCustomerMembershipsRequest,
	) (*[]membershipv2.CustomerMembership, *http.Response, error)
	ListMembershipsForCustomer(
		ctx context.Context,
		req ListMembershipsForCustomerRequest,
	) (*[]membershipv2.CustomerMembership, *http.Response, error)
	RequestAvatarUpload(
		ctx context.Context,
		req RequestAvatarUploadRequest,
	) (*RequestAvatarUploadResponse, *http.Response, error)
	RemoveAvatar(
		ctx context.Context,
		req RemoveAvatarRequest,
	) (*http.Response, error)
	ResendCustomerInviteMail(
		ctx context.Context,
		req ResendCustomerInviteMailRequest,
	) (*http.Response, error)
	DeprecatedLeaveCustomer(
		ctx context.Context,
		req DeprecatedLeaveCustomerRequest,
	) (*http.Response, error)
}
type clientImpl struct {
	client httpclient.RequestRunner
}

func NewClient(client httpclient.RequestRunner) Client {
	return &clientImpl{client: client}
}

// Gets the status of a agency verification request..
func (c *clientImpl) GetOpenAgencyVerification(
	ctx context.Context,
	req GetOpenAgencyVerificationRequest,
) (*agencyprofilev2.VerificationRequest, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response agencyprofilev2.VerificationRequest
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Creates a new agency verification request. Only one active verification can be active at the same time.
func (c *clientImpl) CreateAgencyVerification(
	ctx context.Context,
	req CreateAgencyVerificationRequest,
) (*CreateAgencyVerificationResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response CreateAgencyVerificationResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Abort an open agency verification process
func (c *clientImpl) AbortAgencyVerification(
	ctx context.Context,
	req AbortAgencyVerificationRequest,
) (*AbortAgencyVerificationResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response AbortAgencyVerificationResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Accept a CustomerInvite.
func (c *clientImpl) AcceptCustomerInvite(
	ctx context.Context,
	req AcceptCustomerInviteRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// List Invites belonging to a Customer.
func (c *clientImpl) ListInvitesForCustomer(
	ctx context.Context,
	req ListInvitesForCustomerRequest,
) (*[]membershipv2.CustomerInvite, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []membershipv2.CustomerInvite
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Create a CustomerInvite.
func (c *clientImpl) CreateCustomerInvite(
	ctx context.Context,
	req CreateCustomerInviteRequest,
) (*membershipv2.CustomerInvite, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response membershipv2.CustomerInvite
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get all customer profiles the authenticated user has access to.
func (c *clientImpl) ListCustomers(
	ctx context.Context,
	req ListCustomersRequest,
) (*[]customerv2.Customer, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []customerv2.Customer
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Create a new customer profile.
func (c *clientImpl) CreateCustomer(
	ctx context.Context,
	req CreateCustomerRequest,
) (*CreateCustomerResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response CreateCustomerResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Lets us know your idea for our recommendation programm.
func (c *clientImpl) CreateRecommendationSuggestion(
	ctx context.Context,
	req CreateRecommendationSuggestionRequest,
) (*CreateRecommendationSuggestionResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response CreateRecommendationSuggestionResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Gets the Wallet of the Customer.
func (c *clientImpl) GetWallet(
	ctx context.Context,
	req GetWalletRequest,
) (*GetWalletResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response GetWalletResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Create the Wallet for the Customer.
func (c *clientImpl) CreateWallet(
	ctx context.Context,
	req CreateWalletRequest,
) (*CreateWalletResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response CreateWalletResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Decline a CustomerInvite.
func (c *clientImpl) DeclineCustomerInvite(
	ctx context.Context,
	req DeclineCustomerInviteRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Get a CustomerInvite.
func (c *clientImpl) GetCustomerInvite(
	ctx context.Context,
	req GetCustomerInviteRequest,
) (*membershipv2.CustomerInvite, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response membershipv2.CustomerInvite
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Delete a CustomerInvite.
func (c *clientImpl) DeleteCustomerInvite(
	ctx context.Context,
	req DeleteCustomerInviteRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Get a CustomerMembership.
func (c *clientImpl) GetCustomerMembership(
	ctx context.Context,
	req GetCustomerMembershipRequest,
) (*membershipv2.CustomerMembership, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response membershipv2.CustomerMembership
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Delete a CustomerMembership.
func (c *clientImpl) DeleteCustomerMembership(
	ctx context.Context,
	req DeleteCustomerMembershipRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Update a CustomerMembership.
func (c *clientImpl) UpdateCustomerMembership(
	ctx context.Context,
	req UpdateCustomerMembershipRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Get a customer profile.
func (c *clientImpl) GetCustomer(
	ctx context.Context,
	req GetCustomerRequest,
) (*customerv2.Customer, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response customerv2.Customer
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Update a customer profile.
func (c *clientImpl) UpdateCustomer(
	ctx context.Context,
	req UpdateCustomerRequest,
) (*UpdateCustomerResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response UpdateCustomerResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Delete a customer profile.
func (c *clientImpl) DeleteCustomer(
	ctx context.Context,
	req DeleteCustomerRequest,
) (*DeleteCustomerResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response DeleteCustomerResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get a CustomerInvite by token.
func (c *clientImpl) GetCustomerTokenInvite(
	ctx context.Context,
	req GetCustomerTokenInviteRequest,
) (*membershipv2.CustomerInvite, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response membershipv2.CustomerInvite
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Check if the customer profile has a valid contract partner configured.
func (c *clientImpl) IsCustomerLegallyCompetent(
	ctx context.Context,
	req IsCustomerLegallyCompetentRequest,
) (*IsCustomerLegallyCompetentResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response IsCustomerLegallyCompetentResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// List CustomerInvites belonging to the executing user.
func (c *clientImpl) ListCustomerInvites(
	ctx context.Context,
	req ListCustomerInvitesRequest,
) (*[]membershipv2.CustomerInvite, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []membershipv2.CustomerInvite
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// List CustomerMemberships belonging to the executing user.
func (c *clientImpl) ListCustomerMemberships(
	ctx context.Context,
	req ListCustomerMembershipsRequest,
) (*[]membershipv2.CustomerMembership, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []membershipv2.CustomerMembership
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// List Memberships belonging to a Customer.
func (c *clientImpl) ListMembershipsForCustomer(
	ctx context.Context,
	req ListMembershipsForCustomerRequest,
) (*[]membershipv2.CustomerMembership, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []membershipv2.CustomerMembership
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Request a new avatar upload for the customer profile.
func (c *clientImpl) RequestAvatarUpload(
	ctx context.Context,
	req RequestAvatarUploadRequest,
) (*RequestAvatarUploadResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response RequestAvatarUploadResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Remove the avatar picture of the customer profile.
func (c *clientImpl) RemoveAvatar(
	ctx context.Context,
	req RemoveAvatarRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Resend the mail for a CustomerInvite.
func (c *clientImpl) ResendCustomerInviteMail(
	ctx context.Context,
	req ResendCustomerInviteMailRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Leave a Customer.
//
// Deprecated by `DELETE /v2/customer-memberships/{customerMembershipId}`.
func (c *clientImpl) DeprecatedLeaveCustomer(
	ctx context.Context,
	req DeprecatedLeaveCustomerRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}
