package projectfilesystem

import (
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// ProjectFileSystemGetDirectoriesRequest models a request for the
// 'project-file-system-get-directories' operation. See [1] for more information.
//
// List directories belonging to a Project.
//
// [1]: https://developer.mittwald.de/docs/v2/reference/project file
// system/project-file-system-get-directories
type ProjectFileSystemGetDirectoriesRequest struct {
	ProjectID  string
	Directory  *string
	Name       *string
	Maxdepth   *int64
	Type       []string
	Executable *bool
	Hidden     *bool
}

// BuildRequest builds an *http.Request instance from this request that may be used
// with any regular *http.Client instance.
func (r *ProjectFileSystemGetDirectoriesRequest) BuildRequest() (*http.Request, error) {
	body, err := r.body()
	if err != nil {
		return nil, err
	}

	return http.NewRequest(http.MethodGet, r.url(), body)
}

func (r *ProjectFileSystemGetDirectoriesRequest) body() (io.Reader, error) {
	return nil, nil
}

func (r *ProjectFileSystemGetDirectoriesRequest) url() string {
	return fmt.Sprintf("/v2/projects/%s/filesystem-directories", url.PathEscape(r.ProjectID))
}

func (r *ProjectFileSystemGetDirectoriesRequest) query() url.Values {
	q := make(url.Values)
	if r.Directory != nil {
		q.Set("directory", *r.Directory)
	}
	if r.Name != nil {
		q.Set("name", *r.Name)
	}
	if r.Maxdepth != nil {
		q.Set("max_depth", fmt.Sprintf("%d", *r.Maxdepth))
	}
	for _, val := range r.Type {
		q.Add("type", val)
	}
	if r.Executable != nil {
		q.Set("executable", strconv.FormatBool(*r.Executable))
	}
	if r.Hidden != nil {
		q.Set("hidden", strconv.FormatBool(*r.Hidden))
	}
	return q
}
