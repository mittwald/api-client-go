package miscclientv2

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/llmlocksmithv2"
	"github.com/mittwald/api-client-go/pkg/httpclient"
	"github.com/mittwald/api-client-go/pkg/httperr"
)

type Client interface {
	GetLlmModelsExperimental(
		ctx context.Context,
		req GetLlmModelsExperimentalRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]llmlocksmithv2.Model, *http.Response, error)
	VerificationDetectPhishingEmail(
		ctx context.Context,
		req VerificationDetectPhishingEmailRequest,
		reqEditors ...func(req *http.Request) error,
	) (*VerificationDetectPhishingEmailResponse, *http.Response, error)
	VerificationVerifyAddress(
		ctx context.Context,
		req VerificationVerifyAddressRequest,
		reqEditors ...func(req *http.Request) error,
	) (*VerificationVerifyAddressResponse, *http.Response, error)
	VerificationVerifyCompany(
		ctx context.Context,
		req VerificationVerifyCompanyRequest,
		reqEditors ...func(req *http.Request) error,
	) (*VerificationVerifyCompanyResponse, *http.Response, error)
}
type clientImpl struct {
	client httpclient.RequestRunner
}

func NewClient(client httpclient.RequestRunner) Client {
	return &clientImpl{client: client}
}

// Get a list of currently active llm models.
func (c *clientImpl) GetLlmModelsExperimental(
	ctx context.Context,
	req GetLlmModelsExperimentalRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]llmlocksmithv2.Model, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []llmlocksmithv2.Model
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Check if an email is from mittwald.
//
// Parses the eml-file of an email to check if it is a phishing mail or a valid email from mittwald. In some cases we can't confirm the validity of an email.
func (c *clientImpl) VerificationDetectPhishingEmail(
	ctx context.Context,
	req VerificationDetectPhishingEmailRequest,
	reqEditors ...func(req *http.Request) error,
) (*VerificationDetectPhishingEmailResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response VerificationDetectPhishingEmailResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Check if an address exists.
//
// Only the DACH region is currently supported.
func (c *clientImpl) VerificationVerifyAddress(
	ctx context.Context,
	req VerificationVerifyAddressRequest,
	reqEditors ...func(req *http.Request) error,
) (*VerificationVerifyAddressResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response VerificationVerifyAddressResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Check if a company exists.
//
// Only companies registered in the german company register are currently supported.
func (c *clientImpl) VerificationVerifyCompany(
	ctx context.Context,
	req VerificationVerifyCompanyRequest,
	reqEditors ...func(req *http.Request) error,
) (*VerificationVerifyCompanyResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response VerificationVerifyCompanyResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}
