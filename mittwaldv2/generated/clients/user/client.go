package user

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/policyv1"
	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/pollv1"
	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/signupv1"
	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/userv1"
	"github.com/mittwald/api-client-go/pkg/httpclient"
	"github.com/mittwald/api-client-go/pkg/httperr"
)

type Client interface {
	DeprecatedChangeEmail(
		ctx context.Context,
		req DeprecatedChangeEmailRequest,
	) (*http.Response, error)
	DeprecatedConfirmPasswordReset(
		ctx context.Context,
		req DeprecatedConfirmPasswordResetRequest,
	) (*http.Response, error)
	DeprecatedCreateIssue(
		ctx context.Context,
		req DeprecatedCreateIssueRequest,
	) (*DeprecatedCreateIssueResponse, *http.Response, error)
	DeprecatedEditAPIToken(
		ctx context.Context,
		req DeprecatedEditAPITokenRequest,
	) (*http.Response, error)
	DeprecatedDeleteAPIToken(
		ctx context.Context,
		req DeprecatedDeleteAPITokenRequest,
	) (*http.Response, error)
	DeprecatedEditSSHKey(
		ctx context.Context,
		req DeprecatedEditSSHKeyRequest,
	) (*http.Response, error)
	DeprecatedDeleteSSHKey(
		ctx context.Context,
		req DeprecatedDeleteSSHKeyRequest,
	) (*http.Response, error)
	DeprecatedDisableMFA(
		ctx context.Context,
		req DeprecatedDisableMFARequest,
	) (*DeprecatedDisableMFAResponse, *http.Response, error)
	DeprecatedUpdateAccount(
		ctx context.Context,
		req DeprecatedUpdateAccountRequest,
	) (*http.Response, error)
	DeprecatedGetOwnAccount(
		ctx context.Context,
		req DeprecatedGetOwnAccountRequest,
	) (*signupv1.Account, *http.Response, error)
	UpdateAccount(
		ctx context.Context,
		req UpdateAccountRequest,
	) (*http.Response, error)
	DeprecatedInitPasswordReset(
		ctx context.Context,
		req DeprecatedInitPasswordResetRequest,
	) (*http.Response, error)
	DeprecatedLogout(
		ctx context.Context,
		req DeprecatedLogoutRequest,
	) (*http.Response, error)
	DeprecatedResendVerificationEmail(
		ctx context.Context,
		req DeprecatedResendVerificationEmailRequest,
	) (*http.Response, error)
	DeprecatedServiceAvatarRequestUpload(
		ctx context.Context,
		req DeprecatedServiceAvatarRequestUploadRequest,
	) (*DeprecatedServiceAvatarRequestUploadResponse, *http.Response, error)
	DeprecatedServiceAvatarRemove(
		ctx context.Context,
		req DeprecatedServiceAvatarRemoveRequest,
	) (*http.Response, error)
	DeprecatedServiceFeedbackList(
		ctx context.Context,
		req DeprecatedServiceFeedbackListRequest,
	) (*[]userv1.UserFeedback, *http.Response, error)
	DeprecatedServiceFeedbackCreate(
		ctx context.Context,
		req DeprecatedServiceFeedbackCreateRequest,
	) (*DeprecatedServiceFeedbackCreateResponse, *http.Response, error)
	DeprecatedServiceIssueNew(
		ctx context.Context,
		req DeprecatedServiceIssueNewRequest,
	) (*http.Response, error)
	DeprecatedServiceUserGet(
		ctx context.Context,
		req DeprecatedServiceUserGetRequest,
	) (*userv1.User, *http.Response, error)
	DeprecatedServicePersonalInformationUpdate(
		ctx context.Context,
		req DeprecatedServicePersonalInformationUpdateRequest,
	) (*http.Response, error)
	DeprecatedServicePersonalizedSettingsGet(
		ctx context.Context,
		req DeprecatedServicePersonalizedSettingsGetRequest,
	) (*DeprecatedServicePersonalizedSettingsGetResponse, *http.Response, error)
	DeprecatedServicePersonalizedSettingsUpdate(
		ctx context.Context,
		req DeprecatedServicePersonalizedSettingsUpdateRequest,
	) (*http.Response, error)
	DeprecatedServicePhoneNumberAdd(
		ctx context.Context,
		req DeprecatedServicePhoneNumberAddRequest,
	) (*http.Response, error)
	DeprecatedServicePhoneNumberRemove(
		ctx context.Context,
		req DeprecatedServicePhoneNumberRemoveRequest,
	) (*http.Response, error)
	DeprecatedServicePhoneNumberVerify(
		ctx context.Context,
		req DeprecatedServicePhoneNumberVerifyRequest,
	) (*http.Response, error)
	DeprecatedServiceUserGetOwn(
		ctx context.Context,
		req DeprecatedServiceUserGetOwnRequest,
	) (*userv1.User, *http.Response, error)
	DeprecatedTerminateAllSessions(
		ctx context.Context,
		req DeprecatedTerminateAllSessionsRequest,
	) (*http.Response, error)
	DeprecatedTerminateSession(
		ctx context.Context,
		req DeprecatedTerminateSessionRequest,
	) (*http.Response, error)
	DeprecatedVerifyEmail(
		ctx context.Context,
		req DeprecatedVerifyEmailRequest,
	) (*http.Response, error)
	PasswordValidationGetPasswordPolicy(
		ctx context.Context,
		req PasswordValidationGetPasswordPolicyRequest,
	) (*policyv1.Policy, *http.Response, error)
	PasswordValidationGetPasswordPolicyV2Deprecated(
		ctx context.Context,
		req PasswordValidationGetPasswordPolicyV2DeprecatedRequest,
	) (*policyv1.Policy, *http.Response, error)
	AddPhoneNumber(
		ctx context.Context,
		req AddPhoneNumberRequest,
	) (*http.Response, error)
	RemovePhoneNumber(
		ctx context.Context,
		req RemovePhoneNumberRequest,
	) (*http.Response, error)
	AuthenticateMFA(
		ctx context.Context,
		req AuthenticateMFARequest,
	) (*AuthenticateMFAResponse, *http.Response, error)
	Authenticate(
		ctx context.Context,
		req AuthenticateRequest,
	) (*AuthenticateResponse, *http.Response, error)
	AuthenticateWithAccessTokenRetrievalKey(
		ctx context.Context,
		req AuthenticateWithAccessTokenRetrievalKeyRequest,
	) (*AuthenticateWithAccessTokenRetrievalKeyResponse, *http.Response, error)
	GetOwnEmail(
		ctx context.Context,
		req GetOwnEmailRequest,
	) (*GetOwnEmailResponse, *http.Response, error)
	ChangeEmail(
		ctx context.Context,
		req ChangeEmailRequest,
	) (*http.Response, error)
	ChangePassword(
		ctx context.Context,
		req ChangePasswordRequest,
	) (*ChangePasswordResponse, *http.Response, error)
	CheckToken(
		ctx context.Context,
		req CheckTokenRequest,
	) (*CheckTokenResponse, *http.Response, error)
	GetMFAStatus(
		ctx context.Context,
		req GetMFAStatusRequest,
	) (*GetMFAStatusResponse, *http.Response, error)
	ResetRecoverycodes(
		ctx context.Context,
		req ResetRecoverycodesRequest,
	) (*ResetRecoverycodesResponse, *http.Response, error)
	ConfirmMFA(
		ctx context.Context,
		req ConfirmMFARequest,
	) (*ConfirmMFAResponse, *http.Response, error)
	DisableMFA(
		ctx context.Context,
		req DisableMFARequest,
	) (*http.Response, error)
	ConfirmPasswordReset(
		ctx context.Context,
		req ConfirmPasswordResetRequest,
	) (*http.Response, error)
	ListAPITokens(
		ctx context.Context,
		req ListAPITokensRequest,
	) (*[]signupv1.ApiToken, *http.Response, error)
	CreateAPIToken(
		ctx context.Context,
		req CreateAPITokenRequest,
	) (*CreateAPITokenResponse, *http.Response, error)
	CreateFeedback(
		ctx context.Context,
		req CreateFeedbackRequest,
	) (*CreateFeedbackResponse, *http.Response, error)
	ListSSHKeys(
		ctx context.Context,
		req ListSSHKeysRequest,
	) (*ListSSHKeysResponse, *http.Response, error)
	CreateSSHKey(
		ctx context.Context,
		req CreateSSHKeyRequest,
	) (*CreateSSHKeyResponse, *http.Response, error)
	GetAPIToken(
		ctx context.Context,
		req GetAPITokenRequest,
	) (*signupv1.ApiToken, *http.Response, error)
	EditAPIToken(
		ctx context.Context,
		req EditAPITokenRequest,
	) (*http.Response, error)
	DeleteAPIToken(
		ctx context.Context,
		req DeleteAPITokenRequest,
	) (*http.Response, error)
	GetSSHKey(
		ctx context.Context,
		req GetSSHKeyRequest,
	) (*GetSSHKeyResponse, *http.Response, error)
	EditSSHKey(
		ctx context.Context,
		req EditSSHKeyRequest,
	) (*http.Response, error)
	DeleteSSHKey(
		ctx context.Context,
		req DeleteSSHKeyRequest,
	) (*http.Response, error)
	DeleteUser(
		ctx context.Context,
		req DeleteUserRequest,
	) (*any, *http.Response, error)
	GetPasswordUpdatedAt(
		ctx context.Context,
		req GetPasswordUpdatedAtRequest,
	) (*GetPasswordUpdatedAtResponse, *http.Response, error)
	GetPersonalizedSettings(
		ctx context.Context,
		req GetPersonalizedSettingsRequest,
	) (*GetPersonalizedSettingsResponse, *http.Response, error)
	UpdatePersonalizedSettings(
		ctx context.Context,
		req UpdatePersonalizedSettingsRequest,
	) (*http.Response, error)
	GetPollStatus(
		ctx context.Context,
		req GetPollStatusRequest,
	) (*pollv1.UserPollSettings, *http.Response, error)
	PostPollStatus(
		ctx context.Context,
		req PostPollStatusRequest,
	) (*pollv1.UserPollSettings, *http.Response, error)
	GetSession(
		ctx context.Context,
		req GetSessionRequest,
	) (*signupv1.UserSession, *http.Response, error)
	TerminateSession(
		ctx context.Context,
		req TerminateSessionRequest,
	) (*http.Response, error)
	GetUser(
		ctx context.Context,
		req GetUserRequest,
	) (*userv1.User, *http.Response, error)
	UpdatePersonalInformation(
		ctx context.Context,
		req UpdatePersonalInformationRequest,
	) (*http.Response, error)
	InitMFA(
		ctx context.Context,
		req InitMFARequest,
	) (*InitMFAResponse, *http.Response, error)
	InitPasswordReset(
		ctx context.Context,
		req InitPasswordResetRequest,
	) (*InitPasswordResetResponse, *http.Response, error)
	ListFeedback(
		ctx context.Context,
		req ListFeedbackRequest,
	) (*[]userv1.UserFeedback, *http.Response, error)
	ListSessions(
		ctx context.Context,
		req ListSessionsRequest,
	) (*[]signupv1.UserSession, *http.Response, error)
	RefreshSession(
		ctx context.Context,
		req RefreshSessionRequest,
	) (*RefreshSessionResponse, *http.Response, error)
	TerminateAllSessions(
		ctx context.Context,
		req TerminateAllSessionsRequest,
	) (*http.Response, error)
	Logout(
		ctx context.Context,
		req LogoutRequest,
	) (*http.Response, error)
	OauthGetAuthorization(
		ctx context.Context,
		req OauthGetAuthorizationRequest,
	) (*http.Response, error)
	OauthRetrieveAccessToken(
		ctx context.Context,
		req OauthRetrieveAccessTokenRequest,
	) (*OauthRetrieveAccessTokenResponse, *http.Response, error)
	Register(
		ctx context.Context,
		req RegisterRequest,
	) (*RegisterResponse, *http.Response, error)
	RequestAvatarUpload(
		ctx context.Context,
		req RequestAvatarUploadRequest,
	) (*RequestAvatarUploadResponse, *http.Response, error)
	RemoveAvatar(
		ctx context.Context,
		req RemoveAvatarRequest,
	) (*http.Response, error)
	ResendVerificationEmail(
		ctx context.Context,
		req ResendVerificationEmailRequest,
	) (*http.Response, error)
	SupportCodeRequest(
		ctx context.Context,
		req SupportCodeRequestRequest,
	) (*SupportCodeRequestResponse, *http.Response, error)
	VerifyEmail(
		ctx context.Context,
		req VerifyEmailRequest,
	) (*http.Response, error)
	VerifyPhoneNumber(
		ctx context.Context,
		req VerifyPhoneNumberRequest,
	) (*http.Response, error)
	VerifyRegistration(
		ctx context.Context,
		req VerifyRegistrationRequest,
	) (*VerifyRegistrationResponse, *http.Response, error)
}
type clientImpl struct {
	client httpclient.RequestRunner
}

func NewClient(client httpclient.RequestRunner) Client {
	return &clientImpl{client: client}
}

// Change your Email-Address. Replaced by `PUT` `/v2/users/self/credentials/email`.
func (c *clientImpl) DeprecatedChangeEmail(
	ctx context.Context,
	req DeprecatedChangeEmailRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Confirm password reset. Replaced by `POST` `/v2/users/self/credentials/password/confirm-reset`.
func (c *clientImpl) DeprecatedConfirmPasswordReset(
	ctx context.Context,
	req DeprecatedConfirmPasswordResetRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Create a new issue.
func (c *clientImpl) DeprecatedCreateIssue(
	ctx context.Context,
	req DeprecatedCreateIssueRequest,
) (*DeprecatedCreateIssueResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response DeprecatedCreateIssueResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Update an existing `ApiToken`. Replaced by `PUT` `/v2/users/{userId}/api-tokens/{apiTokenId}`.
func (c *clientImpl) DeprecatedEditAPIToken(
	ctx context.Context,
	req DeprecatedEditAPITokenRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Deletes an ApiToken. Replaces by `DELETE` `/v2/user/{userid}/api-tokens/{apiTokenId}`.
func (c *clientImpl) DeprecatedDeleteAPIToken(
	ctx context.Context,
	req DeprecatedDeleteAPITokenRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Edit a stored ssh-key. Replaced by `PUT` `/v2/users/self/ssh-keys/{sshKeyId}`.
func (c *clientImpl) DeprecatedEditSSHKey(
	ctx context.Context,
	req DeprecatedEditSSHKeyRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Remove a ssh-key. Replaced by `DELETE` `/v2/users/self/ssh-keys/{sshKeyId}`.
func (c *clientImpl) DeprecatedDeleteSSHKey(
	ctx context.Context,
	req DeprecatedDeleteSSHKeyRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Disable Multi Factor Authentication. Replaced by `DELETE` `/v2/users/self/credentials/mfa`.
func (c *clientImpl) DeprecatedDisableMFA(
	ctx context.Context,
	req DeprecatedDisableMFARequest,
) (*DeprecatedDisableMFAResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response DeprecatedDisableMFAResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Update your account information.
func (c *clientImpl) DeprecatedUpdateAccount(
	ctx context.Context,
	req DeprecatedUpdateAccountRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Get your account information. Replaced by `GET` `/v2/users/self`.
func (c *clientImpl) DeprecatedGetOwnAccount(
	ctx context.Context,
	req DeprecatedGetOwnAccountRequest,
) (*signupv1.Account, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response signupv1.Account
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Update your account information.
func (c *clientImpl) UpdateAccount(
	ctx context.Context,
	req UpdateAccountRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

//Initialize password reset process. Replaced by `POST` `/v2/users/self/credentials/actions/init-password-reset`.

func (c *clientImpl) DeprecatedInitPasswordReset(
	ctx context.Context,
	req DeprecatedInitPasswordResetRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Terminate session and invalidate access token. Replaced by `DELETE` `/v2/users/self/sessions/{current}`.
func (c *clientImpl) DeprecatedLogout(
	ctx context.Context,
	req DeprecatedLogoutRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

//Resend the Email-Address verification email. Replaced by `POST` `/v2/users/self/credentials/email/actions/resend-email`.

func (c *clientImpl) DeprecatedResendVerificationEmail(
	ctx context.Context,
	req DeprecatedResendVerificationEmailRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Request a new avatar upload
func (c *clientImpl) DeprecatedServiceAvatarRequestUpload(
	ctx context.Context,
	req DeprecatedServiceAvatarRequestUploadRequest,
) (*DeprecatedServiceAvatarRequestUploadResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response DeprecatedServiceAvatarRequestUploadResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Remove Avatar
func (c *clientImpl) DeprecatedServiceAvatarRemove(
	ctx context.Context,
	req DeprecatedServiceAvatarRemoveRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Returns your submitted feedback
func (c *clientImpl) DeprecatedServiceFeedbackList(
	ctx context.Context,
	req DeprecatedServiceFeedbackListRequest,
) (*[]userv1.UserFeedback, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []userv1.UserFeedback
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Submit user feedback
func (c *clientImpl) DeprecatedServiceFeedbackCreate(
	ctx context.Context,
	req DeprecatedServiceFeedbackCreateRequest,
) (*DeprecatedServiceFeedbackCreateResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response DeprecatedServiceFeedbackCreateResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// create a new issue
func (c *clientImpl) DeprecatedServiceIssueNew(
	ctx context.Context,
	req DeprecatedServiceIssueNewRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Get profile information for the specified user if the user is related to the executing user
func (c *clientImpl) DeprecatedServiceUserGet(
	ctx context.Context,
	req DeprecatedServiceUserGetRequest,
) (*userv1.User, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response userv1.User
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Change your personal information
func (c *clientImpl) DeprecatedServicePersonalInformationUpdate(
	ctx context.Context,
	req DeprecatedServicePersonalInformationUpdateRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Get personalized settings for the user executing the request
func (c *clientImpl) DeprecatedServicePersonalizedSettingsGet(
	ctx context.Context,
	req DeprecatedServicePersonalizedSettingsGetRequest,
) (*DeprecatedServicePersonalizedSettingsGetResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response DeprecatedServicePersonalizedSettingsGetResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// update personalized settings
func (c *clientImpl) DeprecatedServicePersonalizedSettingsUpdate(
	ctx context.Context,
	req DeprecatedServicePersonalizedSettingsUpdateRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Add phone number and init verification process
func (c *clientImpl) DeprecatedServicePhoneNumberAdd(
	ctx context.Context,
	req DeprecatedServicePhoneNumberAddRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// remove your PhoneNumber
func (c *clientImpl) DeprecatedServicePhoneNumberRemove(
	ctx context.Context,
	req DeprecatedServicePhoneNumberRemoveRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Verify phone number
func (c *clientImpl) DeprecatedServicePhoneNumberVerify(
	ctx context.Context,
	req DeprecatedServicePhoneNumberVerifyRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Get profile information for the executing user
func (c *clientImpl) DeprecatedServiceUserGetOwn(
	ctx context.Context,
	req DeprecatedServiceUserGetOwnRequest,
) (*userv1.User, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response userv1.User
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Terminate all sessions, except the current session. Replaced by `DELETE` `/v2/users/self/sessions`.
func (c *clientImpl) DeprecatedTerminateAllSessions(
	ctx context.Context,
	req DeprecatedTerminateAllSessionsRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Terminate a specific Session. Replaced by `DELETE` `/v2/users/self/sessions/{tokenId}`.
func (c *clientImpl) DeprecatedTerminateSession(
	ctx context.Context,
	req DeprecatedTerminateSessionRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Verify an added Email-Address. Replaced by `POST` `/v2/users/self/credentials/email/actions/verify-email`.
func (c *clientImpl) DeprecatedVerifyEmail(
	ctx context.Context,
	req DeprecatedVerifyEmailRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Get a PasswordPolicy.
func (c *clientImpl) PasswordValidationGetPasswordPolicy(
	ctx context.Context,
	req PasswordValidationGetPasswordPolicyRequest,
) (*policyv1.Policy, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response policyv1.Policy
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get a password policy.
func (c *clientImpl) PasswordValidationGetPasswordPolicyV2Deprecated(
	ctx context.Context,
	req PasswordValidationGetPasswordPolicyV2DeprecatedRequest,
) (*policyv1.Policy, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response policyv1.Policy
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Add phone number and start verification process.
func (c *clientImpl) AddPhoneNumber(
	ctx context.Context,
	req AddPhoneNumberRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Remove phone number.
func (c *clientImpl) RemovePhoneNumber(
	ctx context.Context,
	req RemovePhoneNumberRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Validate your second factor.
func (c *clientImpl) AuthenticateMFA(
	ctx context.Context,
	req AuthenticateMFARequest,
) (*AuthenticateMFAResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response AuthenticateMFAResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Authenticate yourself to get an access token.
func (c *clientImpl) Authenticate(
	ctx context.Context,
	req AuthenticateRequest,
) (*AuthenticateResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response AuthenticateResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Authenticate an user with an access token retrieval key.
func (c *clientImpl) AuthenticateWithAccessTokenRetrievalKey(
	ctx context.Context,
	req AuthenticateWithAccessTokenRetrievalKeyRequest,
) (*AuthenticateWithAccessTokenRetrievalKeyResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response AuthenticateWithAccessTokenRetrievalKeyResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get your verified Email-Address.
func (c *clientImpl) GetOwnEmail(
	ctx context.Context,
	req GetOwnEmailRequest,
) (*GetOwnEmailResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response GetOwnEmailResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Change your Email-Address.
func (c *clientImpl) ChangeEmail(
	ctx context.Context,
	req ChangeEmailRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Change your password.
func (c *clientImpl) ChangePassword(
	ctx context.Context,
	req ChangePasswordRequest,
) (*ChangePasswordResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response ChangePasswordResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Check token for validity.
func (c *clientImpl) CheckToken(
	ctx context.Context,
	req CheckTokenRequest,
) (*CheckTokenResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response CheckTokenResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get your current multi factor auth status.
func (c *clientImpl) GetMFAStatus(
	ctx context.Context,
	req GetMFAStatusRequest,
) (*GetMFAStatusResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response GetMFAStatusResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Reset RecoveryCodes for MFA.
func (c *clientImpl) ResetRecoverycodes(
	ctx context.Context,
	req ResetRecoverycodesRequest,
) (*ResetRecoverycodesResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response ResetRecoverycodesResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Confirm Multi Factor Authentication.
func (c *clientImpl) ConfirmMFA(
	ctx context.Context,
	req ConfirmMFARequest,
) (*ConfirmMFAResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response ConfirmMFAResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Disable Multi Factor Authentication.
func (c *clientImpl) DisableMFA(
	ctx context.Context,
	req DisableMFARequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Confirm password reset.
func (c *clientImpl) ConfirmPasswordReset(
	ctx context.Context,
	req ConfirmPasswordResetRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// List all of your ApiTokens.
func (c *clientImpl) ListAPITokens(
	ctx context.Context,
	req ListAPITokensRequest,
) (*[]signupv1.ApiToken, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []signupv1.ApiToken
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Store a new ApiToken.
func (c *clientImpl) CreateAPIToken(
	ctx context.Context,
	req CreateAPITokenRequest,
) (*CreateAPITokenResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response CreateAPITokenResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Submit your user feedback.
func (c *clientImpl) CreateFeedback(
	ctx context.Context,
	req CreateFeedbackRequest,
) (*CreateFeedbackResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response CreateFeedbackResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get your stored ssh-keys.
func (c *clientImpl) ListSSHKeys(
	ctx context.Context,
	req ListSSHKeysRequest,
) (*ListSSHKeysResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response ListSSHKeysResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Store a new ssh-key.
func (c *clientImpl) CreateSSHKey(
	ctx context.Context,
	req CreateSSHKeyRequest,
) (*CreateSSHKeyResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response CreateSSHKeyResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get a specific ApiToken.
func (c *clientImpl) GetAPIToken(
	ctx context.Context,
	req GetAPITokenRequest,
) (*signupv1.ApiToken, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response signupv1.ApiToken
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Update an existing `ApiToken`.
func (c *clientImpl) EditAPIToken(
	ctx context.Context,
	req EditAPITokenRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Deletes an ApiToken.
func (c *clientImpl) DeleteAPIToken(
	ctx context.Context,
	req DeleteAPITokenRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Get a specific stored ssh-key.
func (c *clientImpl) GetSSHKey(
	ctx context.Context,
	req GetSSHKeyRequest,
) (*GetSSHKeyResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response GetSSHKeyResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Edit a stored ssh-key.
func (c *clientImpl) EditSSHKey(
	ctx context.Context,
	req EditSSHKeyRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Remove a ssh-key.
func (c *clientImpl) DeleteSSHKey(
	ctx context.Context,
	req DeleteSSHKeyRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Delete your account and all your personal data.
func (c *clientImpl) DeleteUser(
	ctx context.Context,
	req DeleteUserRequest,
) (*any, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response any
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// The timestamp of your latest password change.
func (c *clientImpl) GetPasswordUpdatedAt(
	ctx context.Context,
	req GetPasswordUpdatedAtRequest,
) (*GetPasswordUpdatedAtResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response GetPasswordUpdatedAtResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get personalized settings.
func (c *clientImpl) GetPersonalizedSettings(
	ctx context.Context,
	req GetPersonalizedSettingsRequest,
) (*GetPersonalizedSettingsResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response GetPersonalizedSettingsResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Update personalized GUI settings.
func (c *clientImpl) UpdatePersonalizedSettings(
	ctx context.Context,
	req UpdatePersonalizedSettingsRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Get poll settings for the specified user.
func (c *clientImpl) GetPollStatus(
	ctx context.Context,
	req GetPollStatusRequest,
) (*pollv1.UserPollSettings, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response pollv1.UserPollSettings
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Store new or update poll settings.
func (c *clientImpl) PostPollStatus(
	ctx context.Context,
	req PostPollStatusRequest,
) (*pollv1.UserPollSettings, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response pollv1.UserPollSettings
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get a specific session.
func (c *clientImpl) GetSession(
	ctx context.Context,
	req GetSessionRequest,
) (*signupv1.UserSession, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response signupv1.UserSession
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Terminate a specific Session.
func (c *clientImpl) TerminateSession(
	ctx context.Context,
	req TerminateSessionRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Get profile information for a user.
func (c *clientImpl) GetUser(
	ctx context.Context,
	req GetUserRequest,
) (*userv1.User, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response userv1.User
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Change personal information.
func (c *clientImpl) UpdatePersonalInformation(
	ctx context.Context,
	req UpdatePersonalInformationRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Initialize Multi Factor Authentication. If successful, it needs to be confirmed, before usage of mfa.
func (c *clientImpl) InitMFA(
	ctx context.Context,
	req InitMFARequest,
) (*InitMFAResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response InitMFAResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Initialize password reset process.
func (c *clientImpl) InitPasswordReset(
	ctx context.Context,
	req InitPasswordResetRequest,
) (*InitPasswordResetResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response InitPasswordResetResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Submitted feedback of the given user.
func (c *clientImpl) ListFeedback(
	ctx context.Context,
	req ListFeedbackRequest,
) (*[]userv1.UserFeedback, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []userv1.UserFeedback
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// List all sessions.
func (c *clientImpl) ListSessions(
	ctx context.Context,
	req ListSessionsRequest,
) (*[]signupv1.UserSession, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []signupv1.UserSession
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Refresh a session.
func (c *clientImpl) RefreshSession(
	ctx context.Context,
	req RefreshSessionRequest,
) (*RefreshSessionResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response RefreshSessionResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Terminate all sessions, except the current session.
func (c *clientImpl) TerminateAllSessions(
	ctx context.Context,
	req TerminateAllSessionsRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Terminate session and invalidate access token.
func (c *clientImpl) Logout(
	ctx context.Context,
	req LogoutRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Obtain authorization from the resource owner.
//
// The OAuth 2.0 client requests authorization from the resource owner according to
// [RFC6749](https://datatracker.ietf.org/doc/html/rfc6749). The
// authorization request is made indirectly via the authorization
// server as an intermediary.
func (c *clientImpl) OauthGetAuthorization(
	ctx context.Context,
	req OauthGetAuthorizationRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Retrieve Access Token from Authorization Code.
//
// The OAuth 2.0 client retrieves an Access Token from an existing authorization code according to
// [RFC6749](https://datatracker.ietf.org/doc/html/rfc6749).
func (c *clientImpl) OauthRetrieveAccessToken(
	ctx context.Context,
	req OauthRetrieveAccessTokenRequest,
) (*OauthRetrieveAccessTokenResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response OauthRetrieveAccessTokenResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Register with email and password.
func (c *clientImpl) Register(
	ctx context.Context,
	req RegisterRequest,
) (*RegisterResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response RegisterResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Request a new avatar image upload.
func (c *clientImpl) RequestAvatarUpload(
	ctx context.Context,
	req RequestAvatarUploadRequest,
) (*RequestAvatarUploadResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response RequestAvatarUploadResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Remove Avatar.
func (c *clientImpl) RemoveAvatar(
	ctx context.Context,
	req RemoveAvatarRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Resend the Email-Address verification email.
func (c *clientImpl) ResendVerificationEmail(
	ctx context.Context,
	req ResendVerificationEmailRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Request a support code.
func (c *clientImpl) SupportCodeRequest(
	ctx context.Context,
	req SupportCodeRequestRequest,
) (*SupportCodeRequestResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response SupportCodeRequestResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Verify an added Email-Address.
func (c *clientImpl) VerifyEmail(
	ctx context.Context,
	req VerifyEmailRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Verify phone number.
func (c *clientImpl) VerifyPhoneNumber(
	ctx context.Context,
	req VerifyPhoneNumberRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Verify your registration.
func (c *clientImpl) VerifyRegistration(
	ctx context.Context,
	req VerifyRegistrationRequest,
) (*VerifyRegistrationResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response VerifyRegistrationResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}
