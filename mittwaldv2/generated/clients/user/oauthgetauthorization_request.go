package user

import (
	"io"
	"net/http"
	"net/url"
	"strconv"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

type OauthGetAuthorizationRequest struct {
	Grantconsent        *bool
	Granttype           *OauthGetAuthorizationRequestQueryGranttype
	Responsetype        OauthGetAuthorizationRequestQueryResponsetype
	Clientid            string
	Redirecturi         *string
	Scope               *string
	State               *string
	Codechallenge       *string
	Codechallengemethod *OauthGetAuthorizationRequestQueryCodechallengemethod
}

func (r *OauthGetAuthorizationRequest) BuildRequest() (*http.Request, error) {
	body, err := r.body()
	if err != nil {
		return nil, err
	}

	return http.NewRequest(http.MethodGet, r.url(), body)
}

func (r *OauthGetAuthorizationRequest) body() (io.Reader, error) {
	return nil, nil
}

func (r *OauthGetAuthorizationRequest) url() string {
	return "/v2/oauth2/authorize"
}

func (r *OauthGetAuthorizationRequest) query() url.Values {
	q := make(url.Values)
	if r.Grantconsent != nil {
		q.Set("grant_consent", strconv.FormatBool(*r.Grantconsent))
	}
	if r.Granttype != nil {
		q.Set("grant_type", string(*r.Granttype))
	}
	q.Set("response_type", string(r.Responsetype))
	q.Set("client_id", r.Clientid)
	if r.Redirecturi != nil {
		q.Set("redirect_uri", *r.Redirecturi)
	}
	if r.Scope != nil {
		q.Set("scope", *r.Scope)
	}
	if r.State != nil {
		q.Set("state", *r.State)
	}
	if r.Codechallenge != nil {
		q.Set("code_challenge", *r.Codechallenge)
	}
	if r.Codechallengemethod != nil {
		q.Set("code_challenge_method", string(*r.Codechallengemethod))
	}
	return q
}
