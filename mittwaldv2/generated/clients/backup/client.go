package backup

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/backupv1"
	"github.com/mittwald/api-client-go/pkg/httpclient"
	"github.com/mittwald/api-client-go/pkg/httperr"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

type Client interface {
	CreateProjectBackupExport(
		ctx context.Context,
		req CreateProjectBackupExportRequest,
	) (*http.Response, error)
	DeleteProjectBackupExport(
		ctx context.Context,
		req DeleteProjectBackupExportRequest,
	) (*http.Response, error)
	ListProjectBackupSchedules(
		ctx context.Context,
		req ListProjectBackupSchedulesRequest,
	) (*[]backupv1.ProjectBackupSchedule, *http.Response, error)
	CreateProjectBackupSchedule(
		ctx context.Context,
		req CreateProjectBackupScheduleRequest,
	) (*backupv1.ProjectBackupSchedule, *http.Response, error)
	ListProjectBackups(
		ctx context.Context,
		req ListProjectBackupsRequest,
	) (*[]backupv1.ProjectBackup, *http.Response, error)
	CreateProjectBackup(
		ctx context.Context,
		req CreateProjectBackupRequest,
	) (*backupv1.ProjectBackup, *http.Response, error)
	GetProjectBackupSchedule(
		ctx context.Context,
		req GetProjectBackupScheduleRequest,
	) (*backupv1.ProjectBackupSchedule, *http.Response, error)
	DeleteProjectBackupSchedule(
		ctx context.Context,
		req DeleteProjectBackupScheduleRequest,
	) (*http.Response, error)
	UpdateProjectBackupSchedule(
		ctx context.Context,
		req UpdateProjectBackupScheduleRequest,
	) (*http.Response, error)
	GetProjectBackup(
		ctx context.Context,
		req GetProjectBackupRequest,
	) (*backupv1.ProjectBackup, *http.Response, error)
	DeleteProjectBackup(
		ctx context.Context,
		req DeleteProjectBackupRequest,
	) (*http.Response, error)
	UpdateProjectBackupDescription(
		ctx context.Context,
		req UpdateProjectBackupDescriptionRequest,
	) (*http.Response, error)
}
type clientImpl struct {
	client httpclient.RequestRunner
}

func NewClient(client httpclient.RequestRunner) Client {
	return &clientImpl{client: client}
}

// Export a ProjectBackup for download.
func (c *clientImpl) CreateProjectBackupExport(
	ctx context.Context,
	req CreateProjectBackupExportRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

// Delete a ProjectBackupExport.
func (c *clientImpl) DeleteProjectBackupExport(
	ctx context.Context,
	req DeleteProjectBackupExportRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

// List BackupSchedules belonging to a Project.
func (c *clientImpl) ListProjectBackupSchedules(
	ctx context.Context,
	req ListProjectBackupSchedulesRequest,
) (*[]backupv1.ProjectBackupSchedule, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response []backupv1.ProjectBackupSchedule
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Create a BackupSchedule for a Project.
func (c *clientImpl) CreateProjectBackupSchedule(
	ctx context.Context,
	req CreateProjectBackupScheduleRequest,
) (*backupv1.ProjectBackupSchedule, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response backupv1.ProjectBackupSchedule
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// List Backups belonging to a Project.
func (c *clientImpl) ListProjectBackups(
	ctx context.Context,
	req ListProjectBackupsRequest,
) (*[]backupv1.ProjectBackup, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response []backupv1.ProjectBackup
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Create a Backup of a Project.
func (c *clientImpl) CreateProjectBackup(
	ctx context.Context,
	req CreateProjectBackupRequest,
) (*backupv1.ProjectBackup, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response backupv1.ProjectBackup
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get a ProjectBackupSchedule.
func (c *clientImpl) GetProjectBackupSchedule(
	ctx context.Context,
	req GetProjectBackupScheduleRequest,
) (*backupv1.ProjectBackupSchedule, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response backupv1.ProjectBackupSchedule
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Delete a ProjectBackupSchedule.
func (c *clientImpl) DeleteProjectBackupSchedule(
	ctx context.Context,
	req DeleteProjectBackupScheduleRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

// Update a ProjectBackupSchedule.
func (c *clientImpl) UpdateProjectBackupSchedule(
	ctx context.Context,
	req UpdateProjectBackupScheduleRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

// Get a ProjectBackup.
func (c *clientImpl) GetProjectBackup(
	ctx context.Context,
	req GetProjectBackupRequest,
) (*backupv1.ProjectBackup, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response backupv1.ProjectBackup
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Delete a ProjectBackup.
func (c *clientImpl) DeleteProjectBackup(
	ctx context.Context,
	req DeleteProjectBackupRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

// Change the description of a ProjectBackup.
func (c *clientImpl) UpdateProjectBackupDescription(
	ctx context.Context,
	req UpdateProjectBackupDescriptionRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}
