package contractclientv2

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/orderv2"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// This data type was generated from the following JSON schema:
// oneOf:
//    - {"$ref": "#/components/schemas/de.mittwald.v1.order.ProjectHostingOrder"}
//    - {"$ref": "#/components/schemas/de.mittwald.v1.order.ServerOrder"}
//    - {"$ref": "#/components/schemas/de.mittwald.v1.order.DomainOrder"}
//    - {"$ref": "#/components/schemas/de.mittwald.v1.order.ExternalCertificateOrder"}
//    - {"$ref": "#/components/schemas/de.mittwald.v1.order.LeadFyndrOrder"}

type CreateOrderRequestBodyOrderData struct {
	AlternativeProjectHostingOrder      *orderv2.ProjectHostingOrder
	AlternativeServerOrder              *orderv2.ServerOrder
	AlternativeDomainOrder              *orderv2.DomainOrder
	AlternativeExternalCertificateOrder *orderv2.ExternalCertificateOrder
	AlternativeLeadFyndrOrder           *orderv2.LeadFyndrOrder
}

func (a *CreateOrderRequestBodyOrderData) MarshalJSON() ([]byte, error) {
	if a.AlternativeProjectHostingOrder != nil {
		return json.Marshal(a.AlternativeProjectHostingOrder)
	}
	if a.AlternativeServerOrder != nil {
		return json.Marshal(a.AlternativeServerOrder)
	}
	if a.AlternativeDomainOrder != nil {
		return json.Marshal(a.AlternativeDomainOrder)
	}
	if a.AlternativeExternalCertificateOrder != nil {
		return json.Marshal(a.AlternativeExternalCertificateOrder)
	}
	if a.AlternativeLeadFyndrOrder != nil {
		return json.Marshal(a.AlternativeLeadFyndrOrder)
	}
	return []byte("null"), nil
}

func (a *CreateOrderRequestBodyOrderData) UnmarshalJSON(input []byte) error {
	reader := bytes.NewReader(input)
	decodedAtLeastOnce := false
	dec := json.NewDecoder(reader)
	dec.DisallowUnknownFields()

	reader.Reset(input)
	var alternativeProjectHostingOrder orderv2.ProjectHostingOrder
	if err := dec.Decode(&alternativeProjectHostingOrder); err == nil {
		//subtype: *generator.ReferenceType
		if vErr := alternativeProjectHostingOrder.Validate(); vErr == nil {
			a.AlternativeProjectHostingOrder = &alternativeProjectHostingOrder
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeServerOrder orderv2.ServerOrder
	if err := dec.Decode(&alternativeServerOrder); err == nil {
		//subtype: *generator.ReferenceType
		if vErr := alternativeServerOrder.Validate(); vErr == nil {
			a.AlternativeServerOrder = &alternativeServerOrder
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeDomainOrder orderv2.DomainOrder
	if err := dec.Decode(&alternativeDomainOrder); err == nil {
		//subtype: *generator.ReferenceType
		if vErr := alternativeDomainOrder.Validate(); vErr == nil {
			a.AlternativeDomainOrder = &alternativeDomainOrder
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeExternalCertificateOrder orderv2.ExternalCertificateOrder
	if err := dec.Decode(&alternativeExternalCertificateOrder); err == nil {
		//subtype: *generator.ReferenceType
		if vErr := alternativeExternalCertificateOrder.Validate(); vErr == nil {
			a.AlternativeExternalCertificateOrder = &alternativeExternalCertificateOrder
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeLeadFyndrOrder orderv2.LeadFyndrOrder
	if err := dec.Decode(&alternativeLeadFyndrOrder); err == nil {
		//subtype: *generator.ReferenceType
		if vErr := alternativeLeadFyndrOrder.Validate(); vErr == nil {
			a.AlternativeLeadFyndrOrder = &alternativeLeadFyndrOrder
			decodedAtLeastOnce = true
		}
	}

	if !decodedAtLeastOnce {
		return fmt.Errorf("could not unmarshal into any alternative for type %T", a)
	}
	return nil
}

func (a *CreateOrderRequestBodyOrderData) Validate() error {
	if a.AlternativeProjectHostingOrder != nil {
		return a.AlternativeProjectHostingOrder.Validate()
	}
	if a.AlternativeServerOrder != nil {
		return a.AlternativeServerOrder.Validate()
	}
	if a.AlternativeDomainOrder != nil {
		return a.AlternativeDomainOrder.Validate()
	}
	if a.AlternativeExternalCertificateOrder != nil {
		return a.AlternativeExternalCertificateOrder.Validate()
	}
	if a.AlternativeLeadFyndrOrder != nil {
		return a.AlternativeLeadFyndrOrder.Validate()
	}
	return errors.New("no alternative set")
}
