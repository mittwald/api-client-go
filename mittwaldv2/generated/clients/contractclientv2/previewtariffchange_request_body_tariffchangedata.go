package contractclientv2

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/orderv2"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

//This data type was generated from the following JSON schema:
// oneOf:
//    - {"$ref": "#/components/schemas/de.mittwald.v1.order.ProjectHostingTariffChange"}
//    - {"$ref": "#/components/schemas/de.mittwald.v1.order.ServerTariffChange"}

type PreviewTariffChangeRequestBodyTariffChangeData struct {
	AlternativeProjectHostingTariffChange *orderv2.ProjectHostingTariffChange
	AlternativeServerTariffChange         *orderv2.ServerTariffChange
}

func (a *PreviewTariffChangeRequestBodyTariffChangeData) MarshalJSON() ([]byte, error) {
	if a.AlternativeProjectHostingTariffChange != nil {
		return json.Marshal(a.AlternativeProjectHostingTariffChange)
	}
	if a.AlternativeServerTariffChange != nil {
		return json.Marshal(a.AlternativeServerTariffChange)
	}
	return []byte("null"), nil
}

func (a *PreviewTariffChangeRequestBodyTariffChangeData) UnmarshalJSON(input []byte) error {
	reader := bytes.NewReader(input)
	decodedAtLeastOnce := false
	dec := json.NewDecoder(reader)
	dec.DisallowUnknownFields()

	reader.Reset(input)
	var alternativeProjectHostingTariffChange orderv2.ProjectHostingTariffChange
	if err := dec.Decode(&alternativeProjectHostingTariffChange); err == nil {
		//subtype: *generator.ReferenceType
		if vErr := alternativeProjectHostingTariffChange.Validate(); vErr == nil {
			a.AlternativeProjectHostingTariffChange = &alternativeProjectHostingTariffChange
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeServerTariffChange orderv2.ServerTariffChange
	if err := dec.Decode(&alternativeServerTariffChange); err == nil {
		//subtype: *generator.ReferenceType
		if vErr := alternativeServerTariffChange.Validate(); vErr == nil {
			a.AlternativeServerTariffChange = &alternativeServerTariffChange
			decodedAtLeastOnce = true
		}
	}

	if !decodedAtLeastOnce {
		return fmt.Errorf("could not unmarshal into any alternative for type %T", a)
	}
	return nil
}

func (a *PreviewTariffChangeRequestBodyTariffChangeData) Validate() error {
	if a.AlternativeProjectHostingTariffChange != nil {
		return a.AlternativeProjectHostingTariffChange.Validate()
	}
	if a.AlternativeServerTariffChange != nil {
		return a.AlternativeServerTariffChange.Validate()
	}
	return errors.New("no alternative set")
}
