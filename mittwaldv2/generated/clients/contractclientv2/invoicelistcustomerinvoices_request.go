package contractclientv2

import (
	"fmt"
	"io"
	"net/http"
	"net/url"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// InvoiceListCustomerInvoicesRequest models a request for the
// 'invoice-list-customer-invoices' operation. See [1] for more information.
//
// List Invoices of a Customer.
//
// [1]:
// https://developer.mittwald.de/docs/v2/reference/contract/invoice-list-customer-invoices
type InvoiceListCustomerInvoicesRequest struct {
	CustomerID   string
	InvoiceTypes []InvoiceListCustomerInvoicesRequestQueryInvoiceTypesItem
	Search       *string
	Limit        *int64
	Skip         *int64
	Page         *int64
	Sort         []InvoiceListCustomerInvoicesRequestQuerySortItem
	Order        []InvoiceListCustomerInvoicesRequestQueryOrderItem
}

// BuildRequest builds an *http.Request instance from this request that may be used
// with any regular *http.Client instance.
func (r *InvoiceListCustomerInvoicesRequest) BuildRequest(reqEditors ...func(req *http.Request) error) (*http.Request, error) {
	body, contentType, err := r.body()
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodGet, r.url(), body)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", contentType)
	for _, editor := range reqEditors {
		if err := editor(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

func (r *InvoiceListCustomerInvoicesRequest) body() (io.Reader, string, error) {
	return nil, "", nil
}

func (r *InvoiceListCustomerInvoicesRequest) url() string {
	u := url.URL{
		Path:     fmt.Sprintf("/v2/customers/%s/invoices", url.PathEscape(r.CustomerID)),
		RawQuery: r.query().Encode(),
	}
	return u.String()
}

func (r *InvoiceListCustomerInvoicesRequest) query() url.Values {
	q := make(url.Values)
	for _, val := range r.InvoiceTypes {
		q.Add("invoiceTypes", string(val))
	}
	if r.Search != nil {
		q.Set("search", *r.Search)
	}
	if r.Limit != nil {
		q.Set("limit", fmt.Sprintf("%d", *r.Limit))
	}
	if r.Skip != nil {
		q.Set("skip", fmt.Sprintf("%d", *r.Skip))
	}
	if r.Page != nil {
		q.Set("page", fmt.Sprintf("%d", *r.Page))
	}
	for _, val := range r.Sort {
		q.Add("sort", string(val))
	}
	for _, val := range r.Order {
		q.Add("order", string(val))
	}
	return q
}
