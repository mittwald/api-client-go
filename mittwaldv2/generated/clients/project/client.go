package project

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/membershipv1"
	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/projectv1"
	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/storagespacev1"
	"github.com/mittwald/api-client-go/pkg/httpclient"
	"github.com/mittwald/api-client-go/pkg/httperr"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

type Client interface {
	DeprecatedProjectLeaveProject(
		ctx context.Context,
		req DeprecatedProjectLeaveProjectRequest,
	) (*http.Response, error)
	AcceptProjectInvite(
		ctx context.Context,
		req AcceptProjectInviteRequest,
	) (*http.Response, error)
	ListInvitesForProject(
		ctx context.Context,
		req ListInvitesForProjectRequest,
	) (*[]membershipv1.ProjectInvite, *http.Response, error)
	CreateProjectInvite(
		ctx context.Context,
		req CreateProjectInviteRequest,
	) (*membershipv1.ProjectInvite, *http.Response, error)
	CreateProject(
		ctx context.Context,
		req CreateProjectRequest,
	) (*CreateProjectResponse, *http.Response, error)
	DeclineProjectInvite(
		ctx context.Context,
		req DeclineProjectInviteRequest,
	) (*http.Response, error)
	RequestProjectAvatarUpload(
		ctx context.Context,
		req RequestProjectAvatarUploadRequest,
	) (*RequestProjectAvatarUploadResponse, *http.Response, error)
	DeleteProjectAvatar(
		ctx context.Context,
		req DeleteProjectAvatarRequest,
	) (*http.Response, error)
	GetProjectInvite(
		ctx context.Context,
		req GetProjectInviteRequest,
	) (*membershipv1.ProjectInvite, *http.Response, error)
	DeleteProjectInvite(
		ctx context.Context,
		req DeleteProjectInviteRequest,
	) (*http.Response, error)
	GetProjectMembership(
		ctx context.Context,
		req GetProjectMembershipRequest,
	) (*membershipv1.ProjectMembership, *http.Response, error)
	DeleteProjectMembership(
		ctx context.Context,
		req DeleteProjectMembershipRequest,
	) (*http.Response, error)
	UpdateProjectMembership(
		ctx context.Context,
		req UpdateProjectMembershipRequest,
	) (*http.Response, error)
	GetProject(
		ctx context.Context,
		req GetProjectRequest,
	) (*projectv1.Project, *http.Response, error)
	DeleteProject(
		ctx context.Context,
		req DeleteProjectRequest,
	) (*http.Response, error)
	RequestServerAvatarUpload(
		ctx context.Context,
		req RequestServerAvatarUploadRequest,
	) (*RequestServerAvatarUploadResponse, *http.Response, error)
	DeleteServerAvatar(
		ctx context.Context,
		req DeleteServerAvatarRequest,
	) (*http.Response, error)
	GetProjectTokenInvite(
		ctx context.Context,
		req GetProjectTokenInviteRequest,
	) (*membershipv1.ProjectInvite, *http.Response, error)
	GetSelfMembershipForProject(
		ctx context.Context,
		req GetSelfMembershipForProjectRequest,
	) (*membershipv1.ProjectMembership, *http.Response, error)
	GetServer(
		ctx context.Context,
		req GetServerRequest,
	) (*projectv1.Server, *http.Response, error)
	ListMembershipsForProject(
		ctx context.Context,
		req ListMembershipsForProjectRequest,
	) (*[]membershipv1.ProjectMembership, *http.Response, error)
	ListProjectInvites(
		ctx context.Context,
		req ListProjectInvitesRequest,
	) (*[]membershipv1.ProjectInvite, *http.Response, error)
	ListProjectMemberships(
		ctx context.Context,
		req ListProjectMembershipsRequest,
	) (*[]membershipv1.ProjectMembership, *http.Response, error)
	ListProjects(
		ctx context.Context,
		req ListProjectsRequest,
	) (*[]ListProjectsResponseItem, *http.Response, error)
	ListServers(
		ctx context.Context,
		req ListServersRequest,
	) (*[]projectv1.Server, *http.Response, error)
	ResendProjectInviteMail(
		ctx context.Context,
		req ResendProjectInviteMailRequest,
	) (*http.Response, error)
	UpdateProjectDescription(
		ctx context.Context,
		req UpdateProjectDescriptionRequest,
	) (*http.Response, error)
	UpdateServerDescription(
		ctx context.Context,
		req UpdateServerDescriptionRequest,
	) (*http.Response, error)
	StoragespaceGetProjectStatistics(
		ctx context.Context,
		req StoragespaceGetProjectStatisticsRequest,
	) (*storagespacev1.Statistics, *http.Response, error)
	StoragespaceGetServerStatistics(
		ctx context.Context,
		req StoragespaceGetServerStatisticsRequest,
	) (*storagespacev1.Statistics, *http.Response, error)
	StoragespaceReplaceProjectNotificationThreshold(
		ctx context.Context,
		req StoragespaceReplaceProjectNotificationThresholdRequest,
	) (*http.Response, error)
	StoragespaceReplaceServerNotificationThreshold(
		ctx context.Context,
		req StoragespaceReplaceServerNotificationThresholdRequest,
	) (*http.Response, error)
}
type clientImpl struct {
	client httpclient.RequestRunner
}

func NewClient(client httpclient.RequestRunner) Client {
	return &clientImpl{client: client}
}

//Leave a Project.
func (c *clientImpl) DeprecatedProjectLeaveProject(
	ctx context.Context,
	req DeprecatedProjectLeaveProjectRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Accept a ProjectInvite.
func (c *clientImpl) AcceptProjectInvite(
	ctx context.Context,
	req AcceptProjectInviteRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//List Invites belonging to a Project.
func (c *clientImpl) ListInvitesForProject(
	ctx context.Context,
	req ListInvitesForProjectRequest,
) (*[]membershipv1.ProjectInvite, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response []membershipv1.ProjectInvite
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//Create a ProjectInvite.
func (c *clientImpl) CreateProjectInvite(
	ctx context.Context,
	req CreateProjectInviteRequest,
) (*membershipv1.ProjectInvite, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response membershipv1.ProjectInvite
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//Create a Project belonging to a Server.
func (c *clientImpl) CreateProject(
	ctx context.Context,
	req CreateProjectRequest,
) (*CreateProjectResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response CreateProjectResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//Decline a ProjectInvite.
func (c *clientImpl) DeclineProjectInvite(
	ctx context.Context,
	req DeclineProjectInviteRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Request a Project avatar upload.
func (c *clientImpl) RequestProjectAvatarUpload(
	ctx context.Context,
	req RequestProjectAvatarUploadRequest,
) (*RequestProjectAvatarUploadResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response RequestProjectAvatarUploadResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//Delete a Project's avatar.
func (c *clientImpl) DeleteProjectAvatar(
	ctx context.Context,
	req DeleteProjectAvatarRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Get a ProjectInvite.
func (c *clientImpl) GetProjectInvite(
	ctx context.Context,
	req GetProjectInviteRequest,
) (*membershipv1.ProjectInvite, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response membershipv1.ProjectInvite
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//Delete a ProjectInvite.
func (c *clientImpl) DeleteProjectInvite(
	ctx context.Context,
	req DeleteProjectInviteRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Get a ProjectMembership
func (c *clientImpl) GetProjectMembership(
	ctx context.Context,
	req GetProjectMembershipRequest,
) (*membershipv1.ProjectMembership, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response membershipv1.ProjectMembership
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//Delete a ProjectMembership.
func (c *clientImpl) DeleteProjectMembership(
	ctx context.Context,
	req DeleteProjectMembershipRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update a ProjectMembership.
func (c *clientImpl) UpdateProjectMembership(
	ctx context.Context,
	req UpdateProjectMembershipRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Get a Project.
func (c *clientImpl) GetProject(
	ctx context.Context,
	req GetProjectRequest,
) (*projectv1.Project, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response projectv1.Project
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//Delete a Project.
func (c *clientImpl) DeleteProject(
	ctx context.Context,
	req DeleteProjectRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Request a Server avatar upload.
func (c *clientImpl) RequestServerAvatarUpload(
	ctx context.Context,
	req RequestServerAvatarUploadRequest,
) (*RequestServerAvatarUploadResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response RequestServerAvatarUploadResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//Delete a Server's avatar.
func (c *clientImpl) DeleteServerAvatar(
	ctx context.Context,
	req DeleteServerAvatarRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Get a ProjectInvite by token.
func (c *clientImpl) GetProjectTokenInvite(
	ctx context.Context,
	req GetProjectTokenInviteRequest,
) (*membershipv1.ProjectInvite, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response membershipv1.ProjectInvite
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//Get the executing user's membership in a Project.
func (c *clientImpl) GetSelfMembershipForProject(
	ctx context.Context,
	req GetSelfMembershipForProjectRequest,
) (*membershipv1.ProjectMembership, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response membershipv1.ProjectMembership
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//Get a Server.
func (c *clientImpl) GetServer(
	ctx context.Context,
	req GetServerRequest,
) (*projectv1.Server, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response projectv1.Server
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//List Memberships belonging to a Project.
func (c *clientImpl) ListMembershipsForProject(
	ctx context.Context,
	req ListMembershipsForProjectRequest,
) (*[]membershipv1.ProjectMembership, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response []membershipv1.ProjectMembership
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//List ProjectInvites belonging to the executing user.
func (c *clientImpl) ListProjectInvites(
	ctx context.Context,
	req ListProjectInvitesRequest,
) (*[]membershipv1.ProjectInvite, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response []membershipv1.ProjectInvite
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//List ProjectMemberships belonging to the executing user.
func (c *clientImpl) ListProjectMemberships(
	ctx context.Context,
	req ListProjectMembershipsRequest,
) (*[]membershipv1.ProjectMembership, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response []membershipv1.ProjectMembership
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//List Projects belonging to the executing user.
func (c *clientImpl) ListProjects(
	ctx context.Context,
	req ListProjectsRequest,
) (*[]ListProjectsResponseItem, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response []ListProjectsResponseItem
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//List Servers belonging to the executing user.
func (c *clientImpl) ListServers(
	ctx context.Context,
	req ListServersRequest,
) (*[]projectv1.Server, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response []projectv1.Server
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//Resend the mail for a ProjectInvite.
func (c *clientImpl) ResendProjectInviteMail(
	ctx context.Context,
	req ResendProjectInviteMailRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update a Project's description.
func (c *clientImpl) UpdateProjectDescription(
	ctx context.Context,
	req UpdateProjectDescriptionRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update a Servers's description.
func (c *clientImpl) UpdateServerDescription(
	ctx context.Context,
	req UpdateServerDescriptionRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Get storage space Statistics belonging to a Project.
func (c *clientImpl) StoragespaceGetProjectStatistics(
	ctx context.Context,
	req StoragespaceGetProjectStatisticsRequest,
) (*storagespacev1.Statistics, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response storagespacev1.Statistics
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//Get storage space Statistics belonging to a Server.
func (c *clientImpl) StoragespaceGetServerStatistics(
	ctx context.Context,
	req StoragespaceGetServerStatisticsRequest,
) (*storagespacev1.Statistics, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response storagespacev1.Statistics
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//Update a Project's storage space notification threshold.
func (c *clientImpl) StoragespaceReplaceProjectNotificationThreshold(
	ctx context.Context,
	req StoragespaceReplaceProjectNotificationThresholdRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update a Server's storage space notification threshold.
func (c *clientImpl) StoragespaceReplaceServerNotificationThreshold(
	ctx context.Context,
	req StoragespaceReplaceServerNotificationThresholdRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}
