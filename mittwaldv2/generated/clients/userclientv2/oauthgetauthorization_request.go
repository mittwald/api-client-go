package userclientv2

import (
	"io"
	"net/http"
	"net/url"
	"strconv"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// OauthGetAuthorizationRequest models a request for the
// 'user-oauth-get-authorization' operation. See [1] for more information.
//
// Obtain authorization from the resource owner.
//
// The OAuth 2.0 client requests authorization from the resource owner according to
// [RFC6749](https://datatracker.ietf.org/doc/html/rfc6749). The
// authorization request is made indirectly via the authorization
// server as an intermediary.
//
// [1]:
// https://developer.mittwald.de/docs/v2/reference/user/user-oauth-get-authorization
type OauthGetAuthorizationRequest struct {
	Grantconsent        *bool
	Granttype           *OauthGetAuthorizationRequestQueryGranttype
	Responsetype        OauthGetAuthorizationRequestQueryResponsetype
	Clientid            string
	Redirecturi         *string
	Scope               *string
	State               *string
	Codechallenge       *string
	Codechallengemethod *OauthGetAuthorizationRequestQueryCodechallengemethod
}

// BuildRequest builds an *http.Request instance from this request that may be used
// with any regular *http.Client instance.
func (r *OauthGetAuthorizationRequest) BuildRequest() (*http.Request, error) {
	body, contentType, err := r.body()
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodGet, r.url(), body)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", contentType)
	return req, nil
}

func (r *OauthGetAuthorizationRequest) body() (io.Reader, string, error) {
	return nil, "", nil
}

func (r *OauthGetAuthorizationRequest) url() string {
	return "/v2/oauth2/authorize"
}

func (r *OauthGetAuthorizationRequest) query() url.Values {
	q := make(url.Values)
	if r.Grantconsent != nil {
		q.Set("grant_consent", strconv.FormatBool(*r.Grantconsent))
	}
	if r.Granttype != nil {
		q.Set("grant_type", string(*r.Granttype))
	}
	q.Set("response_type", string(r.Responsetype))
	q.Set("client_id", r.Clientid)
	if r.Redirecturi != nil {
		q.Set("redirect_uri", *r.Redirecturi)
	}
	if r.Scope != nil {
		q.Set("scope", *r.Scope)
	}
	if r.State != nil {
		q.Set("state", *r.State)
	}
	if r.Codechallenge != nil {
		q.Set("code_challenge", *r.Codechallenge)
	}
	if r.Codechallengemethod != nil {
		q.Set("code_challenge_method", string(*r.Codechallengemethod))
	}
	return q
}
