package userclientv2

import (
	"io"
	"net/http"
	"net/url"
	"strconv"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// OauthGetAuthorizationRequest models a request for the
// 'user-oauth-get-authorization' operation. See [1] for more information.
//
// Obtain authorization from the resource owner.
//
// The OAuth 2.0 client requests authorization from the resource owner according to
// [RFC6749](https://datatracker.ietf.org/doc/html/rfc6749). The
// authorization request is made indirectly via the authorization
// server as an intermediary.
//
// [1]:
// https://developer.mittwald.de/docs/v2/reference/user/user-oauth-get-authorization
type OauthGetAuthorizationRequest struct {
	GrantConsent        *bool
	GrantType           *OauthGetAuthorizationRequestQueryGrantType
	ResponseType        OauthGetAuthorizationRequestQueryResponseType
	ClientID            string
	RedirectUri         *string
	Scope               *string
	State               *string
	CodeChallenge       *string
	CodeChallengeMethod *OauthGetAuthorizationRequestQueryCodeChallengeMethod
}

// BuildRequest builds an *http.Request instance from this request that may be used
// with any regular *http.Client instance.
func (r *OauthGetAuthorizationRequest) BuildRequest(reqEditors ...func(req *http.Request) error) (*http.Request, error) {
	body, contentType, err := r.body()
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodGet, r.url(), body)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", contentType)
	for _, editor := range reqEditors {
		if err := editor(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

func (r *OauthGetAuthorizationRequest) body() (io.Reader, string, error) {
	return nil, "", nil
}

func (r *OauthGetAuthorizationRequest) url() string {
	u := url.URL{
		Path:     "/v2/oauth2/authorize",
		RawQuery: r.query().Encode(),
	}
	return u.String()
}

func (r *OauthGetAuthorizationRequest) query() url.Values {
	q := make(url.Values)
	if r.GrantConsent != nil {
		q.Set("grant_consent", strconv.FormatBool(*r.GrantConsent))
	}
	if r.GrantType != nil {
		q.Set("grant_type", string(*r.GrantType))
	}
	q.Set("response_type", string(r.ResponseType))
	q.Set("client_id", r.ClientID)
	if r.RedirectUri != nil {
		q.Set("redirect_uri", *r.RedirectUri)
	}
	if r.Scope != nil {
		q.Set("scope", *r.Scope)
	}
	if r.State != nil {
		q.Set("state", *r.State)
	}
	if r.CodeChallenge != nil {
		q.Set("code_challenge", *r.CodeChallenge)
	}
	if r.CodeChallengeMethod != nil {
		q.Set("code_challenge_method", string(*r.CodeChallengeMethod))
	}
	return q
}
