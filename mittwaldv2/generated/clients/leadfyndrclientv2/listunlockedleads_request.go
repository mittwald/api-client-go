package leadfyndrclientv2

import (
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// ListUnlockedLeadsRequest models a request for the
// 'leadfyndr-list-unlocked-leads' operation. See [1] for more information.
//
// Get all unlocked leads. Organisation can unlock leads.
//
// [1]:
// https://developer.mittwald.de/docs/v2/reference/leadfyndr/leadfyndr-list-unlocked-leads
type ListUnlockedLeadsRequest struct {
	CustomerID                 string
	PotentialRangeMin          *float64
	PotentialRangeMax          *float64
	EmployeeCountMin           *int64
	EmployeeCountMax           *int64
	SalesVolumeMin             *int64
	SalesVolumeMax             *int64
	Technologies               []string
	BusinessFields             []string
	LocationCity               *string
	LocationPostCode           *string
	LocationRadiusInKm         *float64
	BasicTimeToFirstByteMsMin  *float64
	BasicTimeToFirstByteMsMax  *float64
	BasicDesktopPerformanceMin *float64
	BasicDesktopPerformanceMax *float64
	BasicMobilePerformanceMin  *float64
	BasicMobilePerformanceMax  *float64
	Reserved                   *bool
	Limit                      *int64
	Skip                       *int64
	Page                       *int64
	Sort                       *ListUnlockedLeadsRequestQuerySort
	Order                      *ListUnlockedLeadsRequestQueryOrder
}

// BuildRequest builds an *http.Request instance from this request that may be used
// with any regular *http.Client instance.
func (r *ListUnlockedLeadsRequest) BuildRequest(reqEditors ...func(req *http.Request) error) (*http.Request, error) {
	body, contentType, err := r.body()
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodGet, r.url(), body)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", contentType)
	for _, editor := range reqEditors {
		if err := editor(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

func (r *ListUnlockedLeadsRequest) body() (io.Reader, string, error) {
	return nil, "", nil
}

func (r *ListUnlockedLeadsRequest) url() string {
	u := url.URL{
		Path:     fmt.Sprintf("/v2/customers/%s/unlocked-leads", url.PathEscape(r.CustomerID)),
		RawQuery: r.query().Encode(),
	}
	return u.String()
}

func (r *ListUnlockedLeadsRequest) query() url.Values {
	q := make(url.Values)
	if r.PotentialRangeMin != nil {
		q.Set("potentialRangeMin", fmt.Sprintf("%f", *r.PotentialRangeMin))
	}
	if r.PotentialRangeMax != nil {
		q.Set("potentialRangeMax", fmt.Sprintf("%f", *r.PotentialRangeMax))
	}
	if r.EmployeeCountMin != nil {
		q.Set("employeeCountMin", fmt.Sprintf("%d", *r.EmployeeCountMin))
	}
	if r.EmployeeCountMax != nil {
		q.Set("employeeCountMax", fmt.Sprintf("%d", *r.EmployeeCountMax))
	}
	if r.SalesVolumeMin != nil {
		q.Set("salesVolumeMin", fmt.Sprintf("%d", *r.SalesVolumeMin))
	}
	if r.SalesVolumeMax != nil {
		q.Set("salesVolumeMax", fmt.Sprintf("%d", *r.SalesVolumeMax))
	}
	for _, val := range r.Technologies {
		q.Add("technologies", val)
	}
	for _, val := range r.BusinessFields {
		q.Add("businessFields", val)
	}
	if r.LocationCity != nil {
		q.Set("locationCity", *r.LocationCity)
	}
	if r.LocationPostCode != nil {
		q.Set("locationPostCode", *r.LocationPostCode)
	}
	if r.LocationRadiusInKm != nil {
		q.Set("locationRadiusInKm", fmt.Sprintf("%f", *r.LocationRadiusInKm))
	}
	if r.BasicTimeToFirstByteMsMin != nil {
		q.Set("basic:timeToFirstByteMs:min", fmt.Sprintf("%f", *r.BasicTimeToFirstByteMsMin))
	}
	if r.BasicTimeToFirstByteMsMax != nil {
		q.Set("basic:timeToFirstByteMs:max", fmt.Sprintf("%f", *r.BasicTimeToFirstByteMsMax))
	}
	if r.BasicDesktopPerformanceMin != nil {
		q.Set("basic:desktop:performance:min", fmt.Sprintf("%f", *r.BasicDesktopPerformanceMin))
	}
	if r.BasicDesktopPerformanceMax != nil {
		q.Set("basic:desktop:performance:max", fmt.Sprintf("%f", *r.BasicDesktopPerformanceMax))
	}
	if r.BasicMobilePerformanceMin != nil {
		q.Set("basic:mobile:performance:min", fmt.Sprintf("%f", *r.BasicMobilePerformanceMin))
	}
	if r.BasicMobilePerformanceMax != nil {
		q.Set("basic:mobile:performance:max", fmt.Sprintf("%f", *r.BasicMobilePerformanceMax))
	}
	if r.Reserved != nil {
		q.Set("reserved", strconv.FormatBool(*r.Reserved))
	}
	if r.Limit != nil {
		q.Set("limit", fmt.Sprintf("%d", *r.Limit))
	}
	if r.Skip != nil {
		q.Set("skip", fmt.Sprintf("%d", *r.Skip))
	}
	if r.Page != nil {
		q.Set("page", fmt.Sprintf("%d", *r.Page))
	}
	if r.Sort != nil {
		q.Set("sort", string(*r.Sort))
	}
	if r.Order != nil {
		q.Set("order", string(*r.Order))
	}
	return q
}
