package leadfyndrclientv2

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/leadfyndrv2"
	"github.com/mittwald/api-client-go/pkg/httpclient"
	"github.com/mittwald/api-client-go/pkg/httperr"
)

type Client interface {
	GetCities(
		ctx context.Context,
		req GetCitiesRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]leadfyndrv2.City, *http.Response, error)
	ReserveUnlockedLead(
		ctx context.Context,
		req ReserveUnlockedLeadRequest,
		reqEditors ...func(req *http.Request) error,
	) (*ReserveUnlockedLeadResponse, *http.Response, error)
	RemoveUnlockedLeadReservation(
		ctx context.Context,
		req RemoveUnlockedLeadReservationRequest,
		reqEditors ...func(req *http.Request) error,
	) (*RemoveUnlockedLeadReservationResponse, *http.Response, error)
	GetLead(
		ctx context.Context,
		req GetLeadRequest,
		reqEditors ...func(req *http.Request) error,
	) (*leadfyndrv2.Lead, *http.Response, error)
	ListLeads(
		ctx context.Context,
		req ListLeadsRequest,
		reqEditors ...func(req *http.Request) error,
	) (*ListLeadsResponse, *http.Response, error)
	GetUnlockedLead(
		ctx context.Context,
		req GetUnlockedLeadRequest,
		reqEditors ...func(req *http.Request) error,
	) (*leadfyndrv2.UnlockedLead, *http.Response, error)
	UnlockLead(
		ctx context.Context,
		req UnlockLeadRequest,
		reqEditors ...func(req *http.Request) error,
	) (*UnlockLeadResponse, *http.Response, error)
	ListUnlockedLeads(
		ctx context.Context,
		req ListUnlockedLeadsRequest,
		reqEditors ...func(req *http.Request) error,
	) (*ListUnlockedLeadsResponse, *http.Response, error)
	GetLeadFyndrProfileTariffOptions(
		ctx context.Context,
		req GetLeadFyndrProfileTariffOptionsRequest,
		reqEditors ...func(req *http.Request) error,
	) (*leadfyndrv2.TariffOptions, *http.Response, error)
	GetLeadFyndrProfile(
		ctx context.Context,
		req GetLeadFyndrProfileRequest,
		reqEditors ...func(req *http.Request) error,
	) (*any, *http.Response, error)
	GetLeadFyndrProfileRequest(
		ctx context.Context,
		req GetLeadFyndrProfileRequestRequest,
		reqEditors ...func(req *http.Request) error,
	) (*leadfyndrv2.ProfileRequest, *http.Response, error)
	CreateLeadFyndrAccessRequest(
		ctx context.Context,
		req CreateLeadFyndrAccessRequestRequest,
		reqEditors ...func(req *http.Request) error,
	) (*CreateLeadFyndrAccessRequestResponse, *http.Response, error)
}
type clientImpl struct {
	client httpclient.RequestRunner
}

func NewClient(client httpclient.RequestRunner) Client {
	return &clientImpl{client: client}
}

// Get cities in DACH.
func (c *clientImpl) GetCities(
	ctx context.Context,
	req GetCitiesRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]leadfyndrv2.City, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []leadfyndrv2.City
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Reserve a unlocked lead for the given customerId.
func (c *clientImpl) ReserveUnlockedLead(
	ctx context.Context,
	req ReserveUnlockedLeadRequest,
	reqEditors ...func(req *http.Request) error,
) (*ReserveUnlockedLeadResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response ReserveUnlockedLeadResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Removes a reservation on a unlocked lead for the given customerId.
func (c *clientImpl) RemoveUnlockedLeadReservation(
	ctx context.Context,
	req RemoveUnlockedLeadReservationRequest,
	reqEditors ...func(req *http.Request) error,
) (*RemoveUnlockedLeadReservationResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response RemoveUnlockedLeadReservationResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get a simple lead. Use the unlocked route for more detail leads.
func (c *clientImpl) GetLead(
	ctx context.Context,
	req GetLeadRequest,
	reqEditors ...func(req *http.Request) error,
) (*leadfyndrv2.Lead, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response leadfyndrv2.Lead
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get all leads. Use the unlocked routes for more lead details.
func (c *clientImpl) ListLeads(
	ctx context.Context,
	req ListLeadsRequest,
	reqEditors ...func(req *http.Request) error,
) (*ListLeadsResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response ListLeadsResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get a detail of a unlocked lead. Organisation can unlock leads.
func (c *clientImpl) GetUnlockedLead(
	ctx context.Context,
	req GetUnlockedLeadRequest,
	reqEditors ...func(req *http.Request) error,
) (*leadfyndrv2.UnlockedLead, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response leadfyndrv2.UnlockedLead
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Unlock a lead for the given customerId.
func (c *clientImpl) UnlockLead(
	ctx context.Context,
	req UnlockLeadRequest,
	reqEditors ...func(req *http.Request) error,
) (*UnlockLeadResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response UnlockLeadResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get all unlocked leads. Organisation can unlock leads.
func (c *clientImpl) ListUnlockedLeads(
	ctx context.Context,
	req ListUnlockedLeadsRequest,
	reqEditors ...func(req *http.Request) error,
) (*ListUnlockedLeadsResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response ListUnlockedLeadsResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get lead tariff options. How many leads did you unlock this month?
func (c *clientImpl) GetLeadFyndrProfileTariffOptions(
	ctx context.Context,
	req GetLeadFyndrProfileTariffOptionsRequest,
	reqEditors ...func(req *http.Request) error,
) (*leadfyndrv2.TariffOptions, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response leadfyndrv2.TariffOptions
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get your LeadFyndr profile.
func (c *clientImpl) GetLeadFyndrProfile(
	ctx context.Context,
	req GetLeadFyndrProfileRequest,
	reqEditors ...func(req *http.Request) error,
) (*any, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response any
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get your LeadFyndr request.
func (c *clientImpl) GetLeadFyndrProfileRequest(
	ctx context.Context,
	req GetLeadFyndrProfileRequestRequest,
	reqEditors ...func(req *http.Request) error,
) (*leadfyndrv2.ProfileRequest, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response leadfyndrv2.ProfileRequest
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Create a new access request for LeadFyndr.
func (c *clientImpl) CreateLeadFyndrAccessRequest(
	ctx context.Context,
	req CreateLeadFyndrAccessRequestRequest,
	reqEditors ...func(req *http.Request) error,
) (*CreateLeadFyndrAccessRequestResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response CreateLeadFyndrAccessRequestResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}
