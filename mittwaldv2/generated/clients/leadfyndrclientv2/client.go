package leadfyndrclientv2

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/leadfyndrv2"
	"github.com/mittwald/api-client-go/pkg/httpclient"
	"github.com/mittwald/api-client-go/pkg/httperr"
)

type Client interface {
	GetLeadFyndrProfileRequestExperimental(
		ctx context.Context,
		req GetLeadFyndrProfileRequestExperimentalRequest,
		reqEditors ...func(req *http.Request) error,
	) (*leadfyndrv2.ProfileRequest, *http.Response, error)
	CreateLeadFyndrAccessRequestExperimental(
		ctx context.Context,
		req CreateLeadFyndrAccessRequestExperimentalRequest,
		reqEditors ...func(req *http.Request) error,
	) (*CreateLeadFyndrAccessRequestExperimentalResponse, *http.Response, error)
	GetCitiesExperimental(
		ctx context.Context,
		req GetCitiesExperimentalRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]leadfyndrv2.City, *http.Response, error)
	GetLeadExperimental(
		ctx context.Context,
		req GetLeadExperimentalRequest,
		reqEditors ...func(req *http.Request) error,
	) (*leadfyndrv2.Lead, *http.Response, error)
	GetLeadFyndrProfileExperimental(
		ctx context.Context,
		req GetLeadFyndrProfileExperimentalRequest,
		reqEditors ...func(req *http.Request) error,
	) (*any, *http.Response, error)
	GetLeadFyndrProfileTariffOptionsExperimental(
		ctx context.Context,
		req GetLeadFyndrProfileTariffOptionsExperimentalRequest,
		reqEditors ...func(req *http.Request) error,
	) (*leadfyndrv2.TariffOptions, *http.Response, error)
	GetUnlockedLeadExperimental(
		ctx context.Context,
		req GetUnlockedLeadExperimentalRequest,
		reqEditors ...func(req *http.Request) error,
	) (*leadfyndrv2.UnlockedLead, *http.Response, error)
	UnlockLeadExperimental(
		ctx context.Context,
		req UnlockLeadExperimentalRequest,
		reqEditors ...func(req *http.Request) error,
	) (*UnlockLeadExperimentalResponse, *http.Response, error)
	ListLeadsExperimental(
		ctx context.Context,
		req ListLeadsExperimentalRequest,
		reqEditors ...func(req *http.Request) error,
	) (*ListLeadsExperimentalResponse, *http.Response, error)
	ListUnlockedLeadsExperimental(
		ctx context.Context,
		req ListUnlockedLeadsExperimentalRequest,
		reqEditors ...func(req *http.Request) error,
	) (*ListUnlockedLeadsExperimentalResponse, *http.Response, error)
	ReserveUnlockedLeadExperimental(
		ctx context.Context,
		req ReserveUnlockedLeadExperimentalRequest,
		reqEditors ...func(req *http.Request) error,
	) (*ReserveUnlockedLeadExperimentalResponse, *http.Response, error)
	RemoveUnlockedLeadReservationExperimental(
		ctx context.Context,
		req RemoveUnlockedLeadReservationExperimentalRequest,
		reqEditors ...func(req *http.Request) error,
	) (*RemoveUnlockedLeadReservationExperimentalResponse, *http.Response, error)
}
type clientImpl struct {
	client httpclient.RequestRunner
}

func NewClient(client httpclient.RequestRunner) Client {
	return &clientImpl{client: client}
}

// Get your LeadFyndr request.
func (c *clientImpl) GetLeadFyndrProfileRequestExperimental(
	ctx context.Context,
	req GetLeadFyndrProfileRequestExperimentalRequest,
	reqEditors ...func(req *http.Request) error,
) (*leadfyndrv2.ProfileRequest, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response leadfyndrv2.ProfileRequest
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Create a new access request for LeadFyndr.
func (c *clientImpl) CreateLeadFyndrAccessRequestExperimental(
	ctx context.Context,
	req CreateLeadFyndrAccessRequestExperimentalRequest,
	reqEditors ...func(req *http.Request) error,
) (*CreateLeadFyndrAccessRequestExperimentalResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response CreateLeadFyndrAccessRequestExperimentalResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get cities in DACH.
func (c *clientImpl) GetCitiesExperimental(
	ctx context.Context,
	req GetCitiesExperimentalRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]leadfyndrv2.City, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []leadfyndrv2.City
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get a simple lead. Use the unlocked route for more detail leads.
func (c *clientImpl) GetLeadExperimental(
	ctx context.Context,
	req GetLeadExperimentalRequest,
	reqEditors ...func(req *http.Request) error,
) (*leadfyndrv2.Lead, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response leadfyndrv2.Lead
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get your LeadFyndr profile.
func (c *clientImpl) GetLeadFyndrProfileExperimental(
	ctx context.Context,
	req GetLeadFyndrProfileExperimentalRequest,
	reqEditors ...func(req *http.Request) error,
) (*any, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response any
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get lead tariff options. How many leads did you unlock this month?
func (c *clientImpl) GetLeadFyndrProfileTariffOptionsExperimental(
	ctx context.Context,
	req GetLeadFyndrProfileTariffOptionsExperimentalRequest,
	reqEditors ...func(req *http.Request) error,
) (*leadfyndrv2.TariffOptions, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response leadfyndrv2.TariffOptions
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get a detail of a unlocked lead. Organisation can unlock leads.
func (c *clientImpl) GetUnlockedLeadExperimental(
	ctx context.Context,
	req GetUnlockedLeadExperimentalRequest,
	reqEditors ...func(req *http.Request) error,
) (*leadfyndrv2.UnlockedLead, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response leadfyndrv2.UnlockedLead
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Unlock a lead for the given customerId.
func (c *clientImpl) UnlockLeadExperimental(
	ctx context.Context,
	req UnlockLeadExperimentalRequest,
	reqEditors ...func(req *http.Request) error,
) (*UnlockLeadExperimentalResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response UnlockLeadExperimentalResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get all leads. Use the unlocked routes for more lead details.
func (c *clientImpl) ListLeadsExperimental(
	ctx context.Context,
	req ListLeadsExperimentalRequest,
	reqEditors ...func(req *http.Request) error,
) (*ListLeadsExperimentalResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response ListLeadsExperimentalResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get all unlocked leads. Organisation can unlock leads.
func (c *clientImpl) ListUnlockedLeadsExperimental(
	ctx context.Context,
	req ListUnlockedLeadsExperimentalRequest,
	reqEditors ...func(req *http.Request) error,
) (*ListUnlockedLeadsExperimentalResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response ListUnlockedLeadsExperimentalResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Reserve a unlocked lead for the given customerId.
func (c *clientImpl) ReserveUnlockedLeadExperimental(
	ctx context.Context,
	req ReserveUnlockedLeadExperimentalRequest,
	reqEditors ...func(req *http.Request) error,
) (*ReserveUnlockedLeadExperimentalResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response ReserveUnlockedLeadExperimentalResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Removes a reservation on a unlocked lead for the given customerId.
func (c *clientImpl) RemoveUnlockedLeadReservationExperimental(
	ctx context.Context,
	req RemoveUnlockedLeadReservationExperimentalRequest,
	reqEditors ...func(req *http.Request) error,
) (*RemoveUnlockedLeadReservationExperimentalResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response RemoveUnlockedLeadReservationExperimentalResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}
