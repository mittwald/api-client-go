package containerclientv2

import (
	"io"
	"net/http"
	"net/url"
	"strconv"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// GetContainerImageConfigRequest models a request for the
// 'container-get-container-image-config' operation. See [1] for more information.
//
// Get a ContainerImageConfig.
//
// [1]:
// https://developer.mittwald.de/docs/v2/reference/container/container-get-container-image-config
type GetContainerImageConfigRequest struct {
	ImageReference              string
	UseCredentialsForProjectID  *string
	UseCredentialsForRegistryID *string
	GenerateAiData              *bool
}

// BuildRequest builds an *http.Request instance from this request that may be used
// with any regular *http.Client instance.
func (r *GetContainerImageConfigRequest) BuildRequest() (*http.Request, error) {
	body, contentType, err := r.body()
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodGet, r.url(), body)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", contentType)
	return req, nil
}

func (r *GetContainerImageConfigRequest) body() (io.Reader, string, error) {
	return nil, "", nil
}

func (r *GetContainerImageConfigRequest) url() string {
	u := url.URL{
		Path:     "/v2/container-image-config",
		RawQuery: r.query().Encode(),
	}
	return u.String()
}

func (r *GetContainerImageConfigRequest) query() url.Values {
	q := make(url.Values)
	q.Set("imageReference", r.ImageReference)
	if r.UseCredentialsForProjectID != nil {
		q.Set("useCredentialsForProjectId", *r.UseCredentialsForProjectID)
	}
	if r.UseCredentialsForRegistryID != nil {
		q.Set("useCredentialsForRegistryId", *r.UseCredentialsForRegistryID)
	}
	if r.GenerateAiData != nil {
		q.Set("generateAiData", strconv.FormatBool(*r.GenerateAiData))
	}
	return q
}
