package containerclientv2

import (
	"fmt"
	"io"
	"net/http"
	"net/url"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// GetServiceLogsRequest models a request for the 'container-get-service-logs'
// operation. See [1] for more information.
//
// Get logs belonging to a Service.
//
// [1]:
// https://developer.mittwald.de/docs/v2/reference/container/container-get-service-logs
type GetServiceLogsRequest struct {
	StackID   string
	ServiceID string
	Tail      *int64
}

// BuildRequest builds an *http.Request instance from this request that may be used
// with any regular *http.Client instance.
func (r *GetServiceLogsRequest) BuildRequest(reqEditors ...func(req *http.Request) error) (*http.Request, error) {
	body, contentType, err := r.body()
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodGet, r.url(), body)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", contentType)
	for _, editor := range reqEditors {
		if err := editor(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

func (r *GetServiceLogsRequest) body() (io.Reader, string, error) {
	return nil, "", nil
}

func (r *GetServiceLogsRequest) url() string {
	u := url.URL{
		Path:     fmt.Sprintf("/v2/stacks/%s/services/%s/logs", url.PathEscape(r.StackID), url.PathEscape(r.ServiceID)),
		RawQuery: r.query().Encode(),
	}
	return u.String()
}

func (r *GetServiceLogsRequest) query() url.Values {
	q := make(url.Values)
	if r.Tail != nil {
		q.Set("tail", fmt.Sprintf("%d", *r.Tail))
	}
	return q
}
