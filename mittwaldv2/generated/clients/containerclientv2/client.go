package containerclientv2

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/containerv2"
	"github.com/mittwald/api-client-go/pkg/httpclient"
	"github.com/mittwald/api-client-go/pkg/httperr"
)

type Client interface {
	ListRegistries(
		ctx context.Context,
		req ListRegistriesRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]containerv2.Registry, *http.Response, error)
	CreateRegistry(
		ctx context.Context,
		req CreateRegistryRequest,
		reqEditors ...func(req *http.Request) error,
	) (*containerv2.Registry, *http.Response, error)
	GetStack(
		ctx context.Context,
		req GetStackRequest,
		reqEditors ...func(req *http.Request) error,
	) (*containerv2.StackResponse, *http.Response, error)
	DeclareStack(
		ctx context.Context,
		req DeclareStackRequest,
		reqEditors ...func(req *http.Request) error,
	) (*containerv2.StackResponse, *http.Response, error)
	UpdateStack(
		ctx context.Context,
		req UpdateStackRequest,
		reqEditors ...func(req *http.Request) error,
	) (*containerv2.StackResponse, *http.Response, error)
	GetRegistry(
		ctx context.Context,
		req GetRegistryRequest,
		reqEditors ...func(req *http.Request) error,
	) (*containerv2.Registry, *http.Response, error)
	DeleteRegistry(
		ctx context.Context,
		req DeleteRegistryRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	UpdateRegistry(
		ctx context.Context,
		req UpdateRegistryRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	GetVolume(
		ctx context.Context,
		req GetVolumeRequest,
		reqEditors ...func(req *http.Request) error,
	) (*containerv2.VolumeResponse, *http.Response, error)
	DeleteVolume(
		ctx context.Context,
		req DeleteVolumeRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	GetContainerImageConfig(
		ctx context.Context,
		req GetContainerImageConfigRequest,
		reqEditors ...func(req *http.Request) error,
	) (*containerv2.ContainerImageConfig, *http.Response, error)
	GetServiceLogs(
		ctx context.Context,
		req GetServiceLogsRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	GetService(
		ctx context.Context,
		req GetServiceRequest,
		reqEditors ...func(req *http.Request) error,
	) (*containerv2.ServiceResponse, *http.Response, error)
	ListServices(
		ctx context.Context,
		req ListServicesRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]containerv2.ServiceResponse, *http.Response, error)
	ListStacks(
		ctx context.Context,
		req ListStacksRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]containerv2.StackResponse, *http.Response, error)
	ListVolumes(
		ctx context.Context,
		req ListVolumesRequest,
		reqEditors ...func(req *http.Request) error,
	) (*[]containerv2.VolumeResponse, *http.Response, error)
	RecreateService(
		ctx context.Context,
		req RecreateServiceRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	RestartService(
		ctx context.Context,
		req RestartServiceRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	StartService(
		ctx context.Context,
		req StartServiceRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	StopService(
		ctx context.Context,
		req StopServiceRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
	ValidateContainerRegistryUri(
		ctx context.Context,
		req ValidateContainerRegistryUriRequest,
		reqEditors ...func(req *http.Request) error,
	) (*ValidateContainerRegistryUriResponse, *http.Response, error)
	ValidateRegistryCredentials(
		ctx context.Context,
		req ValidateRegistryCredentialsRequest,
		reqEditors ...func(req *http.Request) error,
	) (*ValidateRegistryCredentialsResponse, *http.Response, error)
	PullImageForService(
		ctx context.Context,
		req PullImageForServiceRequest,
		reqEditors ...func(req *http.Request) error,
	) (*http.Response, error)
}
type clientImpl struct {
	client httpclient.RequestRunner
}

func NewClient(client httpclient.RequestRunner) Client {
	return &clientImpl{client: client}
}

// List Registries belonging to a Project.
func (c *clientImpl) ListRegistries(
	ctx context.Context,
	req ListRegistriesRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]containerv2.Registry, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []containerv2.Registry
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Create a Registry.
func (c *clientImpl) CreateRegistry(
	ctx context.Context,
	req CreateRegistryRequest,
	reqEditors ...func(req *http.Request) error,
) (*containerv2.Registry, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response containerv2.Registry
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get a Stack.
func (c *clientImpl) GetStack(
	ctx context.Context,
	req GetStackRequest,
	reqEditors ...func(req *http.Request) error,
) (*containerv2.StackResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response containerv2.StackResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Declaratively create, update or delete Services or Volumes belonging to a Stack.
func (c *clientImpl) DeclareStack(
	ctx context.Context,
	req DeclareStackRequest,
	reqEditors ...func(req *http.Request) error,
) (*containerv2.StackResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response containerv2.StackResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Create, update or delete Services or Volumes belonging to a Stack.
func (c *clientImpl) UpdateStack(
	ctx context.Context,
	req UpdateStackRequest,
	reqEditors ...func(req *http.Request) error,
) (*containerv2.StackResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response containerv2.StackResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get a Registry.
func (c *clientImpl) GetRegistry(
	ctx context.Context,
	req GetRegistryRequest,
	reqEditors ...func(req *http.Request) error,
) (*containerv2.Registry, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response containerv2.Registry
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Delete a Registry.
func (c *clientImpl) DeleteRegistry(
	ctx context.Context,
	req DeleteRegistryRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Update a Registry.
func (c *clientImpl) UpdateRegistry(
	ctx context.Context,
	req UpdateRegistryRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Get a Volume belonging to a Stack.
func (c *clientImpl) GetVolume(
	ctx context.Context,
	req GetVolumeRequest,
	reqEditors ...func(req *http.Request) error,
) (*containerv2.VolumeResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response containerv2.VolumeResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Delete a Volume belonging to a Stack.
func (c *clientImpl) DeleteVolume(
	ctx context.Context,
	req DeleteVolumeRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Get a ContainerImageConfig.
func (c *clientImpl) GetContainerImageConfig(
	ctx context.Context,
	req GetContainerImageConfigRequest,
	reqEditors ...func(req *http.Request) error,
) (*containerv2.ContainerImageConfig, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response containerv2.ContainerImageConfig
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Get logs belonging to a Service.
func (c *clientImpl) GetServiceLogs(
	ctx context.Context,
	req GetServiceLogsRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Get a Service belonging to a Stack.
func (c *clientImpl) GetService(
	ctx context.Context,
	req GetServiceRequest,
	reqEditors ...func(req *http.Request) error,
) (*containerv2.ServiceResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response containerv2.ServiceResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// List Services belonging to a Project.
func (c *clientImpl) ListServices(
	ctx context.Context,
	req ListServicesRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]containerv2.ServiceResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []containerv2.ServiceResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// List Stacks belonging to a Project.
func (c *clientImpl) ListStacks(
	ctx context.Context,
	req ListStacksRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]containerv2.StackResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []containerv2.StackResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// List Volumes belonging to a Project.
func (c *clientImpl) ListVolumes(
	ctx context.Context,
	req ListVolumesRequest,
	reqEditors ...func(req *http.Request) error,
) (*[]containerv2.VolumeResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response []containerv2.VolumeResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Recreate a Service.
func (c *clientImpl) RecreateService(
	ctx context.Context,
	req RecreateServiceRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Restart a started Service.
func (c *clientImpl) RestartService(
	ctx context.Context,
	req RestartServiceRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Start a stopped Service.
func (c *clientImpl) StartService(
	ctx context.Context,
	req StartServiceRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Stop a started Service.
func (c *clientImpl) StopService(
	ctx context.Context,
	req StopServiceRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}

// Validate a Registries' URI.
func (c *clientImpl) ValidateContainerRegistryUri(
	ctx context.Context,
	req ValidateContainerRegistryUriRequest,
	reqEditors ...func(req *http.Request) error,
) (*ValidateContainerRegistryUriResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response ValidateContainerRegistryUriResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Validate a Registries' credentials.
func (c *clientImpl) ValidateRegistryCredentials(
	ctx context.Context,
	req ValidateRegistryCredentialsRequest,
	reqEditors ...func(req *http.Request) error,
) (*ValidateRegistryCredentialsResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return nil, httpRes, err
	}

	var response ValidateRegistryCredentialsResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

// Pulls the latest version oof the Service's image and recreates the Service.
func (c *clientImpl) PullImageForService(
	ctx context.Context,
	req PullImageForServiceRequest,
	reqEditors ...func(req *http.Request) error,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest(reqEditors...)
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := httperr.ErrFromResponse(httpRes)
		return httpRes, err
	}

	return httpRes, nil
}
