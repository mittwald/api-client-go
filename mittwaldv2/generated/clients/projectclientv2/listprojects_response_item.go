package projectclientv2

import (
	"errors"
	"fmt"
	"time"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/projectv2"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// This data type was generated from the following JSON schema:
// type: "object"
// properties:
//    "backupStorageUsageInBytes":
//        type: "integer"
//        format: "int64"
//    "backupStorageUsageInBytesSetAt":
//        type: "string"
//        format: "date-time"
//    "createdAt":
//        type: "string"
//        format: "date-time"
//    "customerId":
//        type: "string"
//    "customerMeta":
//        type: "object"
//        properties:
//            "id":
//                type: "string"
//        required:
//            - "id"
//    "description":
//        type: "string"
//    "disableReason": {"$ref": "#/components/schemas/de.mittwald.v1.project.DisableReason"}
//    "disabledAt":
//        type: "string"
//        format: "date-time"
//    "enabled":
//        type: "boolean"
//    "features":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.project.ProjectFeature"}
//        description: "deprecated by property supportedFeatures"
//        deprecated: true
//    "id":
//        type: "string"
//    "imageRefId":
//        type: "string"
//    "isReady":
//        type: "boolean"
//        description: "deprecated"
//        deprecated: true
//    "projectHostingId":
//        type: "string"
//        format: "uuid"
//    "readiness": {"$ref": "#/components/schemas/de.mittwald.v1.project.DeprecatedProjectReadinessStatus"}
//    "serverId":
//        type: "string"
//    "shortId":
//        type: "string"
//    "status": {"$ref": "#/components/schemas/de.mittwald.v1.project.ProjectStatus"}
//    "statusSetAt":
//        type: "string"
//        format: "date-time"
//    "supportedFeatures":
//        type: "array"
//        items: {"$ref": "#/components/schemas/de.mittwald.v1.project.ProjectFeature"}
//    "webStorageUsageInBytes":
//        type: "integer"
//        format: "int64"
//    "webStorageUsageInBytesSetAt":
//        type: "string"
//        format: "date-time"
// required:
//    - "id"
//    - "shortId"
//    - "description"
//    - "enabled"
//    - "customerMeta"
//    - "customerId"
//    - "createdAt"
//    - "isReady"
//    - "readiness"
//    - "status"
//    - "statusSetAt"
//    - "webStorageUsageInBytes"
//    - "webStorageUsageInBytesSetAt"
//    - "backupStorageUsageInBytes"
//    - "backupStorageUsageInBytesSetAt"
//    - "supportedFeatures"

type ListProjectsResponseItem struct {
	BackupStorageUsageInBytes      int64                                      `json:"backupStorageUsageInBytes"`
	BackupStorageUsageInBytesSetAt time.Time                                  `json:"backupStorageUsageInBytesSetAt"`
	CreatedAt                      time.Time                                  `json:"createdAt"`
	CustomerId                     string                                     `json:"customerId"`
	CustomerMeta                   ListProjectsResponseItemCustomerMeta       `json:"customerMeta"`
	Description                    string                                     `json:"description"`
	DisableReason                  *projectv2.DisableReason                   `json:"disableReason,omitempty"`
	DisabledAt                     *time.Time                                 `json:"disabledAt,omitempty"`
	Enabled                        bool                                       `json:"enabled"`
	Features                       []projectv2.ProjectFeature                 `json:"features,omitempty"`
	Id                             string                                     `json:"id"`
	ImageRefId                     *string                                    `json:"imageRefId,omitempty"`
	IsReady                        bool                                       `json:"isReady"`
	ProjectHostingId               *string                                    `json:"projectHostingId,omitempty"`
	Readiness                      projectv2.DeprecatedProjectReadinessStatus `json:"readiness"`
	ServerId                       *string                                    `json:"serverId,omitempty"`
	ShortId                        string                                     `json:"shortId"`
	Status                         projectv2.ProjectStatus                    `json:"status"`
	StatusSetAt                    time.Time                                  `json:"statusSetAt"`
	SupportedFeatures              []projectv2.ProjectFeature                 `json:"supportedFeatures"`
	WebStorageUsageInBytes         int64                                      `json:"webStorageUsageInBytes"`
	WebStorageUsageInBytesSetAt    time.Time                                  `json:"webStorageUsageInBytesSetAt"`
}

func (o *ListProjectsResponseItem) Validate() error {
	if err := o.CustomerMeta.Validate(); err != nil {
		return fmt.Errorf("invalid property customerMeta: %w", err)
	}
	if err := func() error {
		if o.DisableReason == nil {
			return nil
		}
		return o.DisableReason.Validate()
	}(); err != nil {
		return fmt.Errorf("invalid property disableReason: %w", err)
	}
	if err := func() error {
		if o.Features == nil {
			return nil
		}
		return func() error {
			for i := range o.Features {
				if err := o.Features[i].Validate(); err != nil {
					return fmt.Errorf("item %d is invalid %w", i, err)
				}
			}
			return nil
		}()
	}(); err != nil {
		return fmt.Errorf("invalid property features: %w", err)
	}
	if err := o.Readiness.Validate(); err != nil {
		return fmt.Errorf("invalid property readiness: %w", err)
	}
	if err := o.Status.Validate(); err != nil {
		return fmt.Errorf("invalid property status: %w", err)
	}
	if o.SupportedFeatures == nil {
		return errors.New("property supportedFeatures is required, but not set")
	}
	if err := func() error {
		for i := range o.SupportedFeatures {
			if err := o.SupportedFeatures[i].Validate(); err != nil {
				return fmt.Errorf("item %d is invalid %w", i, err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("invalid property supportedFeatures: %w", err)
	}
	return nil
}
