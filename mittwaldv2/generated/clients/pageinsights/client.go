package pageinsights

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/mittwald/api-client-go/mittwaldv2/httpclient"
	"github.com/mittwald/api-client-go/mittwaldv2/httperr"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

type Client interface {
	GetPerformanceData(
		ctx context.Context,
		req GetPerformanceDataRequest,
	) (*GetPerformanceDataResponse, *http.Response, error)
	GetStraceData(
		ctx context.Context,
		req GetStraceDataRequest,
	) (*GetStraceDataResponse, *http.Response, error)
	ListPerformanceDataForProject(
		ctx context.Context,
		req ListPerformanceDataForProjectRequest,
	) (*[]ListPerformanceDataForProjectResponseItem, *http.Response, error)
	ScheduleStrace(
		ctx context.Context,
		req ScheduleStraceRequest,
	) (*ScheduleStraceResponse, *http.Response, error)
}
type clientImpl struct {
	client httpclient.RequestRunner
}

func NewClient(client httpclient.RequestRunner) Client {
	return &clientImpl{client: client}
}

//Get detailed performance data for a given domain and path.
func (c *clientImpl) GetPerformanceData(
	ctx context.Context,
	req GetPerformanceDataRequest,
) (*GetPerformanceDataResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response GetPerformanceDataResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//Get all data for a given strace.
func (c *clientImpl) GetStraceData(
	ctx context.Context,
	req GetStraceDataRequest,
) (*GetStraceDataResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response GetStraceDataResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//List websites (specified as domain and path) from a project where performance data is available.
func (c *clientImpl) ListPerformanceDataForProject(
	ctx context.Context,
	req ListPerformanceDataForProjectRequest,
) (*[]ListPerformanceDataForProjectResponseItem, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response []ListPerformanceDataForProjectResponseItem
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//Schedule a strace measurement for a single http request.
func (c *clientImpl) ScheduleStrace(
	ctx context.Context,
	req ScheduleStraceRequest,
) (*ScheduleStraceResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response ScheduleStraceResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}
