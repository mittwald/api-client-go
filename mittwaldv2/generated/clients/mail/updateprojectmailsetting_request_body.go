package mail

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

//This data type was generated from the following JSON schema:
// oneOf:
//    - type: "object"
//      properties:
//        "blacklist":
//            type: "array"
//            items:
//                type: "string"
//                format: "idn-email"
//      required:
//        - "blacklist"
//    - type: "object"
//      properties:
//        "whitelist":
//            type: "array"
//            items:
//                type: "string"
//                format: "idn-email"
//      required:
//        - "whitelist"
// description: UpdateProjectMailSettingRequestBody models the JSON body of a 'mail-update-project-mail-setting' request

type UpdateProjectMailSettingRequestBody struct {
	AlternativeUpdateProjectMailSettingRequestBodyAlternative1 *UpdateProjectMailSettingRequestBodyAlternative1
	AlternativeUpdateProjectMailSettingRequestBodyAlternative2 *UpdateProjectMailSettingRequestBodyAlternative2
}

func (a *UpdateProjectMailSettingRequestBody) MarshalJSON() ([]byte, error) {
	if a.AlternativeUpdateProjectMailSettingRequestBodyAlternative1 != nil {
		return json.Marshal(a.AlternativeUpdateProjectMailSettingRequestBodyAlternative1)
	}
	if a.AlternativeUpdateProjectMailSettingRequestBodyAlternative2 != nil {
		return json.Marshal(a.AlternativeUpdateProjectMailSettingRequestBodyAlternative2)
	}
	return []byte("null"), nil
}

func (a *UpdateProjectMailSettingRequestBody) UnmarshalJSON(input []byte) error {
	reader := bytes.NewReader(input)
	decodedAtLeastOnce := false
	dec := json.NewDecoder(reader)
	dec.DisallowUnknownFields()

	reader.Reset(input)
	var alternativeUpdateProjectMailSettingRequestBodyAlternative1 UpdateProjectMailSettingRequestBodyAlternative1
	if err := dec.Decode(&alternativeUpdateProjectMailSettingRequestBodyAlternative1); err == nil {
		//subtype: *generator.ObjectType
		if vErr := alternativeUpdateProjectMailSettingRequestBodyAlternative1.Validate(); vErr == nil {
			a.AlternativeUpdateProjectMailSettingRequestBodyAlternative1 = &alternativeUpdateProjectMailSettingRequestBodyAlternative1
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeUpdateProjectMailSettingRequestBodyAlternative2 UpdateProjectMailSettingRequestBodyAlternative2
	if err := dec.Decode(&alternativeUpdateProjectMailSettingRequestBodyAlternative2); err == nil {
		//subtype: *generator.ObjectType
		if vErr := alternativeUpdateProjectMailSettingRequestBodyAlternative2.Validate(); vErr == nil {
			a.AlternativeUpdateProjectMailSettingRequestBodyAlternative2 = &alternativeUpdateProjectMailSettingRequestBodyAlternative2
			decodedAtLeastOnce = true
		}
	}

	if !decodedAtLeastOnce {
		return fmt.Errorf("could not unmarshal into any alternative for type %T", a)
	}
	return nil
}

func (a *UpdateProjectMailSettingRequestBody) Validate() error {
	if a.AlternativeUpdateProjectMailSettingRequestBodyAlternative1 != nil {
		return a.AlternativeUpdateProjectMailSettingRequestBodyAlternative1.Validate()
	}
	if a.AlternativeUpdateProjectMailSettingRequestBodyAlternative2 != nil {
		return a.AlternativeUpdateProjectMailSettingRequestBodyAlternative2.Validate()
	}
	return errors.New("no alternative set")
}
