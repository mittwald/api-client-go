package mail

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/schemas/mailv1"
	"github.com/mittwald/api-client-go/mittwaldv2/httpclient"
	"github.com/mittwald/api-client-go/mittwaldv2/httperr"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

type Client interface {
	ListDeliveryBoxes(
		ctx context.Context,
		req ListDeliveryBoxesRequest,
	) (*[]mailv1.Deliverybox, *http.Response, error)
	CreateDeliverybox(
		ctx context.Context,
		req CreateDeliveryboxRequest,
	) (*CreateDeliveryboxResponse, *http.Response, error)
	ListMailAddresses(
		ctx context.Context,
		req ListMailAddressesRequest,
	) (*[]mailv1.MailAddress, *http.Response, error)
	CreateMailAddress(
		ctx context.Context,
		req CreateMailAddressRequest,
	) (*CreateMailAddressResponse, *http.Response, error)
	GetDeliveryBox(
		ctx context.Context,
		req GetDeliveryBoxRequest,
	) (*mailv1.Deliverybox, *http.Response, error)
	DeleteDeliveryBox(
		ctx context.Context,
		req DeleteDeliveryBoxRequest,
	) (*http.Response, error)
	GetMailAddress(
		ctx context.Context,
		req GetMailAddressRequest,
	) (*mailv1.MailAddress, *http.Response, error)
	DeleteMailAddress(
		ctx context.Context,
		req DeleteMailAddressRequest,
	) (*http.Response, error)
	UpdateDescriptionDeprecated(
		ctx context.Context,
		req UpdateDescriptionDeprecatedRequest,
	) (*http.Response, error)
	UpdatePasswordDeprecated(
		ctx context.Context,
		req UpdatePasswordDeprecatedRequest,
	) (*http.Response, error)
	ListProjectMailSettings(
		ctx context.Context,
		req ListProjectMailSettingsRequest,
	) (*ListProjectMailSettingsResponse, *http.Response, error)
	MailaddressUpdateAddressDeprecated(
		ctx context.Context,
		req MailaddressUpdateAddressDeprecatedRequest,
	) (*http.Response, error)
	ProjectsettingUpdateBlacklistDeprecated(
		ctx context.Context,
		req ProjectsettingUpdateBlacklistDeprecatedRequest,
	) (*http.Response, error)
	ProjectsettingUpdateWhitelistDeprecated(
		ctx context.Context,
		req ProjectsettingUpdateWhitelistDeprecatedRequest,
	) (*http.Response, error)
	UpdateDeliveryBoxDescription(
		ctx context.Context,
		req UpdateDeliveryBoxDescriptionRequest,
	) (*http.Response, error)
	UpdateDeliveryBoxPassword(
		ctx context.Context,
		req UpdateDeliveryBoxPasswordRequest,
	) (*http.Response, error)
	UpdateMailAddressAddress(
		ctx context.Context,
		req UpdateMailAddressAddressRequest,
	) (*http.Response, error)
	UpdateMailAddressAutoresponderV2Deprecated(
		ctx context.Context,
		req UpdateMailAddressAutoresponderV2DeprecatedRequest,
	) (*http.Response, error)
	UpdateMailAddressAutoresponder(
		ctx context.Context,
		req UpdateMailAddressAutoresponderRequest,
	) (*http.Response, error)
	UpdateMailAddressCatchAll(
		ctx context.Context,
		req UpdateMailAddressCatchAllRequest,
	) (*http.Response, error)
	UpdateMailAddressCatchallV2Deprecated(
		ctx context.Context,
		req UpdateMailAddressCatchallV2DeprecatedRequest,
	) (*http.Response, error)
	UpdateMailAddressForwardAddressesV2Deprecated(
		ctx context.Context,
		req UpdateMailAddressForwardAddressesV2DeprecatedRequest,
	) (*http.Response, error)
	UpdateMailAddressForwardAddresses(
		ctx context.Context,
		req UpdateMailAddressForwardAddressesRequest,
	) (*http.Response, error)
	UpdateMailAddressPasswordV2Deprecated(
		ctx context.Context,
		req UpdateMailAddressPasswordV2DeprecatedRequest,
	) (*http.Response, error)
	UpdateMailAddressPassword(
		ctx context.Context,
		req UpdateMailAddressPasswordRequest,
	) (*http.Response, error)
	UpdateMailAddressQuotaV2Deprecated(
		ctx context.Context,
		req UpdateMailAddressQuotaV2DeprecatedRequest,
	) (*http.Response, error)
	UpdateMailAddressQuota(
		ctx context.Context,
		req UpdateMailAddressQuotaRequest,
	) (*http.Response, error)
	UpdateMailAddressSpamProtectionV2Deprecated(
		ctx context.Context,
		req UpdateMailAddressSpamProtectionV2DeprecatedRequest,
	) (*http.Response, error)
	UpdateMailAddressSpamProtection(
		ctx context.Context,
		req UpdateMailAddressSpamProtectionRequest,
	) (*http.Response, error)
	UpdateProjectMailSetting(
		ctx context.Context,
		req UpdateProjectMailSettingRequest,
	) (*http.Response, error)
	UpdateProjectMailSettingV2Deprecated(
		ctx context.Context,
		req UpdateProjectMailSettingV2DeprecatedRequest,
	) (*http.Response, error)
}
type clientImpl struct {
	client httpclient.RequestRunner
}

func NewClient(client httpclient.RequestRunner) Client {
	return &clientImpl{client: client}
}

//List DeliveryBoxes belonging to a Project.
func (c *clientImpl) ListDeliveryBoxes(
	ctx context.Context,
	req ListDeliveryBoxesRequest,
) (*[]mailv1.Deliverybox, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response []mailv1.Deliverybox
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//Create a DeliveryBox.
func (c *clientImpl) CreateDeliverybox(
	ctx context.Context,
	req CreateDeliveryboxRequest,
) (*CreateDeliveryboxResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response CreateDeliveryboxResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//List MailAddresses belonging to a Project.
func (c *clientImpl) ListMailAddresses(
	ctx context.Context,
	req ListMailAddressesRequest,
) (*[]mailv1.MailAddress, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response []mailv1.MailAddress
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//Create a MailAddress.
func (c *clientImpl) CreateMailAddress(
	ctx context.Context,
	req CreateMailAddressRequest,
) (*CreateMailAddressResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response CreateMailAddressResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//Get a DeliveryBox.
func (c *clientImpl) GetDeliveryBox(
	ctx context.Context,
	req GetDeliveryBoxRequest,
) (*mailv1.Deliverybox, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response mailv1.Deliverybox
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//Delete a DeliveryBox.
func (c *clientImpl) DeleteDeliveryBox(
	ctx context.Context,
	req DeleteDeliveryBoxRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Get a MailAddress.
func (c *clientImpl) GetMailAddress(
	ctx context.Context,
	req GetMailAddressRequest,
) (*mailv1.MailAddress, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response mailv1.MailAddress
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//Delete a MailAddress.
func (c *clientImpl) DeleteMailAddress(
	ctx context.Context,
	req DeleteMailAddressRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update the description of an deliverybox
func (c *clientImpl) UpdateDescriptionDeprecated(
	ctx context.Context,
	req UpdateDescriptionDeprecatedRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update the password for a specific deliverybox
func (c *clientImpl) UpdatePasswordDeprecated(
	ctx context.Context,
	req UpdatePasswordDeprecatedRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//List mail settings of a Project.
func (c *clientImpl) ListProjectMailSettings(
	ctx context.Context,
	req ListProjectMailSettingsRequest,
) (*ListProjectMailSettingsResponse, *http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return nil, httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return nil, httpRes, err
	}

	var response ListProjectMailSettingsResponse
	if err := json.NewDecoder(httpRes.Body).Decode(&response); err != nil {
		return nil, httpRes, err
	}
	return &response, httpRes, nil
}

//Update mail-address
func (c *clientImpl) MailaddressUpdateAddressDeprecated(
	ctx context.Context,
	req MailaddressUpdateAddressDeprecatedRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update blacklist for a given project ID
func (c *clientImpl) ProjectsettingUpdateBlacklistDeprecated(
	ctx context.Context,
	req ProjectsettingUpdateBlacklistDeprecatedRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update whitelist for a given project ID
func (c *clientImpl) ProjectsettingUpdateWhitelistDeprecated(
	ctx context.Context,
	req ProjectsettingUpdateWhitelistDeprecatedRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update the description of a DeliveryBox.
func (c *clientImpl) UpdateDeliveryBoxDescription(
	ctx context.Context,
	req UpdateDeliveryBoxDescriptionRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update the password of a DeliveryBox.
func (c *clientImpl) UpdateDeliveryBoxPassword(
	ctx context.Context,
	req UpdateDeliveryBoxPasswordRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update a MailAddress.
func (c *clientImpl) UpdateMailAddressAddress(
	ctx context.Context,
	req UpdateMailAddressAddressRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update the autoresponder of a MailAddress.
func (c *clientImpl) UpdateMailAddressAutoresponderV2Deprecated(
	ctx context.Context,
	req UpdateMailAddressAutoresponderV2DeprecatedRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update the autoresponder of a MailAddress.
func (c *clientImpl) UpdateMailAddressAutoresponder(
	ctx context.Context,
	req UpdateMailAddressAutoresponderRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update the catchall of a MailAddress.
func (c *clientImpl) UpdateMailAddressCatchAll(
	ctx context.Context,
	req UpdateMailAddressCatchAllRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update the catchall of a MailAddress.
func (c *clientImpl) UpdateMailAddressCatchallV2Deprecated(
	ctx context.Context,
	req UpdateMailAddressCatchallV2DeprecatedRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update the forward addresses of a MailAddresses.
func (c *clientImpl) UpdateMailAddressForwardAddressesV2Deprecated(
	ctx context.Context,
	req UpdateMailAddressForwardAddressesV2DeprecatedRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update the forward addresses of a MailAddresses.
func (c *clientImpl) UpdateMailAddressForwardAddresses(
	ctx context.Context,
	req UpdateMailAddressForwardAddressesRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update the password for a MailAddress.
func (c *clientImpl) UpdateMailAddressPasswordV2Deprecated(
	ctx context.Context,
	req UpdateMailAddressPasswordV2DeprecatedRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update the password for a MailAddress.
func (c *clientImpl) UpdateMailAddressPassword(
	ctx context.Context,
	req UpdateMailAddressPasswordRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update the quota of a MailAddress.
func (c *clientImpl) UpdateMailAddressQuotaV2Deprecated(
	ctx context.Context,
	req UpdateMailAddressQuotaV2DeprecatedRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update the quota of a MailAddress.
func (c *clientImpl) UpdateMailAddressQuota(
	ctx context.Context,
	req UpdateMailAddressQuotaRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update the spam protection of a MailAddress.
func (c *clientImpl) UpdateMailAddressSpamProtectionV2Deprecated(
	ctx context.Context,
	req UpdateMailAddressSpamProtectionV2DeprecatedRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update the spam protection of a MailAddress.
func (c *clientImpl) UpdateMailAddressSpamProtection(
	ctx context.Context,
	req UpdateMailAddressSpamProtectionRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update a mail setting of a Project.
func (c *clientImpl) UpdateProjectMailSetting(
	ctx context.Context,
	req UpdateProjectMailSettingRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}

//Update a mail setting of a Project.
func (c *clientImpl) UpdateProjectMailSettingV2Deprecated(
	ctx context.Context,
	req UpdateProjectMailSettingV2DeprecatedRequest,
) (*http.Response, error) {
	httpReq, err := req.BuildRequest()
	if err != nil {
		return nil, err
	}

	httpRes, err := c.client.Do(httpReq.WithContext(ctx))
	if err != nil {
		return httpRes, err
	}

	if httpRes.StatusCode >= 400 {
		err := &httperr.ErrUnexpectedResponse{Response: httpRes}
		return httpRes, err
	}

	return httpRes, nil
}
