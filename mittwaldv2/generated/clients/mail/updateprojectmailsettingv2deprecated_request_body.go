package mail

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

//This data type was generated from the following JSON schema:
//oneOf:
//    - type: "object"
//      properties:
//        "blacklist":
//            type: "array"
//            items:
//                type: "string"
//                format: "idn-email"
//      required:
//        - "blacklist"
//    - type: "object"
//      properties:
//        "whitelist":
//            type: "array"
//            items:
//                type: "string"
//                format: "idn-email"
//      required:
//        - "whitelist"

type UpdateProjectMailSettingV2DeprecatedRequestBody struct {
	AlternativeUpdateProjectMailSettingV2DeprecatedRequestBodyAlternative1 *UpdateProjectMailSettingV2DeprecatedRequestBodyAlternative1
	AlternativeUpdateProjectMailSettingV2DeprecatedRequestBodyAlternative2 *UpdateProjectMailSettingV2DeprecatedRequestBodyAlternative2
}

func (a *UpdateProjectMailSettingV2DeprecatedRequestBody) MarshalJSON() ([]byte, error) {
	if a.AlternativeUpdateProjectMailSettingV2DeprecatedRequestBodyAlternative1 != nil {
		return json.Marshal(a.AlternativeUpdateProjectMailSettingV2DeprecatedRequestBodyAlternative1)
	}
	if a.AlternativeUpdateProjectMailSettingV2DeprecatedRequestBodyAlternative2 != nil {
		return json.Marshal(a.AlternativeUpdateProjectMailSettingV2DeprecatedRequestBodyAlternative2)
	}
	return []byte("null"), nil
}

func (a *UpdateProjectMailSettingV2DeprecatedRequestBody) UnmarshalJSON(input []byte) error {
	reader := bytes.NewReader(input)
	decodedAtLeastOnce := false
	dec := json.NewDecoder(reader)
	dec.DisallowUnknownFields()

	reader.Reset(input)
	var alternativeUpdateProjectMailSettingV2DeprecatedRequestBodyAlternative1 UpdateProjectMailSettingV2DeprecatedRequestBodyAlternative1
	if err := dec.Decode(&alternativeUpdateProjectMailSettingV2DeprecatedRequestBodyAlternative1); err == nil {
		//subtype: *generator.ObjectType
		if vErr := alternativeUpdateProjectMailSettingV2DeprecatedRequestBodyAlternative1.Validate(); vErr == nil {
			a.AlternativeUpdateProjectMailSettingV2DeprecatedRequestBodyAlternative1 = &alternativeUpdateProjectMailSettingV2DeprecatedRequestBodyAlternative1
			decodedAtLeastOnce = true
		}
	}

	reader.Reset(input)
	var alternativeUpdateProjectMailSettingV2DeprecatedRequestBodyAlternative2 UpdateProjectMailSettingV2DeprecatedRequestBodyAlternative2
	if err := dec.Decode(&alternativeUpdateProjectMailSettingV2DeprecatedRequestBodyAlternative2); err == nil {
		//subtype: *generator.ObjectType
		if vErr := alternativeUpdateProjectMailSettingV2DeprecatedRequestBodyAlternative2.Validate(); vErr == nil {
			a.AlternativeUpdateProjectMailSettingV2DeprecatedRequestBodyAlternative2 = &alternativeUpdateProjectMailSettingV2DeprecatedRequestBodyAlternative2
			decodedAtLeastOnce = true
		}
	}

	if !decodedAtLeastOnce {
		return fmt.Errorf("could not unmarshal into any alternative for type %T", a)
	}
	return nil
}

func (a *UpdateProjectMailSettingV2DeprecatedRequestBody) Validate() error {
	if a.AlternativeUpdateProjectMailSettingV2DeprecatedRequestBodyAlternative1 != nil {
		return a.AlternativeUpdateProjectMailSettingV2DeprecatedRequestBodyAlternative1.Validate()
	}
	if a.AlternativeUpdateProjectMailSettingV2DeprecatedRequestBodyAlternative2 != nil {
		return a.AlternativeUpdateProjectMailSettingV2DeprecatedRequestBodyAlternative2.Validate()
	}
	return errors.New("no alternative set")
}
