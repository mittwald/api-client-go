package mailclientv2

import (
	"io"
	"net/http"
	"net/url"
)

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

// MigrationListMigrationsRequest models a request for the
// 'mail-migration-list-migrations' operation. See [1] for more information.
//
// List Migrations belonging to a Project in customer center or mStudio.
//
// In case you want to list the Migrations for a p-Account you will have to use
// `commons.LegacyBearerAuthentication` and `commons.AccessToken` for
// authentication.
// If you want to list the Migrations for a mStudio-project you will have to use
// `commons.AccessToken` for authentication.
//
// [1]:
// https://developer.mittwald.de/docs/v2/reference/mail/mail-migration-list-migrations
type MigrationListMigrationsRequest struct {
	PAccountName *string
	ProjectID    *string
}

// BuildRequest builds an *http.Request instance from this request that may be used
// with any regular *http.Client instance.
func (r *MigrationListMigrationsRequest) BuildRequest() (*http.Request, error) {
	body, contentType, err := r.body()
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodGet, r.url(), body)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", contentType)
	return req, nil
}

func (r *MigrationListMigrationsRequest) body() (io.Reader, string, error) {
	return nil, "", nil
}

func (r *MigrationListMigrationsRequest) url() string {
	u := url.URL{
		Path:     "/v2/mail-migrations",
		RawQuery: r.query().Encode(),
	}
	return u.String()
}

func (r *MigrationListMigrationsRequest) query() url.Values {
	q := make(url.Values)
	if r.PAccountName != nil {
		q.Set("pAccountName", *r.PAccountName)
	}
	if r.ProjectID != nil {
		q.Set("projectId", *r.ProjectID)
	}
	return q
}
