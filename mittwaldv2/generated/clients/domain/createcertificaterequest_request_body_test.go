package domain_test

// This code was automatically generated by github.com/mittwald/api-client-go-builder.
// DO NOT EDIT.

import (
	"encoding/json"

	"github.com/mittwald/api-client-go/mittwaldv2/generated/clients/domain"
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

var _ = Describe("CreateCertificateRequestRequestBody", func() {
	When("unmarshaling from JSON", func() {
		It("should unmarshal into AlternativeCertificateRequestCreateRequest", func() {
			exampleJSON := []byte("{\"certificate\":\"string\",\"privateKey\":\"string\",\"projectId\":\"7a9d8971-09b0-4c39-8c64-546b6e1875ce\"}")

			sut := domain.CreateCertificateRequestRequestBody{}
			Expect(json.Unmarshal(exampleJSON, &sut)).To(Succeed())
			Expect(sut.Validate()).To(Succeed())
			Expect(sut.AlternativeCertificateRequestCreateRequest).NotTo(BeNil())
		})
		It("should unmarshal into AlternativeCertificateRequestCreateWithCSRRequest", func() {
			exampleJSON := []byte("{\"commonName\":\"string\",\"contact\":{\"city\":\"string\",\"company\":\"string\",\"country\":\"DE\",\"organizationalUnit\":\"string\",\"state\":\"string\"},\"projectId\":\"7a9d8971-09b0-4c39-8c64-546b6e1875ce\"}")

			sut := domain.CreateCertificateRequestRequestBody{}
			Expect(json.Unmarshal(exampleJSON, &sut)).To(Succeed())
			Expect(sut.Validate()).To(Succeed())
			Expect(sut.AlternativeCertificateRequestCreateWithCSRRequest).NotTo(BeNil())
		})
	})
})
